{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/image/boxes/anon-inline.png","path":"image/boxes/anon-inline.png","modified":1,"renderable":0},{"_id":"source/image/boxes/block-boxes.png","path":"image/boxes/block-boxes.png","modified":1,"renderable":0},{"_id":"source/image/boxes/inline-boxes.png","path":"image/boxes/inline-boxes.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/github.png","path":"images/github.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/rss.png","path":"images/rss.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/weibo.png","path":"images/weibo.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/hook-duoshuo.js","path":"js/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/lazyload.js","path":"js/lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/nav-toggle.js","path":"js/nav-toggle.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/ua-parser.min.js","path":"js/ua-parser.min.js","modified":1,"renderable":1},{"_id":"source/image/boxes/anon-inline.psd","path":"image/boxes/anon-inline.psd","modified":1,"renderable":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-default/selection.json","path":"fonts/icon-default/selection.json","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-feather/selection.json","path":"fonts/icon-feather/selection.json","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","path":"fonts/icon-fifty-shades/selection.json","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","path":"fonts/icon-linecons/selection.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"source/image/boxes/block-boxes.psd","path":"image/boxes/block-boxes.psd","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"source/image/boxes/inline-boxes.psd","path":"image/boxes/inline-boxes.psd","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"3b9b7762f3a97a8b2b7710267e69a0a0ad0767bb","modified":1473024460043},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1473016777436},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1473016777436},{"_id":"themes/next/.jshintrc","hash":"49b54f7b862f20d15edb1b172ef341a048ec4a9f","modified":1473016777451},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1473016777451},{"_id":"themes/next/_config.yml","hash":"cf57ed45f723ab66b6e8fa78021c5f7778520e9d","modified":1473022585399},{"_id":"themes/next/README.md","hash":"61e4962644a4e89ce6da27b73c32dba54dac4aa4","modified":1473016777467},{"_id":"themes/next/bower.json","hash":"59f3d5b4694db39e383c9090e69823ee16c11ba4","modified":1473016777483},{"_id":"source/categories/index.md","hash":"071abec7e0539610b26f164cc40ca11cad73a079","modified":1473016777283},{"_id":"source/about/index.md","hash":"21ffbcbdd2d42a0fda22626e94e1c96f2055beb4","modified":1473184134008},{"_id":"source/tags/index.md","hash":"fe2375a7fb071aa75e4d75677c296040ff5f9539","modified":1473016777436},{"_id":"themes/next/languages/default.yml","hash":"513c22371c3085224c466c10c6b1dd2735877f04","modified":1473016777498},{"_id":"themes/next/languages/de.yml","hash":"3af67eda28640a99e17d06eec0c664e54e95fb2d","modified":1473016777483},{"_id":"themes/next/languages/en.yml","hash":"513c22371c3085224c466c10c6b1dd2735877f04","modified":1473016777498},{"_id":"themes/next/languages/fr-FR.yml","hash":"694980cca651eca633fec7f63da6e69070a28669","modified":1473016777498},{"_id":"themes/next/languages/ru.yml","hash":"be6821b00c20dfe15717415fca3b1a5d719f4014","modified":1473016777514},{"_id":"themes/next/languages/zh-Hans.yml","hash":"08ad091275789bbff17043c8c05a1f7355e6cc3d","modified":1473016777514},{"_id":"themes/next/languages/zh-hk.yml","hash":"a36d81d609bb0fbfb1ca5f264c6e1c0d95fb9fae","modified":1473016777536},{"_id":"themes/next/languages/zh-tw.yml","hash":"9fd6f672e503c50d6cc004df178387fc10be62db","modified":1473016777536},{"_id":"themes/next/layout/_layout.swig","hash":"51a66ed61650fd643b468742fee701f3e6c9612e","modified":1473016777735},{"_id":"themes/next/layout/archive.swig","hash":"40e899e690172d8dd19317b17ec7be94406f114f","modified":1473016778183},{"_id":"themes/next/layout/category.swig","hash":"c777432e1587826ccad5a4aa50309763a82df52b","modified":1473016778183},{"_id":"themes/next/layout/index.swig","hash":"836631665db2b37639028fbc3aaa0b96f059e45c","modified":1473016778199},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1473016778199},{"_id":"themes/next/layout/post.swig","hash":"e67a6aabe4d71cbcf01a4cace652424bd49acc9b","modified":1473016778214},{"_id":"themes/next/layout/tag.swig","hash":"06417b0b050c66d816323b6178c9376ba2e58dd9","modified":1473016778214},{"_id":"themes/next/scripts/merge-configs.js","hash":"2a47a2eb10c4491beffa8c5dd2a04cdb493ee80c","modified":1473016778236},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1473016779954},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1473016779985},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1473016780001},{"_id":"source/_posts/xiupi酱/作为个人，你的商业模式有没有问题.md","hash":"a09b22e8e733db648e7e775b0e2de18269d3a415","modified":1473194655743},{"_id":"source/_posts/xiupi酱/链家！下一场变革将在哪里发生？.md","hash":"e12d4e9b67eaecfe6ac65ee78a5df6742ad250ce","modified":1473194442392},{"_id":"source/_posts/前端/BFC如何应用到实际场景.md","hash":"f3a23858a6a4f7e02f9e99b1ee8011b696d1a5d5","modified":1473189140391},{"_id":"source/_posts/前端/margin系列之与相对偏移的异同.md","hash":"31010dc18fb8a3cdd724ce9b4368c2b379eaaa80","modified":1473189121130},{"_id":"source/_posts/前端/你需要了解的z-index世界.md","hash":"85a4861f7acaecea13897a5420b0d9c65b497418","modified":1473189091224},{"_id":"source/_posts/前端/置换和非置换元素.md","hash":"c3f89cedfb9cfcc80a29d8b1152da9a0f13d1619","modified":1473189032805},{"_id":"source/_posts/前端/视觉格式化模型中的各种框.md","hash":"49843e01aaf77d6775a8ad5a5b22a8e9b9917594","modified":1473189060678},{"_id":"source/_posts/后端/MySQL流行的原因.md","hash":"8cb134181e6fe80fe6e80d608855d94184fe82d7","modified":1473194781906},{"_id":"source/_posts/生活/一年又要过去了.md","hash":"39eee1ca25b53268af578db6cfb61e6cf0cacc62","modified":1473189551119},{"_id":"source/_posts/移动端/viewport详解.md","hash":"557242dde6e7204faa4c9e70407028de4b9a8961","modified":1473187563833},{"_id":"source/_posts/移动端/善用meta.md","hash":"9180a4c77810a5d5fa9cc2c06319e12deccf22cb","modified":1473188000289},{"_id":"source/_posts/移动端/这样简单的理解屏幕适配.md","hash":"10ccacdc82bb619a31f61784fd14fa54df538829","modified":1473188393601},{"_id":"source/image/boxes/anon-inline.png","hash":"c9c18b0e538dce55196ac50ad7d14647b37b3cfb","modified":1473016777298},{"_id":"source/image/boxes/block-boxes.png","hash":"c4631863f0bed0e2020670b461518cbe4f74c5b2","modified":1473016777351},{"_id":"source/image/boxes/inline-boxes.png","hash":"e68da68ef01b0e60fa542959369e2adaa3e2a1bc","modified":1473016777414},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1c50d5706f3621933b9f910c072d763323a5f7c1","modified":1473016777751},{"_id":"themes/next/layout/_macro/post.swig","hash":"33bed3fa410d42903f7b3ed8519af781f177cb0d","modified":1473016777751},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f3b99dfb20f6bc77e39fa550e3ca90d3d68a70e3","modified":1473016777767},{"_id":"themes/next/layout/_partials/footer.swig","hash":"df80e66f10850f898d0df0ff8706165aa5a26bd7","modified":1473184563427},{"_id":"themes/next/layout/_partials/head.swig","hash":"0b2d37e2d1d9254ed9d770233727fadb58d793e1","modified":1473016777783},{"_id":"themes/next/layout/_partials/header.swig","hash":"256d6eb4d8a07c498b5322aea35f5c7f421574c3","modified":1473016777798},{"_id":"themes/next/layout/_partials/old-browsers.swig","hash":"3c4d930d34c234725065173780a23673e1c574f5","modified":1473016777798},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"591ed052c83d0091e299134c496818a9cdc85726","modified":1473016777814},{"_id":"themes/next/layout/_partials/search.swig","hash":"151940471dd1cd8fa61ecc434c23d883c5603b3b","modified":1473016777814},{"_id":"themes/next/layout/_scripts/analytics.swig","hash":"dfe81af3057cfe934e6f81ee386e5867853ac0aa","modified":1473016777899},{"_id":"themes/next/layout/_scripts/baidushare.swig","hash":"640d4dda003f54a0dffa4508fba4d91ac0dcfa6e","modified":1473016777933},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","hash":"0aad8d447567b683108b274c841c536b2daa176d","modified":1473016777936},{"_id":"themes/next/layout/_scripts/fancy-box.swig","hash":"701dfc53d750635de2f08f08d072d6ceb83b636c","modified":1473016777952},{"_id":"themes/next/layout/_scripts/helpers.swig","hash":"4d2cbfca0aaf546a2b5813288073e824c1498fdf","modified":1473016777968},{"_id":"themes/next/layout/_scripts/mathjax.swig","hash":"e113e497075ac8681c665a7831657901cfa4fb68","modified":1473016778114},{"_id":"themes/next/layout/_scripts/motion.swig","hash":"40439a4d4c8e8c2218da84ee1e586e11db9837be","modified":1473016778114},{"_id":"themes/next/scripts/tags/full-image.js","hash":"ce6e099110b247c1d704a989af143f560d5694ed","modified":1473016778283},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f27aa2a0e6c1ea07b6f673f0f3fa8c33828fd665","modified":1473016778252},{"_id":"themes/next/source/css/main.styl","hash":"272e494e179bd02c12d777daf71a5db59681a36f","modified":1473016778953},{"_id":"themes/next/source/images/alipay.png","hash":"f2fd7017ba59cd255ed843f14568483dda0dfb98","modified":1473021069377},{"_id":"themes/next/source/images/avatar.jpg","hash":"513fe4c5d5e3a1933e2e93bfd9bc634ca8e496dc","modified":1473022952105},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1473016779137},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1473016779153},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1473016779184},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1473016779200},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1473016779200},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1473016779216},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1473016779216},{"_id":"themes/next/source/images/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1473016779216},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473016779254},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473016779254},{"_id":"themes/next/source/images/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1473016779254},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473016779270},{"_id":"themes/next/source/images/wechat.jpg","hash":"5668de62cec5ad142d806a417a5e5d66ee1d6518","modified":1473019498919},{"_id":"themes/next/source/images/wechatpay.png","hash":"360cb4737051860085dd08bcc34a65626782842d","modified":1473021054954},{"_id":"themes/next/source/images/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1473016779270},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","hash":"97640be11a524b203781c1a03f623ef0b9195a02","modified":1473016779316},{"_id":"themes/next/source/js/fancy-box.js","hash":"18b732793545e2ceaf244ae379b8aa344ec815f6","modified":1473016779316},{"_id":"themes/next/source/js/helpers.js","hash":"092d54b791af7c4a11b1496294dd3259259058b6","modified":1473016779338},{"_id":"themes/next/source/js/hook-duoshuo.js","hash":"ea30e91c6b7fdaa6dce4a848f25cdf90436b072a","modified":1473016779354},{"_id":"themes/next/source/js/lazyload.js","hash":"dd94f7e88df11a1d760ca9994e21a58c07974fb2","modified":1473016779385},{"_id":"themes/next/source/js/motion_fallback.js","hash":"bff3d62933345bb9bba962332b8c3d31f7b01579","modified":1473016779400},{"_id":"themes/next/source/js/motion_global.js","hash":"78ae76bd32e2121ae8ec0e0b6cb1646449d1ab19","modified":1473016779435},{"_id":"themes/next/source/js/nav-toggle.js","hash":"43c86778408a2c0c97c2f34838687d3dcb018ad4","modified":1473016779454},{"_id":"themes/next/source/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1473016779470},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778636},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778636},{"_id":"themes/next/source/css/_mixins/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778652},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778853},{"_id":"themes/next/source/css/_variables/default.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778899},{"_id":"source/image/boxes/anon-inline.psd","hash":"7e234cbbaf35ae4b485abd1a7b78fa3a6efb2316","modified":1473016777351},{"_id":"themes/next/layout/_partials/search/baidu.swig","hash":"9fb148826d8f594755c3bbcb78121103c2c951b2","modified":1473016777836},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"73e8294939bbbb46755798215c605ebe5af5918f","modified":1473016777852},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"bc96432f4230056e616741d4916916be6b8e1053","modified":1473016777883},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1473016777899},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1473016777899},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1473016777914},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1473016777914},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","hash":"c1186e609d4810ebfb3e675e9045b023a557d1db","modified":1473016777936},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","hash":"c5643f07b121051460331489ab399137d2feb4b7","modified":1473016777952},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"3ac70198258ab3c2bceca452864b68cc14a9debf","modified":1473016778168},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5e165d4bdfd0d8a364b38d41dc8755b2ae56d6b6","modified":1473016778636},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"c76b9e3ff7dec124ac1370ad185dce0e75dc1e03","modified":1473016778636},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"306149f2f2afe2a7c0277ee3f5116603c6eb8863","modified":1473016778768},{"_id":"themes/next/source/css/_variables/base.styl","hash":"0c1ff4293ad58de9624e290810003d31f875cc7f","modified":1473016778853},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","hash":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1473016778969},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","hash":"a2682f9b0a2647ec5cc35201ba37b0aceba86bcf","modified":1473016778969},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","hash":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1473016778969},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","hash":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1473016779015},{"_id":"themes/next/source/fonts/icon-default/selection.json","hash":"f05d514de60469cb8b77ab6dd68335d3de980377","modified":1473016779015},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","hash":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1473016779015},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","hash":"a701877262c33bd521204de4eaf842294a294ca7","modified":1473016779038},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","hash":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1473016779038},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","hash":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1473016779038},{"_id":"themes/next/source/fonts/icon-feather/selection.json","hash":"9a69a90c394f690f96758e0b012d0f85fdbb5d31","modified":1473016779038},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","hash":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1473016779038},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","hash":"021bab3a7cb80aaaead0aceeb23a324256470b22","modified":1473016779053},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","hash":"72fe82e1f3db52414eed706952d385af241cb196","modified":1473016779053},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","hash":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1473016779053},{"_id":"themes/next/source/fonts/icon-fifty-shades/selection.json","hash":"bc7767511444b4bc79c7e986ccd8b0a38dcd1541","modified":1473016779069},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1473016779084},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","hash":"51ca86690d0294529bb9a736984e7fa718d15933","modified":1473016779084},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1473016779084},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1473016779100},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","hash":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1473016779100},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","hash":"85371b5563515a4f3eed0690653a0c35ee0b9d99","modified":1473016779100},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","hash":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1473016779100},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","hash":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1473016779116},{"_id":"themes/next/source/fonts/icon-linecons/selection.json","hash":"8fb52012770b4745b18b43850737585d24a689cf","modified":1473016779116},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1473016779470},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1473016779486},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1473016779669},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1473016779669},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1473016779685},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1473016779700},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1473016779754},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1473016779801},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1473016779801},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1473016779885},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1473016779901},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1473016779954},{"_id":"themes/next/source/css/_common/_page/home.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473016778568},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1473016779785},{"_id":"source/image/boxes/block-boxes.psd","hash":"149a4055400a4ddbba6279b1524f43ec29933b92","modified":1473016777367},{"_id":"themes/next/source/css/_common/_component/back-to-top.styl","hash":"dac21141c7893ab9de697a8183d3b3f4eb7f0a5a","modified":1473016778283},{"_id":"themes/next/source/css/_common/_component/buttons.styl","hash":"0a1730773478d843e123404ab4dae24d7cb0f2b7","modified":1473016778299},{"_id":"themes/next/source/css/_common/_component/comments.styl","hash":"646b512b3b17f346cfcf70d56b49dc466dfb3501","modified":1473016778299},{"_id":"themes/next/source/css/_common/_component/gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1473016778314},{"_id":"themes/next/source/css/_common/_component/duoshuo.styl","hash":"76e8e6f5200e5e6063be6643c1cf340a51af6619","modified":1473016778314},{"_id":"themes/next/source/css/_common/_component/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1473016778336},{"_id":"themes/next/source/css/_common/_component/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1473016778330},{"_id":"themes/next/source/css/_common/_component/posts-collapse.styl","hash":"1d805b9ea9c7adc1ed3da9783d8af9b1c632134d","modified":1473016778336},{"_id":"themes/next/source/css/_common/_component/posts-expand.styl","hash":"0aa41e0115ad1cd0911bd88e50f1d3374dc36a4b","modified":1473016778336},{"_id":"themes/next/source/css/_common/_component/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1473016778352},{"_id":"themes/next/source/css/_common/_component/posts-type.styl","hash":"f28f00b2acb0df0343e77400bcc8246b40ac046c","modified":1473016778352},{"_id":"themes/next/source/css/_common/_core/base.styl","hash":"ee4499c8e219e6970423d02d8babe99d12982ed4","modified":1473016778399},{"_id":"themes/next/source/css/_common/_core/helpers.styl","hash":"05150387d08fdbd1b39be35f25afc23a72030a5a","modified":1473016778415},{"_id":"themes/next/source/css/_common/_core/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1473016778434},{"_id":"themes/next/source/css/_common/_core/scaffolding.styl","hash":"d8a7349abb071d9abfa3be1d70e8a30eae1a1af9","modified":1473016778452},{"_id":"themes/next/source/css/_common/_core/tables.styl","hash":"d6c9ed8daa0f2caf754fe044b42e7700379a9f60","modified":1473016778452},{"_id":"themes/next/source/css/_common/_fonts/icon-default.styl","hash":"c46d16429b85570347373fd11db8c222f6ff914e","modified":1473016778468},{"_id":"themes/next/source/css/_common/_fonts/icon-feather.styl","hash":"7bdc92a55f2eee20b6b546e93e4566696b459b9d","modified":1473016778499},{"_id":"themes/next/source/css/_common/_fonts/icon-fifty-shades.styl","hash":"dbb0843ea5aa7c2ac2755a2d1ce60fa662f1b939","modified":1473016778499},{"_id":"themes/next/source/css/_common/_fonts/icon-font.styl","hash":"692c01dcdc612c3e1e245cf93d0ace0a4e2aaf3f","modified":1473016778537},{"_id":"themes/next/source/css/_common/_fonts/icon-linecons.styl","hash":"a9f5260198225801eb5c16345a69a7e3cab904fe","modified":1473016778552},{"_id":"themes/next/source/css/_common/_page/archive.styl","hash":"df9e5a418f6e54abe69c1ab84649be46fb0c51a6","modified":1473016778568},{"_id":"themes/next/source/css/_common/_page/post-detail.styl","hash":"70464ceb64c4239af590f99ef319747d3d1f100b","modified":1473016778584},{"_id":"themes/next/source/css/_common/_page/categories.styl","hash":"6c34f2cf9ad9b9b787007cfca522deeb6b1ae3b7","modified":1473016778568},{"_id":"themes/next/source/css/_common/_section/body.styl","hash":"6eaa5d9cb08ecfb2d377a475e541e41fbfe4c1b6","modified":1473016778584},{"_id":"themes/next/source/css/_common/_section/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1473016778584},{"_id":"themes/next/source/css/_common/_section/header.styl","hash":"3df7b27f7dab4d4c07852dfd59ed0d06b1ac845c","modified":1473016778615},{"_id":"themes/next/source/css/_common/_section/layout.styl","hash":"57ed294f100d94ebc05f48145e5060a78edb405f","modified":1473016778615},{"_id":"themes/next/source/css/_common/_section/media.styl","hash":"482784c04c0cd15a3f0d86444966fe306af7d13a","modified":1473016778615},{"_id":"themes/next/source/css/_common/_section/sidebar.styl","hash":"b76f6daabce223f9e776f800b9ea79f60eb6c9c5","modified":1473016778631},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"eac7833ed4b1a526e9ab97a0987a650566945dbc","modified":1473016778668},{"_id":"themes/next/source/css/_schemes/default/_menu.styl","hash":"dd667be3f5f24cebdc15d0262c7d397f23d751c5","modified":1473016778699},{"_id":"themes/next/source/css/_schemes/default/_search.styl","hash":"e315ee6f604c2bcc44a5ef9078f5ce420c153a4b","modified":1473016778752},{"_id":"themes/next/source/css/_schemes/default/index.styl","hash":"e1dcc89ecbd93f46aacd5d0da39f74c22eb52916","modified":1473016778768},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473016779486},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473016779486},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473016779486},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473016779486},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473016779486},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473016779501},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1473016779585},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1473016779600},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1473016779653},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1473016779754},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473016779754},{"_id":"source/image/boxes/inline-boxes.psd","hash":"b3fe4e23e98d389273ab7b1ed84526479ff67ae3","modified":1473016777414},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1473016779854},{"_id":"themes/next/source/css/_common/_vendor/highlight/theme.styl","hash":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1473016778636},{"_id":"themes/next/source/css/_common/_vendor/highlight/highlight.styl","hash":"6cb8658ec3aa8a52a6a63d9e58d19ab3a5016b5e","modified":1473016778636},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473016779501},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1473016779501},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1473016779517},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1473016779538},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1473016779538},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1473016779554},{"_id":"public/categories/index.html","hash":"c1d8522efd49ceeef9032a0780cd255fe1b8b911","modified":1473195017882},{"_id":"public/about/index.html","hash":"8caa1d29c9d38332013ff9bbe92b61fbfde3d8e5","modified":1473195017882},{"_id":"public/tags/index.html","hash":"45fb8610d8b8613c0bf6313a6e19c0e7305cebb2","modified":1473195017882},{"_id":"public/archives/page/2/index.html","hash":"0d49b179a78665bc1ff122c577b50f878fc80550","modified":1473195017882},{"_id":"public/archives/2013/index.html","hash":"e42a0a83164e693b1001d417ba7d3fe83e06bafc","modified":1473195017882},{"_id":"public/archives/2013/11/index.html","hash":"44a5487d384f4580ab6151d72c541cfa62107587","modified":1473195017882},{"_id":"public/archives/2013/12/index.html","hash":"d129d9befc1ad65aa617a9107d23c0ca716e77fd","modified":1473195017882},{"_id":"public/archives/2014/index.html","hash":"b85c8ddb57edc23d3fa8fed5d4b65e832bcdfda3","modified":1473195017882},{"_id":"public/archives/2014/01/index.html","hash":"e1f9c9e7aa41a566fc8414b780a7e62d5b196a84","modified":1473195017882},{"_id":"public/archives/2015/index.html","hash":"d96d2a34ccc38325a9f91c2cc95608e9435bd6d8","modified":1473195017882},{"_id":"public/archives/2015/03/index.html","hash":"349ef222660af19843ba17ae736dea408b966071","modified":1473195017882},{"_id":"public/archives/2015/04/index.html","hash":"1f508f8f31754736852a146b611195cbc47ab44f","modified":1473195017882},{"_id":"public/archives/2016/index.html","hash":"a5b49a9196b7f28a078ba04dd7a36eeaa33e1356","modified":1473195017882},{"_id":"public/archives/2016/09/index.html","hash":"b7f14d5e46036001ce84a5152f28b1b2372f659e","modified":1473195017882},{"_id":"public/categories/xiupi酱/index.html","hash":"d59ee460e15bb91abe02433726ca888fbc7a8689","modified":1473195017882},{"_id":"public/categories/前端/index.html","hash":"5eee0af22039fe0d58a596ab601c1119d67b9acc","modified":1473195017882},{"_id":"public/categories/生活/index.html","hash":"fe1f2ccfb9482a84f3b96df111aa6f92b442838b","modified":1473195017882},{"_id":"public/categories/后端/index.html","hash":"39dc645b52fbf1685120c16fc9cf30f25cec111c","modified":1473195017882},{"_id":"public/categories/移动端/index.html","hash":"a46dea8a1792534e5c4c95002bc3e8727ceb18fe","modified":1473195017882},{"_id":"public/tags/创业/index.html","hash":"5fe81ddcfa58a7aba895c2f0449a7b42c0075fd7","modified":1473195017882},{"_id":"public/tags/个人/index.html","hash":"6ca7879388f7067995f7974952914e612c2627dc","modified":1473195017882},{"_id":"public/tags/商业模式/index.html","hash":"052a77396a8222938286fd3758a1d25c4f99f942","modified":1473195017882},{"_id":"public/tags/链家/index.html","hash":"f76f0d5779c1a7d66aef97b0e2cb4dd9c0729595","modified":1473195017882},{"_id":"public/tags/玻璃投影/index.html","hash":"77cdbb6e32b898e2deca51725b8aab8113f055d5","modified":1473195017882},{"_id":"public/tags/w3c/index.html","hash":"f6c8d14a99ec55dbc1ad78728fb582ccc7da9531","modified":1473195017882},{"_id":"public/tags/BFC/index.html","hash":"959c9412db0b022516a1a6be4eff47c576206664","modified":1473195017882},{"_id":"public/tags/css/index.html","hash":"80fca517c8e68ea5e59e3194554f3fd08621f04f","modified":1473195017882},{"_id":"public/tags/margin/index.html","hash":"3078c26386e4363ade352f36dbf8fa7ed60133f9","modified":1473195017882},{"_id":"public/tags/margin偏移/index.html","hash":"ed986529fbd034e71255a7886776f116e31c2235","modified":1473195017882},{"_id":"public/tags/z-index/index.html","hash":"fade01c4c69fd0c5802144b434e90502d4a16d53","modified":1473195017882},{"_id":"public/tags/层叠上下文/index.html","hash":"e19b2fb1a7c931e62879651b918eb294768ef024","modified":1473195017882},{"_id":"public/tags/视觉格式化模型/index.html","hash":"2b58d80724e86fab486ca790860899281c64bdbe","modified":1473195017882},{"_id":"public/tags/非置换元素/index.html","hash":"25012ca27fc46407c7cfcf6ed40d5540ffe31649","modified":1473195017882},{"_id":"public/tags/置换元素/index.html","hash":"9f8a1f699f48334b0e10383fb39e0b21710d4773","modified":1473195017882},{"_id":"public/tags/包含块/index.html","hash":"43f8ca10230d61306337149c708ec91ce4b2583e","modified":1473195017882},{"_id":"public/tags/随笔/index.html","hash":"b7232fe80ee76ff7ddea8cb8cb4f9147bb0104ab","modified":1473195017882},{"_id":"public/tags/生活/index.html","hash":"a5c1b68674325a49c27df214cbc7e3aefd6bf3a1","modified":1473195017882},{"_id":"public/tags/MySQL/index.html","hash":"be6903593b8da91163eee9503ab88f7e2d215e63","modified":1473195017882},{"_id":"public/tags/mysql/index.html","hash":"04ba405bdcf89b37bb8732a608b7d8fbba4f39af","modified":1473195017882},{"_id":"public/tags/HTML5/index.html","hash":"1deb35184f0d39280a953089aa6ae6e45917ca25","modified":1473195017882},{"_id":"public/tags/viewport/index.html","hash":"c205c9dd680b9f0508ac1672782ae9ea02d3adca","modified":1473195017882},{"_id":"public/tags/meta/index.html","hash":"8c9bb2e9d25ce0d4dc22c275d9da884e3857203d","modified":1473195017882},{"_id":"public/tags/meta大全/index.html","hash":"ce4c49fa5dd50d605bdb1d0f3029ef7a5a54b91d","modified":1473195017882},{"_id":"public/tags/meta列表/index.html","hash":"f8d79763f3624d9ab64f23e32d1a0d47eeb13f5f","modified":1473195017882},{"_id":"public/tags/设备像素比/index.html","hash":"6207b31f7a940e519d3410ceb4a2aac2cb7565e2","modified":1473195017882},{"_id":"public/tags/devicePixelRatio/index.html","hash":"f419cb71a5fcaf377fd824b7d93328cc3b0858d4","modified":1473195017882},{"_id":"public/tags/DIP/index.html","hash":"5af194bee89bc69b230de18f9624502ececf9e44","modified":1473195017882},{"_id":"public/tags/设备独立像素/index.html","hash":"858f26c234432bbd6c5fdff56ac5b266741cb0b8","modified":1473195017882},{"_id":"public/tags/physical-pixel/index.html","hash":"9eae08699e4f8fe5f60614644bf4096c24c8f4fb","modified":1473195017882},{"_id":"public/tags/物理像素/index.html","hash":"6f5e5bd27bf768efe973e53371b372fdf7f91eb4","modified":1473195017882},{"_id":"public/tags/PPI/index.html","hash":"51d8730796c96e93b737fdfacade09fb2e5c26b7","modified":1473195017882},{"_id":"public/tags/每英寸像素量/index.html","hash":"f68b7dd57710dd22fe50034c481dba373c688211","modified":1473195017882},{"_id":"public/2016/09/07/xiupi酱/作为个人，你的商业模式有没有问题/index.html","hash":"2ea3dcace2a521d4ff6248148541e46f84e0b3d1","modified":1473195017882},{"_id":"public/2016/09/07/后端/MySQL流行的原因/index.html","hash":"62608faae9ef7632465f3a9178a0be46f3f85b1c","modified":1473195017882},{"_id":"public/2016/09/07/xiupi酱/链家！下一场变革将在哪里发生？/index.html","hash":"ba259524a1e5e4767cf8f76d8d56d90d28a5a034","modified":1473195017882},{"_id":"public/2016/09/07/移动端/viewport详解/index.html","hash":"be15b5c3e86b9bcbdaea872108a61ab4f2aa35bc","modified":1473195017882},{"_id":"public/2016/09/07/移动端/善用meta/index.html","hash":"620bde1452135e38b95e9f563e608ab619496002","modified":1473195017882},{"_id":"public/2016/09/07/移动端/这样简单的理解屏幕适配/index.html","hash":"29df989a18d9d64c1e16a89df38ea90c8cdd4c71","modified":1473195017882},{"_id":"public/2015/04/12/前端/BFC如何应用到实际场景/index.html","hash":"cc4175e304e38da1001023f1d2724d41e1132da3","modified":1473195017882},{"_id":"public/2015/03/15/前端/置换和非置换元素/index.html","hash":"06fd71456339dcff81bdabba35c03bb0f4af4ac1","modified":1473195017882},{"_id":"public/2015/03/09/前端/视觉格式化模型中的各种框/index.html","hash":"c49f77f6ce80d891ba3dc1805d178dee8a6f7681","modified":1473195017882},{"_id":"public/2014/01/21/前端/你需要了解的z-index世界/index.html","hash":"133611f0aeabc26a927deffec96f797f43113f19","modified":1473195017882},{"_id":"public/2013/12/02/前端/margin系列之与相对偏移的异同/index.html","hash":"1077a682d8b5bdf6e52e19c4bbfbd4300aa8e50e","modified":1473195017882},{"_id":"public/2013/11/28/生活/一年又要过去了/index.html","hash":"4b16d4dc44bcb867a47354d4a84fa7daf64598dc","modified":1473195017882},{"_id":"public/archives/index.html","hash":"40c97e1a2092da40cd6126b217362db4d802df67","modified":1473195017882},{"_id":"public/index.html","hash":"59439ca71b99e1abd2eaf92619040992026a4bbc","modified":1473195017882},{"_id":"public/page/2/index.html","hash":"9775e3cf6f8d172338f88817148d8b3ada857071","modified":1473195017882},{"_id":"public/CNAME","hash":"3b9b7762f3a97a8b2b7710267e69a0a0ad0767bb","modified":1473195017913},{"_id":"public/image/boxes/anon-inline.png","hash":"c9c18b0e538dce55196ac50ad7d14647b37b3cfb","modified":1473195017913},{"_id":"public/image/boxes/block-boxes.png","hash":"c4631863f0bed0e2020670b461518cbe4f74c5b2","modified":1473195017913},{"_id":"public/image/boxes/inline-boxes.png","hash":"e68da68ef01b0e60fa542959369e2adaa3e2a1bc","modified":1473195017913},{"_id":"public/images/avatar.jpg","hash":"513fe4c5d5e3a1933e2e93bfd9bc634ca8e496dc","modified":1473195017913},{"_id":"public/images/alipay.png","hash":"f2fd7017ba59cd255ed843f14568483dda0dfb98","modified":1473195017913},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1473195017913},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1473195017913},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1473195017913},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1473195017913},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1473195017913},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1473195017913},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1473195017913},{"_id":"public/images/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1473195017913},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473195017913},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473195017913},{"_id":"public/images/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1473195017913},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473195017913},{"_id":"public/images/wechat.jpg","hash":"5668de62cec5ad142d806a417a5e5d66ee1d6518","modified":1473195017913},{"_id":"public/images/wechatpay.png","hash":"360cb4737051860085dd08bcc34a65626782842d","modified":1473195017913},{"_id":"public/images/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1473195017913},{"_id":"public/fonts/icon-default/icomoon.eot","hash":"90763e97be18be78e65749075225cceeddc6fa8a","modified":1473195017913},{"_id":"public/fonts/icon-default/icomoon.svg","hash":"a2682f9b0a2647ec5cc35201ba37b0aceba86bcf","modified":1473195017913},{"_id":"public/fonts/icon-default/icomoon.ttf","hash":"c093408e6030221cafc1f79d897f1fb5283c1178","modified":1473195017913},{"_id":"public/fonts/icon-default/icomoon.woff","hash":"dbe0368f2a65d87b13234cfea29d9783892fc7a8","modified":1473195017913},{"_id":"public/fonts/icon-feather/icomoon.eot","hash":"11554b9e9d5b9f535ba96cbb27d45d8c8f1689fd","modified":1473195017913},{"_id":"public/fonts/icon-feather/icomoon.svg","hash":"a701877262c33bd521204de4eaf842294a294ca7","modified":1473195017913},{"_id":"public/fonts/icon-feather/icomoon.ttf","hash":"b2bbae4b613403cf61ad25037913378da1c07b8f","modified":1473195017929},{"_id":"public/fonts/icon-feather/icomoon.woff","hash":"2ea1c59c17422798e64ee6f4e9ce1f7aff1a06a5","modified":1473195017929},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","hash":"da86ba5df72d1288de9e9633e5f528062dd427d5","modified":1473195017929},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","hash":"021bab3a7cb80aaaead0aceeb23a324256470b22","modified":1473195017929},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","hash":"72fe82e1f3db52414eed706952d385af241cb196","modified":1473195017929},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","hash":"4de6a74f523dee33d95dde61caae5809f9a5d448","modified":1473195017929},{"_id":"public/fonts/icon-icomoon/icomoon.eot","hash":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1473195017929},{"_id":"public/fonts/icon-icomoon/icomoon.svg","hash":"51ca86690d0294529bb9a736984e7fa718d15933","modified":1473195017929},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","hash":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1473195017929},{"_id":"public/fonts/icon-icomoon/icomoon.woff","hash":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1473195017929},{"_id":"public/fonts/icon-linecons/icomoon.eot","hash":"e2d7f040428a632f3c50bfa94083b759936effc2","modified":1473195017929},{"_id":"public/fonts/icon-linecons/icomoon.svg","hash":"85371b5563515a4f3eed0690653a0c35ee0b9d99","modified":1473195017929},{"_id":"public/fonts/icon-linecons/icomoon.ttf","hash":"078068206684e4f185b0187ad3cee16f54a287d7","modified":1473195017929},{"_id":"public/fonts/icon-linecons/icomoon.woff","hash":"0b07ee6ceda3b1bceb40c1e7379b3aa48dcc15a8","modified":1473195017929},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1473195017929},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473195017929},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473195017929},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473195017929},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473195017929},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473195017929},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473195017929},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473195017929},{"_id":"public/js/bootstrap.scrollspy.js","hash":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1473195027653},{"_id":"public/js/fancy-box.js","hash":"c9782bfa8c1e51a8f8541530d836e75f48a433c2","modified":1473195027653},{"_id":"public/js/helpers.js","hash":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1473195027653},{"_id":"public/js/lazyload.js","hash":"b92e9acdc7afc15468314c03f4a643b0c93944cf","modified":1473195027653},{"_id":"public/js/hook-duoshuo.js","hash":"5f722b3967d50cc1e36efaa5e2a4a0ad464496b0","modified":1473195027653},{"_id":"public/js/motion_fallback.js","hash":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1473195027653},{"_id":"public/js/motion_global.js","hash":"367e329b2cc19c6b7634ea2917a218c84a22ec17","modified":1473195027653},{"_id":"public/js/nav-toggle.js","hash":"78b59f1beb12adea0d7f9bcf4377cb699963f220","modified":1473195027653},{"_id":"public/js/ua-parser.min.js","hash":"acf0ee6a47ffb7231472b56e43996e3f947c258a","modified":1473195027653},{"_id":"public/fonts/icon-default/selection.json","hash":"ff1b9b78eced4d0368d14cc192ac67a0dd498593","modified":1473195027653},{"_id":"public/fonts/icon-feather/selection.json","hash":"d95a90b0d541e48b049902090c0d008ad92b4115","modified":1473195027653},{"_id":"public/fonts/icon-fifty-shades/selection.json","hash":"e5a5042e8e516b1d30fa3b1206d2c74921cec72b","modified":1473195027653},{"_id":"public/fonts/icon-linecons/selection.json","hash":"68da6ea1b3ab9355d42694bf5745071cdefa4a65","modified":1473195027653},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1473195027653},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1473195027653},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1473195027653},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1473195027653},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1473195027653},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473195027653},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1473195027653},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1473195027653},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1473195027653},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1473195027653},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1473195027653},{"_id":"public/css/main.css","hash":"8a2c0ee7ff7f1dac6400bbc1e5ca3e85fcc99537","modified":1473195027653},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1473195027653},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1473195027653},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1473195027653},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1473195027653},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1473195027653},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1473195027653},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1473195027653},{"_id":"public/image/boxes/anon-inline.psd","hash":"7e234cbbaf35ae4b485abd1a7b78fa3a6efb2316","modified":1473195027669},{"_id":"public/image/boxes/block-boxes.psd","hash":"149a4055400a4ddbba6279b1524f43ec29933b92","modified":1473195027684},{"_id":"public/image/boxes/inline-boxes.psd","hash":"b3fe4e23e98d389273ab7b1ed84526479ff67ae3","modified":1473195028016}],"Category":[{"name":"xiupi酱","_id":"cisry9vp60006lsvf81etbkae"},{"name":"前端","_id":"cisry9vq4000flsvf5v58lp5g"},{"name":"生活","_id":"cisry9vq70014lsvfx0vawlc1"},{"name":"后端","_id":"cisry9vqn0017lsvf4rg4hr48"},{"name":"移动端","_id":"cisry9vqn001blsvffuz00uea"}],"Data":[],"Page":[{"title":"分类","date":"2015-10-04T06:49:36.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-10-04 14:49:36\ntype: categories\n---\n","updated":"2016-09-04T19:19:37.283Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cisry9vkn0000lsvf0035nyqn","content":"","excerpt":"","more":""},{"title":"关于我","date":"2016-09-05T03:15:00.000Z","tags":["简历","自我介绍"],"type":"about","_content":"\n## 关于\n\n史念秀，网络上陆续用过一些昵称，比如：xiupi酱、大胖小秀、冰雍、Xander。\n\n史念想是博主的真实名字；'xiupi酱'是2016年网红时代酱仔们起的；'大胖小秀'源于博主受到'大城小胖'许多启发；'冰雍'源于2012年博主也写小说起的艺名；'Xander'无非就是博主的英文名字啦。\n\n## 职业\n\n目前在帝都，任职于[众智视创](http://www.iexchane.com/)，对我感兴趣的的童鞋，欢迎艾特我的微博 [@xiupi酱](http://weibo.com/shinianxiu)。\n\n## 版权申明\n\n本站的文章都是原创，大家可以随意转载，只需留有原文出处即可。\n\n另外：由于技术类的文章，可能都会有一定的时效性，大家在阅读文章时，请保持谨慎，因为可能你正在阅读的文章已经过时。博主会持续维护本站的文章，但博主无法通知转载者对文章进行更新。为了不给读者造成困扰或误导，请大家在转载时加上原文出处。\n\n## 赞助本站\n\n如果你认为我的文章对你有帮助，欢迎赞助本站\n\n![微信](/images/wechatpay.png)\n![支付宝](/images/alipay.png)\n\n当然，你的留言互动也是一种对博主支持方式，请不要吝惜文字表达。\n\n## 我的站点：\n* [野鸟行](http://www.yeniaoxing.com/)\n* [git中国](http://www.gitsou.com/)\n* [众智视创](http://www.iexchane.com/)\n* [众智视创博文](http://abtglass.iexchane.com/)\n* [git中国开源社区](http://www.nianxiushi.com/)\n* [xiupi酱探索之旅](http://xiupijiang.gitsou.com/)\n* [xiupi酱交易中心](http://dev.iexchane.com/)","source":"about/index.md","raw":"title: 关于我\ndate: 2016-09-05 11:15:00\ntags: [简历, 自我介绍]\ntype: about\n---\n\n## 关于\n\n史念秀，网络上陆续用过一些昵称，比如：xiupi酱、大胖小秀、冰雍、Xander。\n\n史念想是博主的真实名字；'xiupi酱'是2016年网红时代酱仔们起的；'大胖小秀'源于博主受到'大城小胖'许多启发；'冰雍'源于2012年博主也写小说起的艺名；'Xander'无非就是博主的英文名字啦。\n\n## 职业\n\n目前在帝都，任职于[众智视创](http://www.iexchane.com/)，对我感兴趣的的童鞋，欢迎艾特我的微博 [@xiupi酱](http://weibo.com/shinianxiu)。\n\n## 版权申明\n\n本站的文章都是原创，大家可以随意转载，只需留有原文出处即可。\n\n另外：由于技术类的文章，可能都会有一定的时效性，大家在阅读文章时，请保持谨慎，因为可能你正在阅读的文章已经过时。博主会持续维护本站的文章，但博主无法通知转载者对文章进行更新。为了不给读者造成困扰或误导，请大家在转载时加上原文出处。\n\n## 赞助本站\n\n如果你认为我的文章对你有帮助，欢迎赞助本站\n\n![微信](/images/wechatpay.png)\n![支付宝](/images/alipay.png)\n\n当然，你的留言互动也是一种对博主支持方式，请不要吝惜文字表达。\n\n## 我的站点：\n* [野鸟行](http://www.yeniaoxing.com/)\n* [git中国](http://www.gitsou.com/)\n* [众智视创](http://www.iexchane.com/)\n* [众智视创博文](http://abtglass.iexchane.com/)\n* [git中国开源社区](http://www.nianxiushi.com/)\n* [xiupi酱探索之旅](http://xiupijiang.gitsou.com/)\n* [xiupi酱交易中心](http://dev.iexchane.com/)","updated":"2016-09-06T17:48:54.008Z","path":"about/index.html","comments":1,"layout":"page","_id":"cisry9vl30001lsvf5loafia5","content":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>史念秀，网络上陆续用过一些昵称，比如：xiupi酱、大胖小秀、冰雍、Xander。</p>\n<p>史念想是博主的真实名字；’xiupi酱’是2016年网红时代酱仔们起的；’大胖小秀’源于博主受到’大城小胖’许多启发；’冰雍’源于2012年博主也写小说起的艺名；’Xander’无非就是博主的英文名字啦。</p>\n<h2 id=\"职业\"><a href=\"#职业\" class=\"headerlink\" title=\"职业\"></a>职业</h2><p>目前在帝都，任职于<a href=\"http://www.iexchane.com/\" target=\"_blank\" rel=\"external\">众智视创</a>，对我感兴趣的的童鞋，欢迎艾特我的微博 <a href=\"http://weibo.com/shinianxiu\" target=\"_blank\" rel=\"external\">@xiupi酱</a>。</p>\n<h2 id=\"版权申明\"><a href=\"#版权申明\" class=\"headerlink\" title=\"版权申明\"></a>版权申明</h2><p>本站的文章都是原创，大家可以随意转载，只需留有原文出处即可。</p>\n<p>另外：由于技术类的文章，可能都会有一定的时效性，大家在阅读文章时，请保持谨慎，因为可能你正在阅读的文章已经过时。博主会持续维护本站的文章，但博主无法通知转载者对文章进行更新。为了不给读者造成困扰或误导，请大家在转载时加上原文出处。</p>\n<h2 id=\"赞助本站\"><a href=\"#赞助本站\" class=\"headerlink\" title=\"赞助本站\"></a>赞助本站</h2><p>如果你认为我的文章对你有帮助，欢迎赞助本站</p>\n<p><img src=\"/images/wechatpay.png\" alt=\"微信\"><br><img src=\"/images/alipay.png\" alt=\"支付宝\"></p>\n<p>当然，你的留言互动也是一种对博主支持方式，请不要吝惜文字表达。</p>\n<h2 id=\"我的站点：\"><a href=\"#我的站点：\" class=\"headerlink\" title=\"我的站点：\"></a>我的站点：</h2><ul>\n<li><a href=\"http://www.yeniaoxing.com/\" target=\"_blank\" rel=\"external\">野鸟行</a></li>\n<li><a href=\"http://www.gitsou.com/\">git中国</a></li>\n<li><a href=\"http://www.iexchane.com/\" target=\"_blank\" rel=\"external\">众智视创</a></li>\n<li><a href=\"http://abtglass.iexchane.com/\" target=\"_blank\" rel=\"external\">众智视创博文</a></li>\n<li><a href=\"http://www.nianxiushi.com/\" target=\"_blank\" rel=\"external\">git中国开源社区</a></li>\n<li><a href=\"http://xiupijiang.gitsou.com/\" target=\"_blank\" rel=\"external\">xiupi酱探索之旅</a></li>\n<li><a href=\"http://dev.iexchane.com/\" target=\"_blank\" rel=\"external\">xiupi酱交易中心</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h2><p>史念秀，网络上陆续用过一些昵称，比如：xiupi酱、大胖小秀、冰雍、Xander。</p>\n<p>史念想是博主的真实名字；’xiupi酱’是2016年网红时代酱仔们起的；’大胖小秀’源于博主受到’大城小胖’许多启发；’冰雍’源于2012年博主也写小说起的艺名；’Xander’无非就是博主的英文名字啦。</p>\n<h2 id=\"职业\"><a href=\"#职业\" class=\"headerlink\" title=\"职业\"></a>职业</h2><p>目前在帝都，任职于<a href=\"http://www.iexchane.com/\">众智视创</a>，对我感兴趣的的童鞋，欢迎艾特我的微博 <a href=\"http://weibo.com/shinianxiu\">@xiupi酱</a>。</p>\n<h2 id=\"版权申明\"><a href=\"#版权申明\" class=\"headerlink\" title=\"版权申明\"></a>版权申明</h2><p>本站的文章都是原创，大家可以随意转载，只需留有原文出处即可。</p>\n<p>另外：由于技术类的文章，可能都会有一定的时效性，大家在阅读文章时，请保持谨慎，因为可能你正在阅读的文章已经过时。博主会持续维护本站的文章，但博主无法通知转载者对文章进行更新。为了不给读者造成困扰或误导，请大家在转载时加上原文出处。</p>\n<h2 id=\"赞助本站\"><a href=\"#赞助本站\" class=\"headerlink\" title=\"赞助本站\"></a>赞助本站</h2><p>如果你认为我的文章对你有帮助，欢迎赞助本站</p>\n<p><img src=\"/images/wechatpay.png\" alt=\"微信\"><br><img src=\"/images/alipay.png\" alt=\"支付宝\"></p>\n<p>当然，你的留言互动也是一种对博主支持方式，请不要吝惜文字表达。</p>\n<h2 id=\"我的站点：\"><a href=\"#我的站点：\" class=\"headerlink\" title=\"我的站点：\"></a>我的站点：</h2><ul>\n<li><a href=\"http://www.yeniaoxing.com/\">野鸟行</a></li>\n<li><a href=\"http://www.gitsou.com/\">git中国</a></li>\n<li><a href=\"http://www.iexchane.com/\">众智视创</a></li>\n<li><a href=\"http://abtglass.iexchane.com/\">众智视创博文</a></li>\n<li><a href=\"http://www.nianxiushi.com/\">git中国开源社区</a></li>\n<li><a href=\"http://xiupijiang.gitsou.com/\">xiupi酱探索之旅</a></li>\n<li><a href=\"http://dev.iexchane.com/\">xiupi酱交易中心</a></li>\n</ul>\n"},{"title":"标签","date":"2015-10-04T06:47:57.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: 标签\ndate: 2015-10-04 14:47:57\ntype: tags\n---\n","updated":"2016-09-04T19:19:37.436Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cisry9vl30002lsvfn8fihlyf","content":"","excerpt":"","more":""}],"Post":[{"title":"作为个人，你的商业模式有没有问题","date":"2016-09-06T20:14:49.000Z","author":"xiupi酱","_content":"## 简介\n今天，介绍一个规划工具——个人商业模式画布，这是我自己用过并非常推荐的工具。为什么推荐呢？\n\n第一，它是从企业商业模式中演变而来，因此，借助它，有利于我们拔高思维高度，去思考策略层面的事情，而不是长久陷在执行层，拘泥于“我到底选哪份工作”、“我能涨多少工资”。\n\n当然，不是说这些不重要，只是我们太久困于这些问题，需要偶尔从这些问题中抽离出来，看得更高更远一些。\n\n第二，这个画布不仅仅是规划工具，还可以作为诊断工具来使用，可以诊断你当前的职业状态，从而为后期的规划奠定基础。\n\n我曾经说过，很多人在面临职业困境时，都只是在困扰，但从未思考，而这个工具能够帮助你真正思考，至少可以辅助你进行如下思考：\n\n1.当前的职业状态有没有问题；\n2.如何进行职业选择；\n3.如何规划职业甚至人生。\n## 使用\n\n我分两步来介绍这个工具的使用：第一，填写画布；第二，分析画布。\n#一 、如何填写画布  \n个人商业模式画布一共有九个要素，我将每个要素都标了序号，这个序号也代表你在填画布时候的思考和填写顺序。![画布][1]\n\n#要素1. 核心资源：我是谁，我有什么。\n\n这部分其实可以用以前文章讲过的冰山模型来概括。\n![冰山模型][2]\n我是谁，主要包括性格、价值观；\n\n我有什么，主要包括兴趣、知识、技能、能力。\n\n总之，在核心资源这个框内，尽可能把你有的要素都列出来。这些要素必须能够描述你这个人，能够把你与他人区分开来。\n\n在总结自身资源的时候，你会发现性格与价值观属于内心最深层的一面，它们是需要你不断自我反思，甚至是在发生一些冲突的时候，你才真正体会到。\n## 总结\n但对于兴趣、知识、技能、能力这些，我们在盘点它们的时候，其实是有一定技巧的。此前很多圈柚问过我这方面的问题，刚好借此机会给大家总结一下。\n\n1.1 兴趣：\n\n寻找兴趣，推荐三个方法：多尝试、多总结、做测评。\n\nA. 多尝试。这个无需多说，因为不去尝试，怎么会知道自己喜欢什么呢？很多事情，如果只是听说，往往容易产生一面之词。\n\nB. 多总结。世界上有成百上千个行业与职业，你不可能都去尝试。所以，你需要举一反三地总结，问自己一些深层次的问题。\n\n比如，你不喜欢销售这个工作，这只是浅层现象，你需要问自己：为什么不喜欢销售，不喜欢它哪方面，是讨厌应酬还是对自己产品没信心？是不喜欢这个行业的人么？这个工作有没有哪方面是你相对喜欢的？\n\n只有这样问自己，你才会更快地知道自己的兴趣。举例来说，因为讨厌应酬，所以你不喜欢销售，那下份工作就不是“非销售”这么简单，而是要去找不太需要应酬的工作。\n\n所以，如果你能够将之前做过的工作、甚至业余爱好，都按它的内容构成来做个剖析和总结的话，那就不需要把所有工作都尝试一遍，才知道答案。\n\nC. 做测评。测评工具有很多，比如霍兰德、职业锚等等，这些都是职业兴趣类的测试。当你没有太多工作经验的时候，测评是个辅助工具。\n\n但任何测评，它的实质都是分类和贴标签。所以测评只做参考，还是要以多尝试和举一反三的总结为主。\n\n另外，测评工具的选择也很重要，网上会有很多信效度非常差、完全没有经过验证的测评，比如看几张图就下结论的那种，误导你的可能性极大，只会让你离真实的自我越来越远。\n\n另外，关于兴趣，虽然多次提过，但是仍然还要再强调一下：享受不是兴趣！愿意付出才是兴趣！只接触皮毛不要谈兴趣！兴趣跟擅长有关！实在找不到兴趣点，就先做好眼前的事，不要陷在纠结的无底洞里。\n\n我为什么这么说，看这篇历史文章我有3招，让你不再越规划越迷茫\n\n1.2 知识\n\n知识很容易盘点，因为是在冰山的最上面，你学的专业、考过的证、看过的书，都可以算在知识里面。\n\n1.3 技能\n\n这里要盘点的是：你会什么本领、掌握多少语言、能用什么工具……不仅包括工作中的，也包括你擅长的业余爱好。\n\n为什么要包括业余爱好呢？因为我们曾经提过，有时候业余爱好跟本职工作结合起来，可能会帮助你发现一些跨领域的新机会。\n\n1.4 能力\n\n区别于主要适用某个领域的技能（比如编程），能力更多是指通用能力（比如沟通），盘点能力的方法跟兴趣类似，也是三个方式：\n\n多尝试：能力需要通过行为来发现，所以你做了事情，才能发现和锻炼自己的能力；\n\n多总结：哪些能力你比一般人强，而哪些能力比一般人弱，它们属于可培养的能力还是天生的能力；\n\n做测评：认知方面的能力可以通过测评，但是其它方面，较少有相应的工具。\n\n关于能力的总结，也可以用他人反馈，因为有时候你觉得自己某些能力很强，但别人未必这么认为，所以可以寻求身边同事和朋友的反馈。\n\n具体来说，可以在网上搜索能力词典，找到能力的清单。你可以从中挑选出自认为不错的能力项，并让身边同事朋友也帮你挑选，对比分析之后，发现你的能力优劣势。\n\n要素2. 关键业务：我要做什么。\n\n如果你有职业目标，比如你想做HR，那就把HR的主要工作任务写在这里；如果你暂无职业目标，那就写当前的工作现状，想想你日常工作中主要做什么。\n\n其实，我个人推荐现在和目标两个版本都写，后面分析的时候告诉大家原因。但是这里有几个注意点：\n\n2.1 如果你写的是目标，建议目标不要离你太远。\n\n因为太远的目标（比如你刚毕业，目标是十年后创业），你可能根本不知道如何着手，且过于遥远的目标，中途发生变化的可能性极大。所以，建议写未来三年内的目标即可。\n\n但如果你确实有一个远期目标或者理想，那也可以从目标往回推，先确定三年内的目标，写在这张画布上。\n\n这跟企业战略规划的道理是一样的，你很少看到企业现在还会做十年战略规划的。\n\n2.2 业务罗列不要太细，两三个重要提炼就可以。\n\n比如做咨询，关键业务就三点，第一，洽谈项目，第二，管理项目进度、预算和质量，第三，管理团队。这也是锻炼你结构化思维的一种方式，即：把你琐碎的工作事件归纳成为几个大的工作任务。\n\n2.3 无论目标还是现状，都要与画布的其它要素保持统一。\n\n我们后面会谈到的要素，比如客户群体、价值服务等等，都是以这个关键业务为基础的。\n\n所以，如果你在关键业务里面写了两个版本：现状和目标，那就意味着，其它要素也是写两个版本，这样才能对应起来，不应该出现：“关键业务”写的是目标，后面“客户群体”又写成了现状。\n\n要素3. 客户群体：我能帮助谁。\n\n这里包括企业内部和外部的人，即需要依赖你完成工作的人。企业内部的比如老板，以及你所支持的部门/岗位，外部的比如客户。\n\n对于一个企业来说，它的客户比较容易定义，就是为它付费的外部用户。\n\n但对于个人来说，你的客户构成略微有些复杂，因为决定你薪酬的对象可能有多个，首先老板毋庸置疑，其次，如果你的岗位是对客户的，那客户是否满意、是否买你们的产品等等，也决定了你的薪酬。所以都要包含在内。\n\n要素4. 价值服务：你为客户群体提供的价值是什么。\n\n打个比方：我们买苹果手机，是因为手机好，然后可能还有一点逼格，而买锤子手机呢，更多可能是冲着情怀。所以作为个人来讲，你也要有自己的价值定位。\n\n需要注意的是，价值服务与前面的关键业务是不同的。还是做咨询的例子，拿项目、管项目、带团队，这些是我的关键业务，也即我具体做的事情。\n\n而我的价值服务则是：帮助企业升级管理体系、提高组织效率、从而帮我的公司赚取更多收入。\n\n所以，价值服务更多的是结果和影响，而不是具体的任务。\n\n要素5. 渠道通路：怎样宣传自己、交付服务\n\n经过前面几步，你盘点了核心资源、找到了你的客户、并通过关键业务奠定了你的价值服务基础。\n\n那么，接下来的问题就是：如何向客户传递价值。也就是第五个要素：渠道通路，它包括如何宣传价值、卖出服务以及递交服务。\n\n还是苹果手机的例子：它怎么宣传自己的价值？开发布会、做媒体广告等。怎么卖出去呢？通过苹果专卖店和跟运营商合作等。怎么传递服务呢？通过苹果专卖店或者维修代理商等。\n\n再比如我做咨询的例子：对于外部客户，我的价值是：帮他们提升管理水平和组织效率。\n\n那如何宣传这个价值呢，比如参加一些行业协会、写POV文章等等。如何卖出服务呢，跟客户面对面交流，介绍曾经服务过的XX企业案例，以及对现客户企业存在的问题是怎么看的等等。\n\n要素6. 客户关系：怎样和对方打交道\n\n你如何跟客户打交道、处理好跟客户的关系，也十分重要。比如销售人员通过跟客户一起吃饭、打球等等，建立关系；很多互联网公司，通过社群来建立跟用户的联系。\n\n要素7. 重要合作：谁可以帮我\n\n你通常不会是靠单打独斗的。公司内部比如经常合作的部门，还有帮你提供资源的朋友，甚至一些公司会为员工配职业导师等，这些都属于重要合作对象。\n\n要素8. 收入来源：你在这份职业中获得的收获。\n\n这里的收入是广义的概念，包括物质回报和非物质回报。其中物质回报包括薪酬、福利、股权期权等；非物质回报则包括环境氛围、发展机会、成就感、满足感等等。\n\n要素9. 成本结构：你为这份职业需要付出什么。\n\n这里的付出包括时间、精力、金钱，甚至你的压力。\n\n从这九个要素当中，你会发现，个人跟企业的商业模式画布其实有区别的：对企业来说，成本和收入更多是财务上的；但对个人来说，你还需要考虑工作是不是开心，有没有发展等等。\n\n\n 二、 如何分析画布：画布的三大用途  \n\n\n至此，你的个人商业模式画布已经完成，接下来就可以去分析和应用了。这里按照文章开始时候给大家讲的三个用途，分别来讲：职业诊断、职业选择、职业规划。\n\n用途1.  职业诊断：\n\n用画布做诊断的核心是：发现九个要素中互相不匹配的情况。我列了几个常见的不匹配情形，每一个都通过举例来说明：\n\n情形1.1：关键业务跟核心资源不匹配。\n\n比如，你的核心资源是人脉广、喜欢挑战、善于沟通和掌握一些技术，现在某IT公司做售后技术支持，不用见客户。那么，这个关键业务显然并未发挥出你的优势。\n\n如果调整的话，比如可以调整到售前技术支持，既能充分利用本身的技术知识，又能发挥与人打交道的专长。\n\n情形1.2：价值服务跟客户群体不匹配。\n\n假设还是上面的例子，你现在转到了售前技术支持，归销售负责人管。那你的客户群体就从技术负责人变成了：外部客户和销售负责人。这时候，你的价值服务仍然只是：做好技术服务、让客户满意，那就会有问题。\n\n因为根据你的客户需求，你还需要为公司带来更多生意、把产品卖出去。所以你的价值服务需要调整，你需要思考，如何从技术角度来打动客户，并转化为购买行为。\n\n情形1.3：渠道通路与客户群体不匹配。\n\n比如，你打算跳槽去民企，却在Linkedin找机会、更新简历，效率也是不高的，因为Linkedin更多是外企。\n\n除了以上三个情形之外，其实还可能存在其它一些问题，比如合作伙伴与关键业务不匹配、客户关系与客户群体不匹配、收入和成本不对等，等等，这些都可以用类似的思路去分析。\n\n总而言之，画布中的九个要素之间都要相互匹配才行。如果存在脱节，那就意味着你的个人商业模式是有问题的，需要做出相应调整。\n\n另外，如果你想要提高收入，那就意味着你需要改变其它要素，或是客户群体、或是价值服务等等。\n\n用途2.  职业选择：\n\n做职业选择的时候，画布也是一个很好的工具。比如，你有两个工作选择，那么可以画两个画布出来，然后对比两张画布：\n\n第一，对比两个选择的成本和收入；\n\n第二，对比两个选择，哪个更能利用你的核心资源，让你扬长避短。这个比较容易理解，我就不举例子了。\n\n用途3.  职业规划：\n\n如果你按照上面的思路进行了现状盘点之后，找出了问题所在，那么你接下来开始调整这些有问题的要素、形成新的画布，其实就是规划的过程啦。\n\n另外，倘若你已经有了一个职业目标，那么你把目标的画布做出来后，也很容易发现自己哪些要素上还有欠缺、知道自己应该朝什么方向努力（比如找哪些合作伙伴、通过什么渠道通路等等），都将是水到渠成的事。\n\n最后需要说明的是，我们可以定期做这样的画布分析，就如同企业定期制定及回顾战略一样。\n\n另外，若出现以下情况，你也需要重新调整画布，对未来重新规划：\n\n1.外界环境变化；\n\n2.工作出现调整，包括升职、跳槽、转行等；\n\n3.核心资源发生变化，比如能力、技能等有明显提升。\n\n好了，更多关于这个工具的应用，大家可以在实践中慢慢发现。刚好周末有空，来做个盘点吧！\n**关注一下；你就知道**\n![关注一下；你就知道][3]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/hb.png\n  [2]: http://od3jhy35s.bkt.clouddn.com/bsmx.png\n  [3]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","source":"_posts/xiupi酱/作为个人，你的商业模式有没有问题.md","raw":"title: 作为个人，你的商业模式有没有问题\ndate: 2016-09-07 04:14:49\nauthor: xiupi酱\ncategories: xiupi酱\ntags: [创业, 个人,商业模式]\n---\n## 简介\n今天，介绍一个规划工具——个人商业模式画布，这是我自己用过并非常推荐的工具。为什么推荐呢？\n\n第一，它是从企业商业模式中演变而来，因此，借助它，有利于我们拔高思维高度，去思考策略层面的事情，而不是长久陷在执行层，拘泥于“我到底选哪份工作”、“我能涨多少工资”。\n\n当然，不是说这些不重要，只是我们太久困于这些问题，需要偶尔从这些问题中抽离出来，看得更高更远一些。\n\n第二，这个画布不仅仅是规划工具，还可以作为诊断工具来使用，可以诊断你当前的职业状态，从而为后期的规划奠定基础。\n\n我曾经说过，很多人在面临职业困境时，都只是在困扰，但从未思考，而这个工具能够帮助你真正思考，至少可以辅助你进行如下思考：\n\n1.当前的职业状态有没有问题；\n2.如何进行职业选择；\n3.如何规划职业甚至人生。\n## 使用\n\n我分两步来介绍这个工具的使用：第一，填写画布；第二，分析画布。\n#一 、如何填写画布  \n个人商业模式画布一共有九个要素，我将每个要素都标了序号，这个序号也代表你在填画布时候的思考和填写顺序。![画布][1]\n\n#要素1. 核心资源：我是谁，我有什么。\n\n这部分其实可以用以前文章讲过的冰山模型来概括。\n![冰山模型][2]\n我是谁，主要包括性格、价值观；\n\n我有什么，主要包括兴趣、知识、技能、能力。\n\n总之，在核心资源这个框内，尽可能把你有的要素都列出来。这些要素必须能够描述你这个人，能够把你与他人区分开来。\n\n在总结自身资源的时候，你会发现性格与价值观属于内心最深层的一面，它们是需要你不断自我反思，甚至是在发生一些冲突的时候，你才真正体会到。\n## 总结\n但对于兴趣、知识、技能、能力这些，我们在盘点它们的时候，其实是有一定技巧的。此前很多圈柚问过我这方面的问题，刚好借此机会给大家总结一下。\n\n1.1 兴趣：\n\n寻找兴趣，推荐三个方法：多尝试、多总结、做测评。\n\nA. 多尝试。这个无需多说，因为不去尝试，怎么会知道自己喜欢什么呢？很多事情，如果只是听说，往往容易产生一面之词。\n\nB. 多总结。世界上有成百上千个行业与职业，你不可能都去尝试。所以，你需要举一反三地总结，问自己一些深层次的问题。\n\n比如，你不喜欢销售这个工作，这只是浅层现象，你需要问自己：为什么不喜欢销售，不喜欢它哪方面，是讨厌应酬还是对自己产品没信心？是不喜欢这个行业的人么？这个工作有没有哪方面是你相对喜欢的？\n\n只有这样问自己，你才会更快地知道自己的兴趣。举例来说，因为讨厌应酬，所以你不喜欢销售，那下份工作就不是“非销售”这么简单，而是要去找不太需要应酬的工作。\n\n所以，如果你能够将之前做过的工作、甚至业余爱好，都按它的内容构成来做个剖析和总结的话，那就不需要把所有工作都尝试一遍，才知道答案。\n\nC. 做测评。测评工具有很多，比如霍兰德、职业锚等等，这些都是职业兴趣类的测试。当你没有太多工作经验的时候，测评是个辅助工具。\n\n但任何测评，它的实质都是分类和贴标签。所以测评只做参考，还是要以多尝试和举一反三的总结为主。\n\n另外，测评工具的选择也很重要，网上会有很多信效度非常差、完全没有经过验证的测评，比如看几张图就下结论的那种，误导你的可能性极大，只会让你离真实的自我越来越远。\n\n另外，关于兴趣，虽然多次提过，但是仍然还要再强调一下：享受不是兴趣！愿意付出才是兴趣！只接触皮毛不要谈兴趣！兴趣跟擅长有关！实在找不到兴趣点，就先做好眼前的事，不要陷在纠结的无底洞里。\n\n我为什么这么说，看这篇历史文章我有3招，让你不再越规划越迷茫\n\n1.2 知识\n\n知识很容易盘点，因为是在冰山的最上面，你学的专业、考过的证、看过的书，都可以算在知识里面。\n\n1.3 技能\n\n这里要盘点的是：你会什么本领、掌握多少语言、能用什么工具……不仅包括工作中的，也包括你擅长的业余爱好。\n\n为什么要包括业余爱好呢？因为我们曾经提过，有时候业余爱好跟本职工作结合起来，可能会帮助你发现一些跨领域的新机会。\n\n1.4 能力\n\n区别于主要适用某个领域的技能（比如编程），能力更多是指通用能力（比如沟通），盘点能力的方法跟兴趣类似，也是三个方式：\n\n多尝试：能力需要通过行为来发现，所以你做了事情，才能发现和锻炼自己的能力；\n\n多总结：哪些能力你比一般人强，而哪些能力比一般人弱，它们属于可培养的能力还是天生的能力；\n\n做测评：认知方面的能力可以通过测评，但是其它方面，较少有相应的工具。\n\n关于能力的总结，也可以用他人反馈，因为有时候你觉得自己某些能力很强，但别人未必这么认为，所以可以寻求身边同事和朋友的反馈。\n\n具体来说，可以在网上搜索能力词典，找到能力的清单。你可以从中挑选出自认为不错的能力项，并让身边同事朋友也帮你挑选，对比分析之后，发现你的能力优劣势。\n\n要素2. 关键业务：我要做什么。\n\n如果你有职业目标，比如你想做HR，那就把HR的主要工作任务写在这里；如果你暂无职业目标，那就写当前的工作现状，想想你日常工作中主要做什么。\n\n其实，我个人推荐现在和目标两个版本都写，后面分析的时候告诉大家原因。但是这里有几个注意点：\n\n2.1 如果你写的是目标，建议目标不要离你太远。\n\n因为太远的目标（比如你刚毕业，目标是十年后创业），你可能根本不知道如何着手，且过于遥远的目标，中途发生变化的可能性极大。所以，建议写未来三年内的目标即可。\n\n但如果你确实有一个远期目标或者理想，那也可以从目标往回推，先确定三年内的目标，写在这张画布上。\n\n这跟企业战略规划的道理是一样的，你很少看到企业现在还会做十年战略规划的。\n\n2.2 业务罗列不要太细，两三个重要提炼就可以。\n\n比如做咨询，关键业务就三点，第一，洽谈项目，第二，管理项目进度、预算和质量，第三，管理团队。这也是锻炼你结构化思维的一种方式，即：把你琐碎的工作事件归纳成为几个大的工作任务。\n\n2.3 无论目标还是现状，都要与画布的其它要素保持统一。\n\n我们后面会谈到的要素，比如客户群体、价值服务等等，都是以这个关键业务为基础的。\n\n所以，如果你在关键业务里面写了两个版本：现状和目标，那就意味着，其它要素也是写两个版本，这样才能对应起来，不应该出现：“关键业务”写的是目标，后面“客户群体”又写成了现状。\n\n要素3. 客户群体：我能帮助谁。\n\n这里包括企业内部和外部的人，即需要依赖你完成工作的人。企业内部的比如老板，以及你所支持的部门/岗位，外部的比如客户。\n\n对于一个企业来说，它的客户比较容易定义，就是为它付费的外部用户。\n\n但对于个人来说，你的客户构成略微有些复杂，因为决定你薪酬的对象可能有多个，首先老板毋庸置疑，其次，如果你的岗位是对客户的，那客户是否满意、是否买你们的产品等等，也决定了你的薪酬。所以都要包含在内。\n\n要素4. 价值服务：你为客户群体提供的价值是什么。\n\n打个比方：我们买苹果手机，是因为手机好，然后可能还有一点逼格，而买锤子手机呢，更多可能是冲着情怀。所以作为个人来讲，你也要有自己的价值定位。\n\n需要注意的是，价值服务与前面的关键业务是不同的。还是做咨询的例子，拿项目、管项目、带团队，这些是我的关键业务，也即我具体做的事情。\n\n而我的价值服务则是：帮助企业升级管理体系、提高组织效率、从而帮我的公司赚取更多收入。\n\n所以，价值服务更多的是结果和影响，而不是具体的任务。\n\n要素5. 渠道通路：怎样宣传自己、交付服务\n\n经过前面几步，你盘点了核心资源、找到了你的客户、并通过关键业务奠定了你的价值服务基础。\n\n那么，接下来的问题就是：如何向客户传递价值。也就是第五个要素：渠道通路，它包括如何宣传价值、卖出服务以及递交服务。\n\n还是苹果手机的例子：它怎么宣传自己的价值？开发布会、做媒体广告等。怎么卖出去呢？通过苹果专卖店和跟运营商合作等。怎么传递服务呢？通过苹果专卖店或者维修代理商等。\n\n再比如我做咨询的例子：对于外部客户，我的价值是：帮他们提升管理水平和组织效率。\n\n那如何宣传这个价值呢，比如参加一些行业协会、写POV文章等等。如何卖出服务呢，跟客户面对面交流，介绍曾经服务过的XX企业案例，以及对现客户企业存在的问题是怎么看的等等。\n\n要素6. 客户关系：怎样和对方打交道\n\n你如何跟客户打交道、处理好跟客户的关系，也十分重要。比如销售人员通过跟客户一起吃饭、打球等等，建立关系；很多互联网公司，通过社群来建立跟用户的联系。\n\n要素7. 重要合作：谁可以帮我\n\n你通常不会是靠单打独斗的。公司内部比如经常合作的部门，还有帮你提供资源的朋友，甚至一些公司会为员工配职业导师等，这些都属于重要合作对象。\n\n要素8. 收入来源：你在这份职业中获得的收获。\n\n这里的收入是广义的概念，包括物质回报和非物质回报。其中物质回报包括薪酬、福利、股权期权等；非物质回报则包括环境氛围、发展机会、成就感、满足感等等。\n\n要素9. 成本结构：你为这份职业需要付出什么。\n\n这里的付出包括时间、精力、金钱，甚至你的压力。\n\n从这九个要素当中，你会发现，个人跟企业的商业模式画布其实有区别的：对企业来说，成本和收入更多是财务上的；但对个人来说，你还需要考虑工作是不是开心，有没有发展等等。\n\n\n 二、 如何分析画布：画布的三大用途  \n\n\n至此，你的个人商业模式画布已经完成，接下来就可以去分析和应用了。这里按照文章开始时候给大家讲的三个用途，分别来讲：职业诊断、职业选择、职业规划。\n\n用途1.  职业诊断：\n\n用画布做诊断的核心是：发现九个要素中互相不匹配的情况。我列了几个常见的不匹配情形，每一个都通过举例来说明：\n\n情形1.1：关键业务跟核心资源不匹配。\n\n比如，你的核心资源是人脉广、喜欢挑战、善于沟通和掌握一些技术，现在某IT公司做售后技术支持，不用见客户。那么，这个关键业务显然并未发挥出你的优势。\n\n如果调整的话，比如可以调整到售前技术支持，既能充分利用本身的技术知识，又能发挥与人打交道的专长。\n\n情形1.2：价值服务跟客户群体不匹配。\n\n假设还是上面的例子，你现在转到了售前技术支持，归销售负责人管。那你的客户群体就从技术负责人变成了：外部客户和销售负责人。这时候，你的价值服务仍然只是：做好技术服务、让客户满意，那就会有问题。\n\n因为根据你的客户需求，你还需要为公司带来更多生意、把产品卖出去。所以你的价值服务需要调整，你需要思考，如何从技术角度来打动客户，并转化为购买行为。\n\n情形1.3：渠道通路与客户群体不匹配。\n\n比如，你打算跳槽去民企，却在Linkedin找机会、更新简历，效率也是不高的，因为Linkedin更多是外企。\n\n除了以上三个情形之外，其实还可能存在其它一些问题，比如合作伙伴与关键业务不匹配、客户关系与客户群体不匹配、收入和成本不对等，等等，这些都可以用类似的思路去分析。\n\n总而言之，画布中的九个要素之间都要相互匹配才行。如果存在脱节，那就意味着你的个人商业模式是有问题的，需要做出相应调整。\n\n另外，如果你想要提高收入，那就意味着你需要改变其它要素，或是客户群体、或是价值服务等等。\n\n用途2.  职业选择：\n\n做职业选择的时候，画布也是一个很好的工具。比如，你有两个工作选择，那么可以画两个画布出来，然后对比两张画布：\n\n第一，对比两个选择的成本和收入；\n\n第二，对比两个选择，哪个更能利用你的核心资源，让你扬长避短。这个比较容易理解，我就不举例子了。\n\n用途3.  职业规划：\n\n如果你按照上面的思路进行了现状盘点之后，找出了问题所在，那么你接下来开始调整这些有问题的要素、形成新的画布，其实就是规划的过程啦。\n\n另外，倘若你已经有了一个职业目标，那么你把目标的画布做出来后，也很容易发现自己哪些要素上还有欠缺、知道自己应该朝什么方向努力（比如找哪些合作伙伴、通过什么渠道通路等等），都将是水到渠成的事。\n\n最后需要说明的是，我们可以定期做这样的画布分析，就如同企业定期制定及回顾战略一样。\n\n另外，若出现以下情况，你也需要重新调整画布，对未来重新规划：\n\n1.外界环境变化；\n\n2.工作出现调整，包括升职、跳槽、转行等；\n\n3.核心资源发生变化，比如能力、技能等有明显提升。\n\n好了，更多关于这个工具的应用，大家可以在实践中慢慢发现。刚好周末有空，来做个盘点吧！\n**关注一下；你就知道**\n![关注一下；你就知道][3]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/hb.png\n  [2]: http://od3jhy35s.bkt.clouddn.com/bsmx.png\n  [3]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","slug":"xiupi酱/作为个人，你的商业模式有没有问题","published":1,"updated":"2016-09-06T20:44:15.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vp60003lsvfsloksm3z","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>今天，介绍一个规划工具——个人商业模式画布，这是我自己用过并非常推荐的工具。为什么推荐呢？</p>\n<p>第一，它是从企业商业模式中演变而来，因此，借助它，有利于我们拔高思维高度，去思考策略层面的事情，而不是长久陷在执行层，拘泥于“我到底选哪份工作”、“我能涨多少工资”。</p>\n<p>当然，不是说这些不重要，只是我们太久困于这些问题，需要偶尔从这些问题中抽离出来，看得更高更远一些。</p>\n<p>第二，这个画布不仅仅是规划工具，还可以作为诊断工具来使用，可以诊断你当前的职业状态，从而为后期的规划奠定基础。</p>\n<p>我曾经说过，很多人在面临职业困境时，都只是在困扰，但从未思考，而这个工具能够帮助你真正思考，至少可以辅助你进行如下思考：</p>\n<p>1.当前的职业状态有没有问题；<br>2.如何进行职业选择；<br>3.如何规划职业甚至人生。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我分两步来介绍这个工具的使用：第一，填写画布；第二，分析画布。</p>\n<p>#一 、如何填写画布<br>个人商业模式画布一共有九个要素，我将每个要素都标了序号，这个序号也代表你在填画布时候的思考和填写顺序。<img src=\"http://od3jhy35s.bkt.clouddn.com/hb.png\" alt=\"画布\"></p>\n<p>#要素1. 核心资源：我是谁，我有什么。</p>\n<p>这部分其实可以用以前文章讲过的冰山模型来概括。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/bsmx.png\" alt=\"冰山模型\"><br>我是谁，主要包括性格、价值观；</p>\n<p>我有什么，主要包括兴趣、知识、技能、能力。</p>\n<p>总之，在核心资源这个框内，尽可能把你有的要素都列出来。这些要素必须能够描述你这个人，能够把你与他人区分开来。</p>\n<p>在总结自身资源的时候，你会发现性格与价值观属于内心最深层的一面，它们是需要你不断自我反思，甚至是在发生一些冲突的时候，你才真正体会到。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>但对于兴趣、知识、技能、能力这些，我们在盘点它们的时候，其实是有一定技巧的。此前很多圈柚问过我这方面的问题，刚好借此机会给大家总结一下。</p>\n<p>1.1 兴趣：</p>\n<p>寻找兴趣，推荐三个方法：多尝试、多总结、做测评。</p>\n<p>A. 多尝试。这个无需多说，因为不去尝试，怎么会知道自己喜欢什么呢？很多事情，如果只是听说，往往容易产生一面之词。</p>\n<p>B. 多总结。世界上有成百上千个行业与职业，你不可能都去尝试。所以，你需要举一反三地总结，问自己一些深层次的问题。</p>\n<p>比如，你不喜欢销售这个工作，这只是浅层现象，你需要问自己：为什么不喜欢销售，不喜欢它哪方面，是讨厌应酬还是对自己产品没信心？是不喜欢这个行业的人么？这个工作有没有哪方面是你相对喜欢的？</p>\n<p>只有这样问自己，你才会更快地知道自己的兴趣。举例来说，因为讨厌应酬，所以你不喜欢销售，那下份工作就不是“非销售”这么简单，而是要去找不太需要应酬的工作。</p>\n<p>所以，如果你能够将之前做过的工作、甚至业余爱好，都按它的内容构成来做个剖析和总结的话，那就不需要把所有工作都尝试一遍，才知道答案。</p>\n<p>C. 做测评。测评工具有很多，比如霍兰德、职业锚等等，这些都是职业兴趣类的测试。当你没有太多工作经验的时候，测评是个辅助工具。</p>\n<p>但任何测评，它的实质都是分类和贴标签。所以测评只做参考，还是要以多尝试和举一反三的总结为主。</p>\n<p>另外，测评工具的选择也很重要，网上会有很多信效度非常差、完全没有经过验证的测评，比如看几张图就下结论的那种，误导你的可能性极大，只会让你离真实的自我越来越远。</p>\n<p>另外，关于兴趣，虽然多次提过，但是仍然还要再强调一下：享受不是兴趣！愿意付出才是兴趣！只接触皮毛不要谈兴趣！兴趣跟擅长有关！实在找不到兴趣点，就先做好眼前的事，不要陷在纠结的无底洞里。</p>\n<p>我为什么这么说，看这篇历史文章我有3招，让你不再越规划越迷茫</p>\n<p>1.2 知识</p>\n<p>知识很容易盘点，因为是在冰山的最上面，你学的专业、考过的证、看过的书，都可以算在知识里面。</p>\n<p>1.3 技能</p>\n<p>这里要盘点的是：你会什么本领、掌握多少语言、能用什么工具……不仅包括工作中的，也包括你擅长的业余爱好。</p>\n<p>为什么要包括业余爱好呢？因为我们曾经提过，有时候业余爱好跟本职工作结合起来，可能会帮助你发现一些跨领域的新机会。</p>\n<p>1.4 能力</p>\n<p>区别于主要适用某个领域的技能（比如编程），能力更多是指通用能力（比如沟通），盘点能力的方法跟兴趣类似，也是三个方式：</p>\n<p>多尝试：能力需要通过行为来发现，所以你做了事情，才能发现和锻炼自己的能力；</p>\n<p>多总结：哪些能力你比一般人强，而哪些能力比一般人弱，它们属于可培养的能力还是天生的能力；</p>\n<p>做测评：认知方面的能力可以通过测评，但是其它方面，较少有相应的工具。</p>\n<p>关于能力的总结，也可以用他人反馈，因为有时候你觉得自己某些能力很强，但别人未必这么认为，所以可以寻求身边同事和朋友的反馈。</p>\n<p>具体来说，可以在网上搜索能力词典，找到能力的清单。你可以从中挑选出自认为不错的能力项，并让身边同事朋友也帮你挑选，对比分析之后，发现你的能力优劣势。</p>\n<p>要素2. 关键业务：我要做什么。</p>\n<p>如果你有职业目标，比如你想做HR，那就把HR的主要工作任务写在这里；如果你暂无职业目标，那就写当前的工作现状，想想你日常工作中主要做什么。</p>\n<p>其实，我个人推荐现在和目标两个版本都写，后面分析的时候告诉大家原因。但是这里有几个注意点：</p>\n<p>2.1 如果你写的是目标，建议目标不要离你太远。</p>\n<p>因为太远的目标（比如你刚毕业，目标是十年后创业），你可能根本不知道如何着手，且过于遥远的目标，中途发生变化的可能性极大。所以，建议写未来三年内的目标即可。</p>\n<p>但如果你确实有一个远期目标或者理想，那也可以从目标往回推，先确定三年内的目标，写在这张画布上。</p>\n<p>这跟企业战略规划的道理是一样的，你很少看到企业现在还会做十年战略规划的。</p>\n<p>2.2 业务罗列不要太细，两三个重要提炼就可以。</p>\n<p>比如做咨询，关键业务就三点，第一，洽谈项目，第二，管理项目进度、预算和质量，第三，管理团队。这也是锻炼你结构化思维的一种方式，即：把你琐碎的工作事件归纳成为几个大的工作任务。</p>\n<p>2.3 无论目标还是现状，都要与画布的其它要素保持统一。</p>\n<p>我们后面会谈到的要素，比如客户群体、价值服务等等，都是以这个关键业务为基础的。</p>\n<p>所以，如果你在关键业务里面写了两个版本：现状和目标，那就意味着，其它要素也是写两个版本，这样才能对应起来，不应该出现：“关键业务”写的是目标，后面“客户群体”又写成了现状。</p>\n<p>要素3. 客户群体：我能帮助谁。</p>\n<p>这里包括企业内部和外部的人，即需要依赖你完成工作的人。企业内部的比如老板，以及你所支持的部门/岗位，外部的比如客户。</p>\n<p>对于一个企业来说，它的客户比较容易定义，就是为它付费的外部用户。</p>\n<p>但对于个人来说，你的客户构成略微有些复杂，因为决定你薪酬的对象可能有多个，首先老板毋庸置疑，其次，如果你的岗位是对客户的，那客户是否满意、是否买你们的产品等等，也决定了你的薪酬。所以都要包含在内。</p>\n<p>要素4. 价值服务：你为客户群体提供的价值是什么。</p>\n<p>打个比方：我们买苹果手机，是因为手机好，然后可能还有一点逼格，而买锤子手机呢，更多可能是冲着情怀。所以作为个人来讲，你也要有自己的价值定位。</p>\n<p>需要注意的是，价值服务与前面的关键业务是不同的。还是做咨询的例子，拿项目、管项目、带团队，这些是我的关键业务，也即我具体做的事情。</p>\n<p>而我的价值服务则是：帮助企业升级管理体系、提高组织效率、从而帮我的公司赚取更多收入。</p>\n<p>所以，价值服务更多的是结果和影响，而不是具体的任务。</p>\n<p>要素5. 渠道通路：怎样宣传自己、交付服务</p>\n<p>经过前面几步，你盘点了核心资源、找到了你的客户、并通过关键业务奠定了你的价值服务基础。</p>\n<p>那么，接下来的问题就是：如何向客户传递价值。也就是第五个要素：渠道通路，它包括如何宣传价值、卖出服务以及递交服务。</p>\n<p>还是苹果手机的例子：它怎么宣传自己的价值？开发布会、做媒体广告等。怎么卖出去呢？通过苹果专卖店和跟运营商合作等。怎么传递服务呢？通过苹果专卖店或者维修代理商等。</p>\n<p>再比如我做咨询的例子：对于外部客户，我的价值是：帮他们提升管理水平和组织效率。</p>\n<p>那如何宣传这个价值呢，比如参加一些行业协会、写POV文章等等。如何卖出服务呢，跟客户面对面交流，介绍曾经服务过的XX企业案例，以及对现客户企业存在的问题是怎么看的等等。</p>\n<p>要素6. 客户关系：怎样和对方打交道</p>\n<p>你如何跟客户打交道、处理好跟客户的关系，也十分重要。比如销售人员通过跟客户一起吃饭、打球等等，建立关系；很多互联网公司，通过社群来建立跟用户的联系。</p>\n<p>要素7. 重要合作：谁可以帮我</p>\n<p>你通常不会是靠单打独斗的。公司内部比如经常合作的部门，还有帮你提供资源的朋友，甚至一些公司会为员工配职业导师等，这些都属于重要合作对象。</p>\n<p>要素8. 收入来源：你在这份职业中获得的收获。</p>\n<p>这里的收入是广义的概念，包括物质回报和非物质回报。其中物质回报包括薪酬、福利、股权期权等；非物质回报则包括环境氛围、发展机会、成就感、满足感等等。</p>\n<p>要素9. 成本结构：你为这份职业需要付出什么。</p>\n<p>这里的付出包括时间、精力、金钱，甚至你的压力。</p>\n<p>从这九个要素当中，你会发现，个人跟企业的商业模式画布其实有区别的：对企业来说，成本和收入更多是财务上的；但对个人来说，你还需要考虑工作是不是开心，有没有发展等等。</p>\n<p> 二、 如何分析画布：画布的三大用途  </p>\n<p>至此，你的个人商业模式画布已经完成，接下来就可以去分析和应用了。这里按照文章开始时候给大家讲的三个用途，分别来讲：职业诊断、职业选择、职业规划。</p>\n<p>用途1.  职业诊断：</p>\n<p>用画布做诊断的核心是：发现九个要素中互相不匹配的情况。我列了几个常见的不匹配情形，每一个都通过举例来说明：</p>\n<p>情形1.1：关键业务跟核心资源不匹配。</p>\n<p>比如，你的核心资源是人脉广、喜欢挑战、善于沟通和掌握一些技术，现在某IT公司做售后技术支持，不用见客户。那么，这个关键业务显然并未发挥出你的优势。</p>\n<p>如果调整的话，比如可以调整到售前技术支持，既能充分利用本身的技术知识，又能发挥与人打交道的专长。</p>\n<p>情形1.2：价值服务跟客户群体不匹配。</p>\n<p>假设还是上面的例子，你现在转到了售前技术支持，归销售负责人管。那你的客户群体就从技术负责人变成了：外部客户和销售负责人。这时候，你的价值服务仍然只是：做好技术服务、让客户满意，那就会有问题。</p>\n<p>因为根据你的客户需求，你还需要为公司带来更多生意、把产品卖出去。所以你的价值服务需要调整，你需要思考，如何从技术角度来打动客户，并转化为购买行为。</p>\n<p>情形1.3：渠道通路与客户群体不匹配。</p>\n<p>比如，你打算跳槽去民企，却在Linkedin找机会、更新简历，效率也是不高的，因为Linkedin更多是外企。</p>\n<p>除了以上三个情形之外，其实还可能存在其它一些问题，比如合作伙伴与关键业务不匹配、客户关系与客户群体不匹配、收入和成本不对等，等等，这些都可以用类似的思路去分析。</p>\n<p>总而言之，画布中的九个要素之间都要相互匹配才行。如果存在脱节，那就意味着你的个人商业模式是有问题的，需要做出相应调整。</p>\n<p>另外，如果你想要提高收入，那就意味着你需要改变其它要素，或是客户群体、或是价值服务等等。</p>\n<p>用途2.  职业选择：</p>\n<p>做职业选择的时候，画布也是一个很好的工具。比如，你有两个工作选择，那么可以画两个画布出来，然后对比两张画布：</p>\n<p>第一，对比两个选择的成本和收入；</p>\n<p>第二，对比两个选择，哪个更能利用你的核心资源，让你扬长避短。这个比较容易理解，我就不举例子了。</p>\n<p>用途3.  职业规划：</p>\n<p>如果你按照上面的思路进行了现状盘点之后，找出了问题所在，那么你接下来开始调整这些有问题的要素、形成新的画布，其实就是规划的过程啦。</p>\n<p>另外，倘若你已经有了一个职业目标，那么你把目标的画布做出来后，也很容易发现自己哪些要素上还有欠缺、知道自己应该朝什么方向努力（比如找哪些合作伙伴、通过什么渠道通路等等），都将是水到渠成的事。</p>\n<p>最后需要说明的是，我们可以定期做这样的画布分析，就如同企业定期制定及回顾战略一样。</p>\n<p>另外，若出现以下情况，你也需要重新调整画布，对未来重新规划：</p>\n<p>1.外界环境变化；</p>\n<p>2.工作出现调整，包括升职、跳槽、转行等；</p>\n<p>3.核心资源发生变化，比如能力、技能等有明显提升。</p>\n<p>好了，更多关于这个工具的应用，大家可以在实践中慢慢发现。刚好周末有空，来做个盘点吧！<br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>今天，介绍一个规划工具——个人商业模式画布，这是我自己用过并非常推荐的工具。为什么推荐呢？</p>\n<p>第一，它是从企业商业模式中演变而来，因此，借助它，有利于我们拔高思维高度，去思考策略层面的事情，而不是长久陷在执行层，拘泥于“我到底选哪份工作”、“我能涨多少工资”。</p>\n<p>当然，不是说这些不重要，只是我们太久困于这些问题，需要偶尔从这些问题中抽离出来，看得更高更远一些。</p>\n<p>第二，这个画布不仅仅是规划工具，还可以作为诊断工具来使用，可以诊断你当前的职业状态，从而为后期的规划奠定基础。</p>\n<p>我曾经说过，很多人在面临职业困境时，都只是在困扰，但从未思考，而这个工具能够帮助你真正思考，至少可以辅助你进行如下思考：</p>\n<p>1.当前的职业状态有没有问题；<br>2.如何进行职业选择；<br>3.如何规划职业甚至人生。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>我分两步来介绍这个工具的使用：第一，填写画布；第二，分析画布。</p>\n<p>#一 、如何填写画布<br>个人商业模式画布一共有九个要素，我将每个要素都标了序号，这个序号也代表你在填画布时候的思考和填写顺序。<img src=\"http://od3jhy35s.bkt.clouddn.com/hb.png\" alt=\"画布\"></p>\n<p>#要素1. 核心资源：我是谁，我有什么。</p>\n<p>这部分其实可以用以前文章讲过的冰山模型来概括。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/bsmx.png\" alt=\"冰山模型\"><br>我是谁，主要包括性格、价值观；</p>\n<p>我有什么，主要包括兴趣、知识、技能、能力。</p>\n<p>总之，在核心资源这个框内，尽可能把你有的要素都列出来。这些要素必须能够描述你这个人，能够把你与他人区分开来。</p>\n<p>在总结自身资源的时候，你会发现性格与价值观属于内心最深层的一面，它们是需要你不断自我反思，甚至是在发生一些冲突的时候，你才真正体会到。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>但对于兴趣、知识、技能、能力这些，我们在盘点它们的时候，其实是有一定技巧的。此前很多圈柚问过我这方面的问题，刚好借此机会给大家总结一下。</p>\n<p>1.1 兴趣：</p>\n<p>寻找兴趣，推荐三个方法：多尝试、多总结、做测评。</p>\n<p>A. 多尝试。这个无需多说，因为不去尝试，怎么会知道自己喜欢什么呢？很多事情，如果只是听说，往往容易产生一面之词。</p>\n<p>B. 多总结。世界上有成百上千个行业与职业，你不可能都去尝试。所以，你需要举一反三地总结，问自己一些深层次的问题。</p>\n<p>比如，你不喜欢销售这个工作，这只是浅层现象，你需要问自己：为什么不喜欢销售，不喜欢它哪方面，是讨厌应酬还是对自己产品没信心？是不喜欢这个行业的人么？这个工作有没有哪方面是你相对喜欢的？</p>\n<p>只有这样问自己，你才会更快地知道自己的兴趣。举例来说，因为讨厌应酬，所以你不喜欢销售，那下份工作就不是“非销售”这么简单，而是要去找不太需要应酬的工作。</p>\n<p>所以，如果你能够将之前做过的工作、甚至业余爱好，都按它的内容构成来做个剖析和总结的话，那就不需要把所有工作都尝试一遍，才知道答案。</p>\n<p>C. 做测评。测评工具有很多，比如霍兰德、职业锚等等，这些都是职业兴趣类的测试。当你没有太多工作经验的时候，测评是个辅助工具。</p>\n<p>但任何测评，它的实质都是分类和贴标签。所以测评只做参考，还是要以多尝试和举一反三的总结为主。</p>\n<p>另外，测评工具的选择也很重要，网上会有很多信效度非常差、完全没有经过验证的测评，比如看几张图就下结论的那种，误导你的可能性极大，只会让你离真实的自我越来越远。</p>\n<p>另外，关于兴趣，虽然多次提过，但是仍然还要再强调一下：享受不是兴趣！愿意付出才是兴趣！只接触皮毛不要谈兴趣！兴趣跟擅长有关！实在找不到兴趣点，就先做好眼前的事，不要陷在纠结的无底洞里。</p>\n<p>我为什么这么说，看这篇历史文章我有3招，让你不再越规划越迷茫</p>\n<p>1.2 知识</p>\n<p>知识很容易盘点，因为是在冰山的最上面，你学的专业、考过的证、看过的书，都可以算在知识里面。</p>\n<p>1.3 技能</p>\n<p>这里要盘点的是：你会什么本领、掌握多少语言、能用什么工具……不仅包括工作中的，也包括你擅长的业余爱好。</p>\n<p>为什么要包括业余爱好呢？因为我们曾经提过，有时候业余爱好跟本职工作结合起来，可能会帮助你发现一些跨领域的新机会。</p>\n<p>1.4 能力</p>\n<p>区别于主要适用某个领域的技能（比如编程），能力更多是指通用能力（比如沟通），盘点能力的方法跟兴趣类似，也是三个方式：</p>\n<p>多尝试：能力需要通过行为来发现，所以你做了事情，才能发现和锻炼自己的能力；</p>\n<p>多总结：哪些能力你比一般人强，而哪些能力比一般人弱，它们属于可培养的能力还是天生的能力；</p>\n<p>做测评：认知方面的能力可以通过测评，但是其它方面，较少有相应的工具。</p>\n<p>关于能力的总结，也可以用他人反馈，因为有时候你觉得自己某些能力很强，但别人未必这么认为，所以可以寻求身边同事和朋友的反馈。</p>\n<p>具体来说，可以在网上搜索能力词典，找到能力的清单。你可以从中挑选出自认为不错的能力项，并让身边同事朋友也帮你挑选，对比分析之后，发现你的能力优劣势。</p>\n<p>要素2. 关键业务：我要做什么。</p>\n<p>如果你有职业目标，比如你想做HR，那就把HR的主要工作任务写在这里；如果你暂无职业目标，那就写当前的工作现状，想想你日常工作中主要做什么。</p>\n<p>其实，我个人推荐现在和目标两个版本都写，后面分析的时候告诉大家原因。但是这里有几个注意点：</p>\n<p>2.1 如果你写的是目标，建议目标不要离你太远。</p>\n<p>因为太远的目标（比如你刚毕业，目标是十年后创业），你可能根本不知道如何着手，且过于遥远的目标，中途发生变化的可能性极大。所以，建议写未来三年内的目标即可。</p>\n<p>但如果你确实有一个远期目标或者理想，那也可以从目标往回推，先确定三年内的目标，写在这张画布上。</p>\n<p>这跟企业战略规划的道理是一样的，你很少看到企业现在还会做十年战略规划的。</p>\n<p>2.2 业务罗列不要太细，两三个重要提炼就可以。</p>\n<p>比如做咨询，关键业务就三点，第一，洽谈项目，第二，管理项目进度、预算和质量，第三，管理团队。这也是锻炼你结构化思维的一种方式，即：把你琐碎的工作事件归纳成为几个大的工作任务。</p>\n<p>2.3 无论目标还是现状，都要与画布的其它要素保持统一。</p>\n<p>我们后面会谈到的要素，比如客户群体、价值服务等等，都是以这个关键业务为基础的。</p>\n<p>所以，如果你在关键业务里面写了两个版本：现状和目标，那就意味着，其它要素也是写两个版本，这样才能对应起来，不应该出现：“关键业务”写的是目标，后面“客户群体”又写成了现状。</p>\n<p>要素3. 客户群体：我能帮助谁。</p>\n<p>这里包括企业内部和外部的人，即需要依赖你完成工作的人。企业内部的比如老板，以及你所支持的部门/岗位，外部的比如客户。</p>\n<p>对于一个企业来说，它的客户比较容易定义，就是为它付费的外部用户。</p>\n<p>但对于个人来说，你的客户构成略微有些复杂，因为决定你薪酬的对象可能有多个，首先老板毋庸置疑，其次，如果你的岗位是对客户的，那客户是否满意、是否买你们的产品等等，也决定了你的薪酬。所以都要包含在内。</p>\n<p>要素4. 价值服务：你为客户群体提供的价值是什么。</p>\n<p>打个比方：我们买苹果手机，是因为手机好，然后可能还有一点逼格，而买锤子手机呢，更多可能是冲着情怀。所以作为个人来讲，你也要有自己的价值定位。</p>\n<p>需要注意的是，价值服务与前面的关键业务是不同的。还是做咨询的例子，拿项目、管项目、带团队，这些是我的关键业务，也即我具体做的事情。</p>\n<p>而我的价值服务则是：帮助企业升级管理体系、提高组织效率、从而帮我的公司赚取更多收入。</p>\n<p>所以，价值服务更多的是结果和影响，而不是具体的任务。</p>\n<p>要素5. 渠道通路：怎样宣传自己、交付服务</p>\n<p>经过前面几步，你盘点了核心资源、找到了你的客户、并通过关键业务奠定了你的价值服务基础。</p>\n<p>那么，接下来的问题就是：如何向客户传递价值。也就是第五个要素：渠道通路，它包括如何宣传价值、卖出服务以及递交服务。</p>\n<p>还是苹果手机的例子：它怎么宣传自己的价值？开发布会、做媒体广告等。怎么卖出去呢？通过苹果专卖店和跟运营商合作等。怎么传递服务呢？通过苹果专卖店或者维修代理商等。</p>\n<p>再比如我做咨询的例子：对于外部客户，我的价值是：帮他们提升管理水平和组织效率。</p>\n<p>那如何宣传这个价值呢，比如参加一些行业协会、写POV文章等等。如何卖出服务呢，跟客户面对面交流，介绍曾经服务过的XX企业案例，以及对现客户企业存在的问题是怎么看的等等。</p>\n<p>要素6. 客户关系：怎样和对方打交道</p>\n<p>你如何跟客户打交道、处理好跟客户的关系，也十分重要。比如销售人员通过跟客户一起吃饭、打球等等，建立关系；很多互联网公司，通过社群来建立跟用户的联系。</p>\n<p>要素7. 重要合作：谁可以帮我</p>\n<p>你通常不会是靠单打独斗的。公司内部比如经常合作的部门，还有帮你提供资源的朋友，甚至一些公司会为员工配职业导师等，这些都属于重要合作对象。</p>\n<p>要素8. 收入来源：你在这份职业中获得的收获。</p>\n<p>这里的收入是广义的概念，包括物质回报和非物质回报。其中物质回报包括薪酬、福利、股权期权等；非物质回报则包括环境氛围、发展机会、成就感、满足感等等。</p>\n<p>要素9. 成本结构：你为这份职业需要付出什么。</p>\n<p>这里的付出包括时间、精力、金钱，甚至你的压力。</p>\n<p>从这九个要素当中，你会发现，个人跟企业的商业模式画布其实有区别的：对企业来说，成本和收入更多是财务上的；但对个人来说，你还需要考虑工作是不是开心，有没有发展等等。</p>\n<p> 二、 如何分析画布：画布的三大用途  </p>\n<p>至此，你的个人商业模式画布已经完成，接下来就可以去分析和应用了。这里按照文章开始时候给大家讲的三个用途，分别来讲：职业诊断、职业选择、职业规划。</p>\n<p>用途1.  职业诊断：</p>\n<p>用画布做诊断的核心是：发现九个要素中互相不匹配的情况。我列了几个常见的不匹配情形，每一个都通过举例来说明：</p>\n<p>情形1.1：关键业务跟核心资源不匹配。</p>\n<p>比如，你的核心资源是人脉广、喜欢挑战、善于沟通和掌握一些技术，现在某IT公司做售后技术支持，不用见客户。那么，这个关键业务显然并未发挥出你的优势。</p>\n<p>如果调整的话，比如可以调整到售前技术支持，既能充分利用本身的技术知识，又能发挥与人打交道的专长。</p>\n<p>情形1.2：价值服务跟客户群体不匹配。</p>\n<p>假设还是上面的例子，你现在转到了售前技术支持，归销售负责人管。那你的客户群体就从技术负责人变成了：外部客户和销售负责人。这时候，你的价值服务仍然只是：做好技术服务、让客户满意，那就会有问题。</p>\n<p>因为根据你的客户需求，你还需要为公司带来更多生意、把产品卖出去。所以你的价值服务需要调整，你需要思考，如何从技术角度来打动客户，并转化为购买行为。</p>\n<p>情形1.3：渠道通路与客户群体不匹配。</p>\n<p>比如，你打算跳槽去民企，却在Linkedin找机会、更新简历，效率也是不高的，因为Linkedin更多是外企。</p>\n<p>除了以上三个情形之外，其实还可能存在其它一些问题，比如合作伙伴与关键业务不匹配、客户关系与客户群体不匹配、收入和成本不对等，等等，这些都可以用类似的思路去分析。</p>\n<p>总而言之，画布中的九个要素之间都要相互匹配才行。如果存在脱节，那就意味着你的个人商业模式是有问题的，需要做出相应调整。</p>\n<p>另外，如果你想要提高收入，那就意味着你需要改变其它要素，或是客户群体、或是价值服务等等。</p>\n<p>用途2.  职业选择：</p>\n<p>做职业选择的时候，画布也是一个很好的工具。比如，你有两个工作选择，那么可以画两个画布出来，然后对比两张画布：</p>\n<p>第一，对比两个选择的成本和收入；</p>\n<p>第二，对比两个选择，哪个更能利用你的核心资源，让你扬长避短。这个比较容易理解，我就不举例子了。</p>\n<p>用途3.  职业规划：</p>\n<p>如果你按照上面的思路进行了现状盘点之后，找出了问题所在，那么你接下来开始调整这些有问题的要素、形成新的画布，其实就是规划的过程啦。</p>\n<p>另外，倘若你已经有了一个职业目标，那么你把目标的画布做出来后，也很容易发现自己哪些要素上还有欠缺、知道自己应该朝什么方向努力（比如找哪些合作伙伴、通过什么渠道通路等等），都将是水到渠成的事。</p>\n<p>最后需要说明的是，我们可以定期做这样的画布分析，就如同企业定期制定及回顾战略一样。</p>\n<p>另外，若出现以下情况，你也需要重新调整画布，对未来重新规划：</p>\n<p>1.外界环境变化；</p>\n<p>2.工作出现调整，包括升职、跳槽、转行等；</p>\n<p>3.核心资源发生变化，比如能力、技能等有明显提升。</p>\n<p>好了，更多关于这个工具的应用，大家可以在实践中慢慢发现。刚好周末有空，来做个盘点吧！<br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n"},{"title":"链家！下一场变革将在哪里发生？","date":"2016-09-06T19:31:45.000Z","author":"xiupi酱","_content":"## 认识链家\n\n链家的扩张：从37人发展成80000名经纪人。\n\n链家在全国已有8000余家门店，比大陆麦当劳与肯德基的总和都多。除了这个数字外，咱们对全国店面又有哪些了解呢？![肯德基][1]\n2001年，链家开出了第一家店，当时员工仅37人。链家官网显示，2002年6月链家就成为中国建设银行指定按揭代理机构。成立两年后，2003年9月成为\"中央在京单位已购公房上市出售定点交易\"代理服务机构。\n\n从最初单一的二手房买卖业务，到租售两全，2005年成立链家金融中心，2014年推出国内唯一的房屋资金担保支付平台“理房通”，14年时间，从“homelink链家地产”到“LIANJIA.链家”，链家正在朝着中介行业“巨无霸”的方向进发。![链家网][2]\n## 欢乐喜剧人\n其实在今年Q1时，链家网冠名的《欢乐喜剧人2》成为当季蝉联收视冠军的黑马，就曾采访了链家网CMO宋琦，当问到在这次成功押宝娱乐IP后链家是否还会继续去追热点时，当时她的回复也异常朴素和真实：“我们不会再在娱乐上耗费太多，还是会回到真房源。”\n## 链家真房源\n今年8月，链家果然信守承诺，出街了“链家真房源，一直在较真”的营销战役，TVC分为3支，以3个链家网员工的真实故事为原型，讲述了链家在真房源这件事上的较真和坚持。\n![链家][3]\n去年链家14周年庆的系列广告就曾用温情的方式，讲述了链家经纪人和客户之间的暖心故事。“素人+真实故事”似乎成为链家广告的标签，而此次“链家真房源，一直在较真”系列战役，以同样真实的叙事手法，把链家为什么能做到真房源背后的故事以及“较真”的决心，讲进了消费者的心里。\n\n据悉，系列视频在各大视频网站、朋友圈上线后，总播放量就已超过千万，很多网友留言说，“想不到链家还有这样的员工”、“真房源居然是一套套数出来的”、“刷新了对链家的认知”。\n#先用实际行动证明自己，再用真诚打动消费者\n## 宋琦说\n\n在宋琦看来，三个“较真”的故事之所以可以让来自于身边的朋友或者大众感动，最根本的原因就是因为这些故事是真的，链家网的品牌传播理念也一直是基于真实二字展开。 \n![真房源][4]\n早在多年前的中介行业中，图片虚假、价格虚假、甚至连地址都虚假的假房源是一种“潜规则”，不发布假房源则没有客源，整个行业陷在恶性循环中，丢失了人与人之间的基本信任。\n\n链家在真房源这件事上，有着壮士断腕般的决心。2011年，链家在线发布“真房源假一赔百”，成为国内首家在消协设立先行赔付保证金的房产中介，并于2012年承诺“全渠道真房源”，2013年以后链家网全国真房源率稳定在97%（“不真实的”主要集中在两类，一类是取消委托或在同业成交后，没有及时核销；一类是系统内基本信息录入错误）。\n\n#讲述真房源，要用最较真的创意\n\n虽然在事实上链家已算做到了全渠道真房源，但过去很长时间中大众对于国内房产中介的刻板印象和不信任又需要多长时间来重新洗白？\n\n在过去三年里，链家曾一直在讲述对真房源的承诺，“全渠道真房源，假一赔百”、“省心选房，上链家网”，此次，“一直在较真”的营销战役，则把链家怎么做到真房源以及坚持真房源的决心，说了个通透。![真房源][5]\n于是，在《记录房子的人》故事中，我们知道了原来链家网有个楼盘字典团队，他们的工作就是跑到各个城市数房子，把每个小区每套房都数清楚并录入系统，确保每套房源真实存在。而《拍摄房子的人》第一次向我们介绍了给房子拍照的摄影师这个新鲜的工种，他们拍照不追求美，而追求真实。《核查房子的人》中看似柔弱的姑娘，顶着压力在内部捍卫真房源原则的时候，也像极了在职场上每一个较真的你我。\n\n三个较真故事都有真实的员工原型，据说他们在广告片中的每个动作、每个道具、每句话、每个感悟，都经过无数次内部讨论核对以确保真实还原。讲述真房源，也要用较真的创意。\n\n链家在房源上较真的决心，也必须用最真诚的方式讲给消费者听。\n\n宋琦这样说：“当大家都认为真房源是理所应当的时候，我们的历史使命可能就完成了。”\n\n#“较真”只是第一步，建立在真房源基础上的大数据能做的还有很多\n![宋琦][6]\n宋琦：买房的痛点有太多，但真房源是解决所有痛点的第一步。链家一直想传递的是让买房卖房不再难的愿景，帮助用户提高决策和购房效率，不浪费时间的同时是不浪费更多的感情。以往房产中介的信息不对称导致用户的信赖度比较低，那么我们希望从一开始就和用户建立起基本的信任。\n\n宋琦：行业痛点有很多，同时它的每个痛点其实都非常难解决，但想要在这个行业中成为领导者，就必须随着时代的发展有所突破和创新，我们也希望可以在行业中制定一些标准。不仅是房产交易，在品牌营销当中是什么就说什么、做什么就讲什么，我们首先需要的就是一颗非常务实和实在的真心，不夸张不渲染，用诚意去打动消费者。\n\n宋琦：如果想在这个行业有所突破，肯定是随着时代的发展要有所突破和创新，我们没有细分链家到底是传统的还是互联网的，我们只是想给用户提供最好的、最优质的服务。对于未来的判断互联网将是用户找房选房买房的第一步，所以互联网是我们非常重要的一个战略部署，但我们更希望的是提供一个整合的闭环服务，从线上到线下用互联网的思维来重构整个交易的流程，使得房产交易更有效率也更加顺畅。\n## 未来房源展示\n\n当各行各业都在不同程度地被互联网解构的同时，我们很难定义那些原本扎根于传统领域的企业们在转身后的行业属性，要知道房产中介建立大数据平台并不是一件简单的事，但这也就决定了链家和其他中介、房产品牌的最大不同：对于这个传统的房产中介行业来说，用户并不需要了解链家网到底有多少数据，重要的是这些数据能够带来多少价值和意义。“数出来”的楼盘字典也只是链家大数据中的其中一部分，作为“真房源”的基本参照物而存在。我们同样期待在行业中链家可以在数据驱动的全价值链房产服务平台基础上建立起一套行业标准。![总部][7]\n![房源][8]\n![拍摄][9]\n**关注一下；你就知道**\n![关注一下；你就知道][10]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/kfc.jpg\n  [2]: http://od3jhy35s.bkt.clouddn.com/sljw.jpg\n  [3]: http://od3jhy35s.bkt.clouddn.com/lianjia.jpg\n  [4]: http://od3jhy35s.bkt.clouddn.com/lpcd.jpg\n  [5]: http://od3jhy35s.bkt.clouddn.com/dhhs.jpg\n  [6]: http://od3jhy35s.bkt.clouddn.com/sq.jpg\n  [7]: http://od3jhy35s.bkt.clouddn.com/fb.jpg\n  [8]: http://od3jhy35s.bkt.clouddn.com/fy.jpg\n  [9]: http://od3jhy35s.bkt.clouddn.com/paizhao.jpg\n  [10]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","source":"_posts/xiupi酱/链家！下一场变革将在哪里发生？.md","raw":"title: 链家！下一场变革将在哪里发生？\ndate: 2016-09-07 03:31:45\nauthor: xiupi酱\ncategories: xiupi酱\ntags: [链家, 玻璃投影]\n---\n## 认识链家\n\n链家的扩张：从37人发展成80000名经纪人。\n\n链家在全国已有8000余家门店，比大陆麦当劳与肯德基的总和都多。除了这个数字外，咱们对全国店面又有哪些了解呢？![肯德基][1]\n2001年，链家开出了第一家店，当时员工仅37人。链家官网显示，2002年6月链家就成为中国建设银行指定按揭代理机构。成立两年后，2003年9月成为\"中央在京单位已购公房上市出售定点交易\"代理服务机构。\n\n从最初单一的二手房买卖业务，到租售两全，2005年成立链家金融中心，2014年推出国内唯一的房屋资金担保支付平台“理房通”，14年时间，从“homelink链家地产”到“LIANJIA.链家”，链家正在朝着中介行业“巨无霸”的方向进发。![链家网][2]\n## 欢乐喜剧人\n其实在今年Q1时，链家网冠名的《欢乐喜剧人2》成为当季蝉联收视冠军的黑马，就曾采访了链家网CMO宋琦，当问到在这次成功押宝娱乐IP后链家是否还会继续去追热点时，当时她的回复也异常朴素和真实：“我们不会再在娱乐上耗费太多，还是会回到真房源。”\n## 链家真房源\n今年8月，链家果然信守承诺，出街了“链家真房源，一直在较真”的营销战役，TVC分为3支，以3个链家网员工的真实故事为原型，讲述了链家在真房源这件事上的较真和坚持。\n![链家][3]\n去年链家14周年庆的系列广告就曾用温情的方式，讲述了链家经纪人和客户之间的暖心故事。“素人+真实故事”似乎成为链家广告的标签，而此次“链家真房源，一直在较真”系列战役，以同样真实的叙事手法，把链家为什么能做到真房源背后的故事以及“较真”的决心，讲进了消费者的心里。\n\n据悉，系列视频在各大视频网站、朋友圈上线后，总播放量就已超过千万，很多网友留言说，“想不到链家还有这样的员工”、“真房源居然是一套套数出来的”、“刷新了对链家的认知”。\n#先用实际行动证明自己，再用真诚打动消费者\n## 宋琦说\n\n在宋琦看来，三个“较真”的故事之所以可以让来自于身边的朋友或者大众感动，最根本的原因就是因为这些故事是真的，链家网的品牌传播理念也一直是基于真实二字展开。 \n![真房源][4]\n早在多年前的中介行业中，图片虚假、价格虚假、甚至连地址都虚假的假房源是一种“潜规则”，不发布假房源则没有客源，整个行业陷在恶性循环中，丢失了人与人之间的基本信任。\n\n链家在真房源这件事上，有着壮士断腕般的决心。2011年，链家在线发布“真房源假一赔百”，成为国内首家在消协设立先行赔付保证金的房产中介，并于2012年承诺“全渠道真房源”，2013年以后链家网全国真房源率稳定在97%（“不真实的”主要集中在两类，一类是取消委托或在同业成交后，没有及时核销；一类是系统内基本信息录入错误）。\n\n#讲述真房源，要用最较真的创意\n\n虽然在事实上链家已算做到了全渠道真房源，但过去很长时间中大众对于国内房产中介的刻板印象和不信任又需要多长时间来重新洗白？\n\n在过去三年里，链家曾一直在讲述对真房源的承诺，“全渠道真房源，假一赔百”、“省心选房，上链家网”，此次，“一直在较真”的营销战役，则把链家怎么做到真房源以及坚持真房源的决心，说了个通透。![真房源][5]\n于是，在《记录房子的人》故事中，我们知道了原来链家网有个楼盘字典团队，他们的工作就是跑到各个城市数房子，把每个小区每套房都数清楚并录入系统，确保每套房源真实存在。而《拍摄房子的人》第一次向我们介绍了给房子拍照的摄影师这个新鲜的工种，他们拍照不追求美，而追求真实。《核查房子的人》中看似柔弱的姑娘，顶着压力在内部捍卫真房源原则的时候，也像极了在职场上每一个较真的你我。\n\n三个较真故事都有真实的员工原型，据说他们在广告片中的每个动作、每个道具、每句话、每个感悟，都经过无数次内部讨论核对以确保真实还原。讲述真房源，也要用较真的创意。\n\n链家在房源上较真的决心，也必须用最真诚的方式讲给消费者听。\n\n宋琦这样说：“当大家都认为真房源是理所应当的时候，我们的历史使命可能就完成了。”\n\n#“较真”只是第一步，建立在真房源基础上的大数据能做的还有很多\n![宋琦][6]\n宋琦：买房的痛点有太多，但真房源是解决所有痛点的第一步。链家一直想传递的是让买房卖房不再难的愿景，帮助用户提高决策和购房效率，不浪费时间的同时是不浪费更多的感情。以往房产中介的信息不对称导致用户的信赖度比较低，那么我们希望从一开始就和用户建立起基本的信任。\n\n宋琦：行业痛点有很多，同时它的每个痛点其实都非常难解决，但想要在这个行业中成为领导者，就必须随着时代的发展有所突破和创新，我们也希望可以在行业中制定一些标准。不仅是房产交易，在品牌营销当中是什么就说什么、做什么就讲什么，我们首先需要的就是一颗非常务实和实在的真心，不夸张不渲染，用诚意去打动消费者。\n\n宋琦：如果想在这个行业有所突破，肯定是随着时代的发展要有所突破和创新，我们没有细分链家到底是传统的还是互联网的，我们只是想给用户提供最好的、最优质的服务。对于未来的判断互联网将是用户找房选房买房的第一步，所以互联网是我们非常重要的一个战略部署，但我们更希望的是提供一个整合的闭环服务，从线上到线下用互联网的思维来重构整个交易的流程，使得房产交易更有效率也更加顺畅。\n## 未来房源展示\n\n当各行各业都在不同程度地被互联网解构的同时，我们很难定义那些原本扎根于传统领域的企业们在转身后的行业属性，要知道房产中介建立大数据平台并不是一件简单的事，但这也就决定了链家和其他中介、房产品牌的最大不同：对于这个传统的房产中介行业来说，用户并不需要了解链家网到底有多少数据，重要的是这些数据能够带来多少价值和意义。“数出来”的楼盘字典也只是链家大数据中的其中一部分，作为“真房源”的基本参照物而存在。我们同样期待在行业中链家可以在数据驱动的全价值链房产服务平台基础上建立起一套行业标准。![总部][7]\n![房源][8]\n![拍摄][9]\n**关注一下；你就知道**\n![关注一下；你就知道][10]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/kfc.jpg\n  [2]: http://od3jhy35s.bkt.clouddn.com/sljw.jpg\n  [3]: http://od3jhy35s.bkt.clouddn.com/lianjia.jpg\n  [4]: http://od3jhy35s.bkt.clouddn.com/lpcd.jpg\n  [5]: http://od3jhy35s.bkt.clouddn.com/dhhs.jpg\n  [6]: http://od3jhy35s.bkt.clouddn.com/sq.jpg\n  [7]: http://od3jhy35s.bkt.clouddn.com/fb.jpg\n  [8]: http://od3jhy35s.bkt.clouddn.com/fy.jpg\n  [9]: http://od3jhy35s.bkt.clouddn.com/paizhao.jpg\n  [10]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","slug":"xiupi酱/链家！下一场变革将在哪里发生？","published":1,"updated":"2016-09-06T20:40:42.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vp60004lsvfn8h1lwh8","content":"<h2 id=\"认识链家\"><a href=\"#认识链家\" class=\"headerlink\" title=\"认识链家\"></a>认识链家</h2><p>链家的扩张：从37人发展成80000名经纪人。</p>\n<p>链家在全国已有8000余家门店，比大陆麦当劳与肯德基的总和都多。除了这个数字外，咱们对全国店面又有哪些了解呢？<img src=\"http://od3jhy35s.bkt.clouddn.com/kfc.jpg\" alt=\"肯德基\"><br>2001年，链家开出了第一家店，当时员工仅37人。链家官网显示，2002年6月链家就成为中国建设银行指定按揭代理机构。成立两年后，2003年9月成为”中央在京单位已购公房上市出售定点交易”代理服务机构。</p>\n<p>从最初单一的二手房买卖业务，到租售两全，2005年成立链家金融中心，2014年推出国内唯一的房屋资金担保支付平台“理房通”，14年时间，从“homelink链家地产”到“LIANJIA.链家”，链家正在朝着中介行业“巨无霸”的方向进发。<img src=\"http://od3jhy35s.bkt.clouddn.com/sljw.jpg\" alt=\"链家网\"></p>\n<h2 id=\"欢乐喜剧人\"><a href=\"#欢乐喜剧人\" class=\"headerlink\" title=\"欢乐喜剧人\"></a>欢乐喜剧人</h2><p>其实在今年Q1时，链家网冠名的《欢乐喜剧人2》成为当季蝉联收视冠军的黑马，就曾采访了链家网CMO宋琦，当问到在这次成功押宝娱乐IP后链家是否还会继续去追热点时，当时她的回复也异常朴素和真实：“我们不会再在娱乐上耗费太多，还是会回到真房源。”</p>\n<h2 id=\"链家真房源\"><a href=\"#链家真房源\" class=\"headerlink\" title=\"链家真房源\"></a>链家真房源</h2><p>今年8月，链家果然信守承诺，出街了“链家真房源，一直在较真”的营销战役，TVC分为3支，以3个链家网员工的真实故事为原型，讲述了链家在真房源这件事上的较真和坚持。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/lianjia.jpg\" alt=\"链家\"><br>去年链家14周年庆的系列广告就曾用温情的方式，讲述了链家经纪人和客户之间的暖心故事。“素人+真实故事”似乎成为链家广告的标签，而此次“链家真房源，一直在较真”系列战役，以同样真实的叙事手法，把链家为什么能做到真房源背后的故事以及“较真”的决心，讲进了消费者的心里。</p>\n<p>据悉，系列视频在各大视频网站、朋友圈上线后，总播放量就已超过千万，很多网友留言说，“想不到链家还有这样的员工”、“真房源居然是一套套数出来的”、“刷新了对链家的认知”。</p>\n<p>#先用实际行动证明自己，再用真诚打动消费者</p>\n<h2 id=\"宋琦说\"><a href=\"#宋琦说\" class=\"headerlink\" title=\"宋琦说\"></a>宋琦说</h2><p>在宋琦看来，三个“较真”的故事之所以可以让来自于身边的朋友或者大众感动，最根本的原因就是因为这些故事是真的，链家网的品牌传播理念也一直是基于真实二字展开。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/lpcd.jpg\" alt=\"真房源\"><br>早在多年前的中介行业中，图片虚假、价格虚假、甚至连地址都虚假的假房源是一种“潜规则”，不发布假房源则没有客源，整个行业陷在恶性循环中，丢失了人与人之间的基本信任。</p>\n<p>链家在真房源这件事上，有着壮士断腕般的决心。2011年，链家在线发布“真房源假一赔百”，成为国内首家在消协设立先行赔付保证金的房产中介，并于2012年承诺“全渠道真房源”，2013年以后链家网全国真房源率稳定在97%（“不真实的”主要集中在两类，一类是取消委托或在同业成交后，没有及时核销；一类是系统内基本信息录入错误）。</p>\n<p>#讲述真房源，要用最较真的创意</p>\n<p>虽然在事实上链家已算做到了全渠道真房源，但过去很长时间中大众对于国内房产中介的刻板印象和不信任又需要多长时间来重新洗白？</p>\n<p>在过去三年里，链家曾一直在讲述对真房源的承诺，“全渠道真房源，假一赔百”、“省心选房，上链家网”，此次，“一直在较真”的营销战役，则把链家怎么做到真房源以及坚持真房源的决心，说了个通透。<img src=\"http://od3jhy35s.bkt.clouddn.com/dhhs.jpg\" alt=\"真房源\"><br>于是，在《记录房子的人》故事中，我们知道了原来链家网有个楼盘字典团队，他们的工作就是跑到各个城市数房子，把每个小区每套房都数清楚并录入系统，确保每套房源真实存在。而《拍摄房子的人》第一次向我们介绍了给房子拍照的摄影师这个新鲜的工种，他们拍照不追求美，而追求真实。《核查房子的人》中看似柔弱的姑娘，顶着压力在内部捍卫真房源原则的时候，也像极了在职场上每一个较真的你我。</p>\n<p>三个较真故事都有真实的员工原型，据说他们在广告片中的每个动作、每个道具、每句话、每个感悟，都经过无数次内部讨论核对以确保真实还原。讲述真房源，也要用较真的创意。</p>\n<p>链家在房源上较真的决心，也必须用最真诚的方式讲给消费者听。</p>\n<p>宋琦这样说：“当大家都认为真房源是理所应当的时候，我们的历史使命可能就完成了。”</p>\n<p>#“较真”只是第一步，建立在真房源基础上的大数据能做的还有很多<br><img src=\"http://od3jhy35s.bkt.clouddn.com/sq.jpg\" alt=\"宋琦\"><br>宋琦：买房的痛点有太多，但真房源是解决所有痛点的第一步。链家一直想传递的是让买房卖房不再难的愿景，帮助用户提高决策和购房效率，不浪费时间的同时是不浪费更多的感情。以往房产中介的信息不对称导致用户的信赖度比较低，那么我们希望从一开始就和用户建立起基本的信任。</p>\n<p>宋琦：行业痛点有很多，同时它的每个痛点其实都非常难解决，但想要在这个行业中成为领导者，就必须随着时代的发展有所突破和创新，我们也希望可以在行业中制定一些标准。不仅是房产交易，在品牌营销当中是什么就说什么、做什么就讲什么，我们首先需要的就是一颗非常务实和实在的真心，不夸张不渲染，用诚意去打动消费者。</p>\n<p>宋琦：如果想在这个行业有所突破，肯定是随着时代的发展要有所突破和创新，我们没有细分链家到底是传统的还是互联网的，我们只是想给用户提供最好的、最优质的服务。对于未来的判断互联网将是用户找房选房买房的第一步，所以互联网是我们非常重要的一个战略部署，但我们更希望的是提供一个整合的闭环服务，从线上到线下用互联网的思维来重构整个交易的流程，使得房产交易更有效率也更加顺畅。</p>\n<h2 id=\"未来房源展示\"><a href=\"#未来房源展示\" class=\"headerlink\" title=\"未来房源展示\"></a>未来房源展示</h2><p>当各行各业都在不同程度地被互联网解构的同时，我们很难定义那些原本扎根于传统领域的企业们在转身后的行业属性，要知道房产中介建立大数据平台并不是一件简单的事，但这也就决定了链家和其他中介、房产品牌的最大不同：对于这个传统的房产中介行业来说，用户并不需要了解链家网到底有多少数据，重要的是这些数据能够带来多少价值和意义。“数出来”的楼盘字典也只是链家大数据中的其中一部分，作为“真房源”的基本参照物而存在。我们同样期待在行业中链家可以在数据驱动的全价值链房产服务平台基础上建立起一套行业标准。<img src=\"http://od3jhy35s.bkt.clouddn.com/fb.jpg\" alt=\"总部\"><br><img src=\"http://od3jhy35s.bkt.clouddn.com/fy.jpg\" alt=\"房源\"><br><img src=\"http://od3jhy35s.bkt.clouddn.com/paizhao.jpg\" alt=\"拍摄\"><br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n","excerpt":"","more":"<h2 id=\"认识链家\"><a href=\"#认识链家\" class=\"headerlink\" title=\"认识链家\"></a>认识链家</h2><p>链家的扩张：从37人发展成80000名经纪人。</p>\n<p>链家在全国已有8000余家门店，比大陆麦当劳与肯德基的总和都多。除了这个数字外，咱们对全国店面又有哪些了解呢？<img src=\"http://od3jhy35s.bkt.clouddn.com/kfc.jpg\" alt=\"肯德基\"><br>2001年，链家开出了第一家店，当时员工仅37人。链家官网显示，2002年6月链家就成为中国建设银行指定按揭代理机构。成立两年后，2003年9月成为”中央在京单位已购公房上市出售定点交易”代理服务机构。</p>\n<p>从最初单一的二手房买卖业务，到租售两全，2005年成立链家金融中心，2014年推出国内唯一的房屋资金担保支付平台“理房通”，14年时间，从“homelink链家地产”到“LIANJIA.链家”，链家正在朝着中介行业“巨无霸”的方向进发。<img src=\"http://od3jhy35s.bkt.clouddn.com/sljw.jpg\" alt=\"链家网\"></p>\n<h2 id=\"欢乐喜剧人\"><a href=\"#欢乐喜剧人\" class=\"headerlink\" title=\"欢乐喜剧人\"></a>欢乐喜剧人</h2><p>其实在今年Q1时，链家网冠名的《欢乐喜剧人2》成为当季蝉联收视冠军的黑马，就曾采访了链家网CMO宋琦，当问到在这次成功押宝娱乐IP后链家是否还会继续去追热点时，当时她的回复也异常朴素和真实：“我们不会再在娱乐上耗费太多，还是会回到真房源。”</p>\n<h2 id=\"链家真房源\"><a href=\"#链家真房源\" class=\"headerlink\" title=\"链家真房源\"></a>链家真房源</h2><p>今年8月，链家果然信守承诺，出街了“链家真房源，一直在较真”的营销战役，TVC分为3支，以3个链家网员工的真实故事为原型，讲述了链家在真房源这件事上的较真和坚持。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/lianjia.jpg\" alt=\"链家\"><br>去年链家14周年庆的系列广告就曾用温情的方式，讲述了链家经纪人和客户之间的暖心故事。“素人+真实故事”似乎成为链家广告的标签，而此次“链家真房源，一直在较真”系列战役，以同样真实的叙事手法，把链家为什么能做到真房源背后的故事以及“较真”的决心，讲进了消费者的心里。</p>\n<p>据悉，系列视频在各大视频网站、朋友圈上线后，总播放量就已超过千万，很多网友留言说，“想不到链家还有这样的员工”、“真房源居然是一套套数出来的”、“刷新了对链家的认知”。</p>\n<p>#先用实际行动证明自己，再用真诚打动消费者</p>\n<h2 id=\"宋琦说\"><a href=\"#宋琦说\" class=\"headerlink\" title=\"宋琦说\"></a>宋琦说</h2><p>在宋琦看来，三个“较真”的故事之所以可以让来自于身边的朋友或者大众感动，最根本的原因就是因为这些故事是真的，链家网的品牌传播理念也一直是基于真实二字展开。<br><img src=\"http://od3jhy35s.bkt.clouddn.com/lpcd.jpg\" alt=\"真房源\"><br>早在多年前的中介行业中，图片虚假、价格虚假、甚至连地址都虚假的假房源是一种“潜规则”，不发布假房源则没有客源，整个行业陷在恶性循环中，丢失了人与人之间的基本信任。</p>\n<p>链家在真房源这件事上，有着壮士断腕般的决心。2011年，链家在线发布“真房源假一赔百”，成为国内首家在消协设立先行赔付保证金的房产中介，并于2012年承诺“全渠道真房源”，2013年以后链家网全国真房源率稳定在97%（“不真实的”主要集中在两类，一类是取消委托或在同业成交后，没有及时核销；一类是系统内基本信息录入错误）。</p>\n<p>#讲述真房源，要用最较真的创意</p>\n<p>虽然在事实上链家已算做到了全渠道真房源，但过去很长时间中大众对于国内房产中介的刻板印象和不信任又需要多长时间来重新洗白？</p>\n<p>在过去三年里，链家曾一直在讲述对真房源的承诺，“全渠道真房源，假一赔百”、“省心选房，上链家网”，此次，“一直在较真”的营销战役，则把链家怎么做到真房源以及坚持真房源的决心，说了个通透。<img src=\"http://od3jhy35s.bkt.clouddn.com/dhhs.jpg\" alt=\"真房源\"><br>于是，在《记录房子的人》故事中，我们知道了原来链家网有个楼盘字典团队，他们的工作就是跑到各个城市数房子，把每个小区每套房都数清楚并录入系统，确保每套房源真实存在。而《拍摄房子的人》第一次向我们介绍了给房子拍照的摄影师这个新鲜的工种，他们拍照不追求美，而追求真实。《核查房子的人》中看似柔弱的姑娘，顶着压力在内部捍卫真房源原则的时候，也像极了在职场上每一个较真的你我。</p>\n<p>三个较真故事都有真实的员工原型，据说他们在广告片中的每个动作、每个道具、每句话、每个感悟，都经过无数次内部讨论核对以确保真实还原。讲述真房源，也要用较真的创意。</p>\n<p>链家在房源上较真的决心，也必须用最真诚的方式讲给消费者听。</p>\n<p>宋琦这样说：“当大家都认为真房源是理所应当的时候，我们的历史使命可能就完成了。”</p>\n<p>#“较真”只是第一步，建立在真房源基础上的大数据能做的还有很多<br><img src=\"http://od3jhy35s.bkt.clouddn.com/sq.jpg\" alt=\"宋琦\"><br>宋琦：买房的痛点有太多，但真房源是解决所有痛点的第一步。链家一直想传递的是让买房卖房不再难的愿景，帮助用户提高决策和购房效率，不浪费时间的同时是不浪费更多的感情。以往房产中介的信息不对称导致用户的信赖度比较低，那么我们希望从一开始就和用户建立起基本的信任。</p>\n<p>宋琦：行业痛点有很多，同时它的每个痛点其实都非常难解决，但想要在这个行业中成为领导者，就必须随着时代的发展有所突破和创新，我们也希望可以在行业中制定一些标准。不仅是房产交易，在品牌营销当中是什么就说什么、做什么就讲什么，我们首先需要的就是一颗非常务实和实在的真心，不夸张不渲染，用诚意去打动消费者。</p>\n<p>宋琦：如果想在这个行业有所突破，肯定是随着时代的发展要有所突破和创新，我们没有细分链家到底是传统的还是互联网的，我们只是想给用户提供最好的、最优质的服务。对于未来的判断互联网将是用户找房选房买房的第一步，所以互联网是我们非常重要的一个战略部署，但我们更希望的是提供一个整合的闭环服务，从线上到线下用互联网的思维来重构整个交易的流程，使得房产交易更有效率也更加顺畅。</p>\n<h2 id=\"未来房源展示\"><a href=\"#未来房源展示\" class=\"headerlink\" title=\"未来房源展示\"></a>未来房源展示</h2><p>当各行各业都在不同程度地被互联网解构的同时，我们很难定义那些原本扎根于传统领域的企业们在转身后的行业属性，要知道房产中介建立大数据平台并不是一件简单的事，但这也就决定了链家和其他中介、房产品牌的最大不同：对于这个传统的房产中介行业来说，用户并不需要了解链家网到底有多少数据，重要的是这些数据能够带来多少价值和意义。“数出来”的楼盘字典也只是链家大数据中的其中一部分，作为“真房源”的基本参照物而存在。我们同样期待在行业中链家可以在数据驱动的全价值链房产服务平台基础上建立起一套行业标准。<img src=\"http://od3jhy35s.bkt.clouddn.com/fb.jpg\" alt=\"总部\"><br><img src=\"http://od3jhy35s.bkt.clouddn.com/fy.jpg\" alt=\"房源\"><br><img src=\"http://od3jhy35s.bkt.clouddn.com/paizhao.jpg\" alt=\"拍摄\"><br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n"},{"title":"BFC如何应用到实际场景","date":"2015-04-12T09:29:00.000Z","author":"xiupi酱","private":true,"_content":"\n## 什么是BFC\n\n首先，你可能需要简单的了解一下什么是 `BFC`。\n\nW3C在视觉格式化模型中描述了一个 `Block formatting contexts` 的概念，大致的说法如下：\n\n> 浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-cells 和 table-captions），以及 `overflow` 值不为 `visiable`（除非该值已经延伸到视口上） 的块盒，都会为他们的内容创建新的块格式化上下文。\n\n> 在一个块格式化上下文里，盒子从包含块顶部开始一个接一个的纵向排列。两个相邻兄弟盒子之间的垂直的间隙取决于 `margin` 定义。块级盒纵向相邻（水平书写格式下）的 `margins` 会在同一个块格式化上下文中折叠合并（取最大值）。\n\n> 在一个块格式化上下文里，每个盒子的左外边界会触碰到包含块的左边界（如果是从右到左的书写格式，则为右边界），即使同时存在浮动元素也是如此（虽然盒子的行框集可能会由于浮动的存在而缩小），除非这个盒子创建了一个新的块格式化上下文（在这种情况下，盒子本身由于浮动可能会变得更窄）。\n\n这其实就是对于 `BFC` 的描述，也即大家常说的块格式化上下文，所以 `BFC` 没什么神秘的，只是 `Block formatting contexts` 的首字母缩写。\n\n题外话：一个简单的概念，被各种 `名词再造`，不知道在什么时候突然成为了一个高大上的东西。以下省略2个字：讨厌。\n\n为了方便理解，也为了符合大家的认知习惯，这个概念在下面都以 `BFC` 来代替。\n\n<!--more-->\n\n## Formatting context 的作用\n\n待补充。。。","source":"_posts/前端/BFC如何应用到实际场景.md","raw":"title: BFC如何应用到实际场景\ndate: 2015-04-12 17:29:00\ncategories: 前端\nauthor: xiupi酱\ntags: [w3c, BFC,css]\nprivate: true\n---\n\n## 什么是BFC\n\n首先，你可能需要简单的了解一下什么是 `BFC`。\n\nW3C在视觉格式化模型中描述了一个 `Block formatting contexts` 的概念，大致的说法如下：\n\n> 浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-cells 和 table-captions），以及 `overflow` 值不为 `visiable`（除非该值已经延伸到视口上） 的块盒，都会为他们的内容创建新的块格式化上下文。\n\n> 在一个块格式化上下文里，盒子从包含块顶部开始一个接一个的纵向排列。两个相邻兄弟盒子之间的垂直的间隙取决于 `margin` 定义。块级盒纵向相邻（水平书写格式下）的 `margins` 会在同一个块格式化上下文中折叠合并（取最大值）。\n\n> 在一个块格式化上下文里，每个盒子的左外边界会触碰到包含块的左边界（如果是从右到左的书写格式，则为右边界），即使同时存在浮动元素也是如此（虽然盒子的行框集可能会由于浮动的存在而缩小），除非这个盒子创建了一个新的块格式化上下文（在这种情况下，盒子本身由于浮动可能会变得更窄）。\n\n这其实就是对于 `BFC` 的描述，也即大家常说的块格式化上下文，所以 `BFC` 没什么神秘的，只是 `Block formatting contexts` 的首字母缩写。\n\n题外话：一个简单的概念，被各种 `名词再造`，不知道在什么时候突然成为了一个高大上的东西。以下省略2个字：讨厌。\n\n为了方便理解，也为了符合大家的认知习惯，这个概念在下面都以 `BFC` 来代替。\n\n<!--more-->\n\n## Formatting context 的作用\n\n待补充。。。","slug":"前端/BFC如何应用到实际场景","published":1,"updated":"2016-09-06T19:12:20.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vp60007lsvf4mehbg1j","content":"<h2 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h2><p>首先，你可能需要简单的了解一下什么是 <code>BFC</code>。</p>\n<p>W3C在视觉格式化模型中描述了一个 <code>Block formatting contexts</code> 的概念，大致的说法如下：</p>\n<blockquote>\n<p>浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-cells 和 table-captions），以及 <code>overflow</code> 值不为 <code>visiable</code>（除非该值已经延伸到视口上） 的块盒，都会为他们的内容创建新的块格式化上下文。</p>\n<p>在一个块格式化上下文里，盒子从包含块顶部开始一个接一个的纵向排列。两个相邻兄弟盒子之间的垂直的间隙取决于 <code>margin</code> 定义。块级盒纵向相邻（水平书写格式下）的 <code>margins</code> 会在同一个块格式化上下文中折叠合并（取最大值）。</p>\n<p>在一个块格式化上下文里，每个盒子的左外边界会触碰到包含块的左边界（如果是从右到左的书写格式，则为右边界），即使同时存在浮动元素也是如此（虽然盒子的行框集可能会由于浮动的存在而缩小），除非这个盒子创建了一个新的块格式化上下文（在这种情况下，盒子本身由于浮动可能会变得更窄）。</p>\n</blockquote>\n<p>这其实就是对于 <code>BFC</code> 的描述，也即大家常说的块格式化上下文，所以 <code>BFC</code> 没什么神秘的，只是 <code>Block formatting contexts</code> 的首字母缩写。</p>\n<p>题外话：一个简单的概念，被各种 <code>名词再造</code>，不知道在什么时候突然成为了一个高大上的东西。以下省略2个字：讨厌。</p>\n<p>为了方便理解，也为了符合大家的认知习惯，这个概念在下面都以 <code>BFC</code> 来代替。</p>\n<a id=\"more\"></a>\n<h2 id=\"Formatting-context-的作用\"><a href=\"#Formatting-context-的作用\" class=\"headerlink\" title=\"Formatting context 的作用\"></a>Formatting context 的作用</h2><p>待补充。。。</p>\n","excerpt":"<h2 id=\"什么是BFC\"><a href=\"#什么是BFC\" class=\"headerlink\" title=\"什么是BFC\"></a>什么是BFC</h2><p>首先，你可能需要简单的了解一下什么是 <code>BFC</code>。</p>\n<p>W3C在视觉格式化模型中描述了一个 <code>Block formatting contexts</code> 的概念，大致的说法如下：</p>\n<blockquote>\n<p>浮动和绝对定位元素，非块盒的块容器（诸如：inline-blocks, table-cells 和 table-captions），以及 <code>overflow</code> 值不为 <code>visiable</code>（除非该值已经延伸到视口上） 的块盒，都会为他们的内容创建新的块格式化上下文。</p>\n<p>在一个块格式化上下文里，盒子从包含块顶部开始一个接一个的纵向排列。两个相邻兄弟盒子之间的垂直的间隙取决于 <code>margin</code> 定义。块级盒纵向相邻（水平书写格式下）的 <code>margins</code> 会在同一个块格式化上下文中折叠合并（取最大值）。</p>\n<p>在一个块格式化上下文里，每个盒子的左外边界会触碰到包含块的左边界（如果是从右到左的书写格式，则为右边界），即使同时存在浮动元素也是如此（虽然盒子的行框集可能会由于浮动的存在而缩小），除非这个盒子创建了一个新的块格式化上下文（在这种情况下，盒子本身由于浮动可能会变得更窄）。</p>\n</blockquote>\n<p>这其实就是对于 <code>BFC</code> 的描述，也即大家常说的块格式化上下文，所以 <code>BFC</code> 没什么神秘的，只是 <code>Block formatting contexts</code> 的首字母缩写。</p>\n<p>题外话：一个简单的概念，被各种 <code>名词再造</code>，不知道在什么时候突然成为了一个高大上的东西。以下省略2个字：讨厌。</p>\n<p>为了方便理解，也为了符合大家的认知习惯，这个概念在下面都以 <code>BFC</code> 来代替。</p>","more":"<h2 id=\"Formatting-context-的作用\"><a href=\"#Formatting-context-的作用\" class=\"headerlink\" title=\"Formatting context 的作用\"></a>Formatting context 的作用</h2><p>待补充。。。</p>"},{"title":"margin系列之与相对偏移的异同","date":"2013-12-02T03:15:00.000Z","author":"xiupi酱","_content":"\n## 也许我们是一样的\n\n可能大家都用会 `margin` 或者相对偏移的 `top, right, bottom, left` 来做一些类似元素偏移的事，其实我也会。这回我们只聊 `relative` 下的 `top, right, bottom, left` 。\n\n比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：\n\n### Case 1:\n\n```css\n#demo .margin-top{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">我是margin-top:50px</div>\n\t<div class=\"relative-top\">我是relative top:50px</div>\n</div>\n```\n\n上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 `DEMO1`: [margin-top vs. relative top](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm)\n\n<!--more-->\n\n## 其实它们真的有相似的地方\n\n从上面的例子，可以发现不论是 `margin-top` 还是 `relative top` 都是以自身作为参照物进行偏移的。\n\n顺带说一下 `absolute` 偏移相对的是包含块，并且其偏移值是从包含块的 `padding` 区域开始计算。\n\n## 但它们真的不一样，我们来看看规范怎么说：\n\n### margin:\n> 原文：Margins in CSS serve to add both horizontal and vertical space between boxes.\n\n> 翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。\n\n### top, right, bottom, left:\n> 原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.\n\n> 翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。\n\n意思很明白，`margin` 是用来增加自身与它人之间的空白，而 `top, right, bottom, left` 是用来对自身进行排版，作用完全不同。\n\n也就是说 `margin` 是互动的，因为它要影响它人；而 `top, right, bottom, left `是孤独的，它只是自己一个人玩，不影响它人。\n\n## 回到之前那个例子\n在 `DEMO1` 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。\n\nmargin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。\n\ntop的case: 让该div距离其包含块顶部边缘50px，因为是 `relative` ，所以这里是距离div自己的顶部边缘。\n\n## 我们大胆假设一下\n如果我们设置 `margin-bottom` 和 `bottom` 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：\n\n### Case 1:\n\n```css\n#demo .margin-bottom{\n\tmargin-bottom: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-bottom{\n\tposition: relative;\n\tbottom: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<p class=\"margin-bottom\">我是margin-bottom:50px</p>\n\t<p class=\"relative-bottom\">我是relative bottom:50px</p>\n</div>\n```\n\n验证猜想的时刻到了，来看看 `DEMO2`: [对margin-bottom和bottom的表现猜想](http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm)\n\n结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？\n\n前面我们说过 `margin` 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 `bottom`会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？\n\n还有一个细节你注意到了吗？`bottom` 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 `top, right, bottom, left` 是孤独的，它只是自己一个人玩，不影响它人。\n\n## 孤独患者\n我们将 `DEMO1` 稍改改，为其加上一点上下文，再看看结果：\n\n### Case 1:\n\n```css\n#demo .margin-top p{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top p{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">\n\t\t<p>我是margin-top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n\t<div class=\"relative-top\">\n\t\t<p>我是relative top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n</div>\n```\n\n迫不及待的要看看实际例子了，不是么？`DEMO3`: [再次验证一下top, right, bottom, left是孤独患者](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm)\n\n至此可以再次说明 `top, right, bottom, left` 真的和其上下文一毛钱关系都没有，绝对的孤单患者。\n\n所以 `margin` 和 `top, right, bottom, left ` 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.\n\n## 似乎还漏了点啥\n差点就这么结篇了，想起还有点遗漏的地方。\n\n当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。\n\n好吧，不得不再写个例子：`DEMO4`: [top, right, bottom, left详述](http://demo.doyoe.com/css/margin/top-right-bottom-left.htm)\n\n至于margin，就留给大家思考一下也不错 ^_^\n\nenjoy it again.\n\n## 可参考：\n\n* http://dev.w3.org/csswg/css-box/#the-margin-properties\n* http://dev.w3.org/csswg/css-position/#box-offsets-trbl\n\n## margin系列文章：\n\n* [margin系列之布局篇](/2013/12/31/css/margin系列之布局篇/)\n* [margin系列之bug巡演（三）](/2013/12/20/css/margin系列之bug巡演（三）/)\n* [margin系列之bug巡演（二）](/2013/12/17/css/margin系列之bug巡演（二）/)\n* [margin系列之内秀篇（二）](/2013/12/14/css/margin系列之内秀篇（二）/)\n* [margin系列之bug巡演](/2013/12/10/css/margin系列之bug巡演/)\n* [margin系列之内秀篇](/2013/12/06/css/margin系列之内秀篇/)\n* [margin系列之外边距折叠](/2013/12/04/css/margin系列之外边距折叠/)\n* [margin系列之与相对偏移的异同](/2013/12/02/css/margin系列之与相对偏移的异同/)\n* [margin系列之百分比](/2013/11/30/css/margin系列之百分比/)\n* [margin系列之keyword auto](/2013/11/29/css/margin系列之keyword%20auto/)","source":"_posts/前端/margin系列之与相对偏移的异同.md","raw":"title: margin系列之与相对偏移的异同\ndate: 2013-12-02 11:15:00\ncategories: 前端\nauthor: xiupi酱\ntags: [margin, w3c, css, margin偏移]\n---\n\n## 也许我们是一样的\n\n可能大家都用会 `margin` 或者相对偏移的 `top, right, bottom, left` 来做一些类似元素偏移的事，其实我也会。这回我们只聊 `relative` 下的 `top, right, bottom, left` 。\n\n比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：\n\n### Case 1:\n\n```css\n#demo .margin-top{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">我是margin-top:50px</div>\n\t<div class=\"relative-top\">我是relative top:50px</div>\n</div>\n```\n\n上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 `DEMO1`: [margin-top vs. relative top](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm)\n\n<!--more-->\n\n## 其实它们真的有相似的地方\n\n从上面的例子，可以发现不论是 `margin-top` 还是 `relative top` 都是以自身作为参照物进行偏移的。\n\n顺带说一下 `absolute` 偏移相对的是包含块，并且其偏移值是从包含块的 `padding` 区域开始计算。\n\n## 但它们真的不一样，我们来看看规范怎么说：\n\n### margin:\n> 原文：Margins in CSS serve to add both horizontal and vertical space between boxes.\n\n> 翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。\n\n### top, right, bottom, left:\n> 原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.\n\n> 翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。\n\n意思很明白，`margin` 是用来增加自身与它人之间的空白，而 `top, right, bottom, left` 是用来对自身进行排版，作用完全不同。\n\n也就是说 `margin` 是互动的，因为它要影响它人；而 `top, right, bottom, left `是孤独的，它只是自己一个人玩，不影响它人。\n\n## 回到之前那个例子\n在 `DEMO1` 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。\n\nmargin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。\n\ntop的case: 让该div距离其包含块顶部边缘50px，因为是 `relative` ，所以这里是距离div自己的顶部边缘。\n\n## 我们大胆假设一下\n如果我们设置 `margin-bottom` 和 `bottom` 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：\n\n### Case 1:\n\n```css\n#demo .margin-bottom{\n\tmargin-bottom: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-bottom{\n\tposition: relative;\n\tbottom: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<p class=\"margin-bottom\">我是margin-bottom:50px</p>\n\t<p class=\"relative-bottom\">我是relative bottom:50px</p>\n</div>\n```\n\n验证猜想的时刻到了，来看看 `DEMO2`: [对margin-bottom和bottom的表现猜想](http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm)\n\n结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？\n\n前面我们说过 `margin` 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 `bottom`会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？\n\n还有一个细节你注意到了吗？`bottom` 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 `top, right, bottom, left` 是孤独的，它只是自己一个人玩，不影响它人。\n\n## 孤独患者\n我们将 `DEMO1` 稍改改，为其加上一点上下文，再看看结果：\n\n### Case 1:\n\n```css\n#demo .margin-top p{\n\tmargin-top: 50px;\n}\n```\n\n### Case 2:\n\n```css\n#demo .relative-top p{\n\tposition:relative;\n\ttop: 50px;\n}\n```\n\n### HTML:\n```HTML\n<div id=\"demo\">\n\t<div class=\"margin-top\">\n\t\t<p>我是margin-top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n\t<div class=\"relative-top\">\n\t\t<p>我是relative top:50px</p>\n\t\t我是一段随便什么上下文\n\t</div>\n</div>\n```\n\n迫不及待的要看看实际例子了，不是么？`DEMO3`: [再次验证一下top, right, bottom, left是孤独患者](http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm)\n\n至此可以再次说明 `top, right, bottom, left` 真的和其上下文一毛钱关系都没有，绝对的孤单患者。\n\n所以 `margin` 和 `top, right, bottom, left ` 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.\n\n## 似乎还漏了点啥\n差点就这么结篇了，想起还有点遗漏的地方。\n\n当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。\n\n好吧，不得不再写个例子：`DEMO4`: [top, right, bottom, left详述](http://demo.doyoe.com/css/margin/top-right-bottom-left.htm)\n\n至于margin，就留给大家思考一下也不错 ^_^\n\nenjoy it again.\n\n## 可参考：\n\n* http://dev.w3.org/csswg/css-box/#the-margin-properties\n* http://dev.w3.org/csswg/css-position/#box-offsets-trbl\n\n## margin系列文章：\n\n* [margin系列之布局篇](/2013/12/31/css/margin系列之布局篇/)\n* [margin系列之bug巡演（三）](/2013/12/20/css/margin系列之bug巡演（三）/)\n* [margin系列之bug巡演（二）](/2013/12/17/css/margin系列之bug巡演（二）/)\n* [margin系列之内秀篇（二）](/2013/12/14/css/margin系列之内秀篇（二）/)\n* [margin系列之bug巡演](/2013/12/10/css/margin系列之bug巡演/)\n* [margin系列之内秀篇](/2013/12/06/css/margin系列之内秀篇/)\n* [margin系列之外边距折叠](/2013/12/04/css/margin系列之外边距折叠/)\n* [margin系列之与相对偏移的异同](/2013/12/02/css/margin系列之与相对偏移的异同/)\n* [margin系列之百分比](/2013/11/30/css/margin系列之百分比/)\n* [margin系列之keyword auto](/2013/11/29/css/margin系列之keyword%20auto/)","slug":"前端/margin系列之与相对偏移的异同","published":1,"updated":"2016-09-06T19:12:01.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vpm0008lsvfmnk8tw1m","content":"<h2 id=\"也许我们是一样的\"><a href=\"#也许我们是一样的\" class=\"headerlink\" title=\"也许我们是一样的\"></a>也许我们是一样的</h2><p>可能大家都用会 <code>margin</code> 或者相对偏移的 <code>top, right, bottom, left</code> 来做一些类似元素偏移的事，其实我也会。这回我们只聊 <code>relative</code> 下的 <code>top, right, bottom, left</code> 。</p>\n<p>比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：</p>\n<h3 id=\"Case-1\"><a href=\"#Case-1\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-top</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2\"><a href=\"#Case-2\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-top</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>:relative;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-top\"</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-top\"</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm\" target=\"_blank\" rel=\"external\">margin-top vs. relative top</a></p>\n<a id=\"more\"></a>\n<h2 id=\"其实它们真的有相似的地方\"><a href=\"#其实它们真的有相似的地方\" class=\"headerlink\" title=\"其实它们真的有相似的地方\"></a>其实它们真的有相似的地方</h2><p>从上面的例子，可以发现不论是 <code>margin-top</code> 还是 <code>relative top</code> 都是以自身作为参照物进行偏移的。</p>\n<p>顺带说一下 <code>absolute</code> 偏移相对的是包含块，并且其偏移值是从包含块的 <code>padding</code> 区域开始计算。</p>\n<h2 id=\"但它们真的不一样，我们来看看规范怎么说：\"><a href=\"#但它们真的不一样，我们来看看规范怎么说：\" class=\"headerlink\" title=\"但它们真的不一样，我们来看看规范怎么说：\"></a>但它们真的不一样，我们来看看规范怎么说：</h2><h3 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin:\"></a>margin:</h3><blockquote>\n<p>原文：Margins in CSS serve to add both horizontal and vertical space between boxes.</p>\n<p>翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。</p>\n</blockquote>\n<h3 id=\"top-right-bottom-left\"><a href=\"#top-right-bottom-left\" class=\"headerlink\" title=\"top, right, bottom, left:\"></a>top, right, bottom, left:</h3><blockquote>\n<p>原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.</p>\n<p>翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。</p>\n</blockquote>\n<p>意思很明白，<code>margin</code> 是用来增加自身与它人之间的空白，而 <code>top, right, bottom, left</code> 是用来对自身进行排版，作用完全不同。</p>\n<p>也就是说 <code>margin</code> 是互动的，因为它要影响它人；而 <code>top, right, bottom, left</code>是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"回到之前那个例子\"><a href=\"#回到之前那个例子\" class=\"headerlink\" title=\"回到之前那个例子\"></a>回到之前那个例子</h2><p>在 <code>DEMO1</code> 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。</p>\n<p>margin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。</p>\n<p>top的case: 让该div距离其包含块顶部边缘50px，因为是 <code>relative</code> ，所以这里是距离div自己的顶部边缘。</p>\n<h2 id=\"我们大胆假设一下\"><a href=\"#我们大胆假设一下\" class=\"headerlink\" title=\"我们大胆假设一下\"></a>我们大胆假设一下</h2><p>如果我们设置 <code>margin-bottom</code> 和 <code>bottom</code> 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：</p>\n<h3 id=\"Case-1-1\"><a href=\"#Case-1-1\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-bottom</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2-1\"><a href=\"#Case-2-1\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-bottom</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-bottom\"</span>&gt;</span>我是margin-bottom:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-bottom\"</span>&gt;</span>我是relative bottom:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>验证猜想的时刻到了，来看看 <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm\" target=\"_blank\" rel=\"external\">对margin-bottom和bottom的表现猜想</a></p>\n<p>结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？</p>\n<p>前面我们说过 <code>margin</code> 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 <code>bottom</code>会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？</p>\n<p>还有一个细节你注意到了吗？<code>bottom</code> 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 <code>top, right, bottom, left</code> 是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"孤独患者\"><a href=\"#孤独患者\" class=\"headerlink\" title=\"孤独患者\"></a>孤独患者</h2><p>我们将 <code>DEMO1</code> 稍改改，为其加上一点上下文，再看看结果：</p>\n<h3 id=\"Case-1-2\"><a href=\"#Case-1-2\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-top</span> <span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2-2\"><a href=\"#Case-2-2\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-top</span> <span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>:relative;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>迫不及待的要看看实际例子了，不是么？<code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm\" target=\"_blank\" rel=\"external\">再次验证一下top, right, bottom, left是孤独患者</a></p>\n<p>至此可以再次说明 <code>top, right, bottom, left</code> 真的和其上下文一毛钱关系都没有，绝对的孤单患者。</p>\n<p>所以 <code>margin</code> 和 <code>top, right, bottom, left</code> 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.</p>\n<h2 id=\"似乎还漏了点啥\"><a href=\"#似乎还漏了点啥\" class=\"headerlink\" title=\"似乎还漏了点啥\"></a>似乎还漏了点啥</h2><p>差点就这么结篇了，想起还有点遗漏的地方。</p>\n<p>当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。</p>\n<p>好吧，不得不再写个例子：<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/margin/top-right-bottom-left.htm\" target=\"_blank\" rel=\"external\">top, right, bottom, left详述</a></p>\n<p>至于margin，就留给大家思考一下也不错 ^_^</p>\n<p>enjoy it again.</p>\n<h2 id=\"可参考：\"><a href=\"#可参考：\" class=\"headerlink\" title=\"可参考：\"></a>可参考：</h2><ul>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#the-margin-properties\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-position/#box-offsets-trbl\" target=\"_blank\" rel=\"external\">http://dev.w3.org/csswg/css-position/#box-offsets-trbl</a></li>\n</ul>\n<h2 id=\"margin系列文章：\"><a href=\"#margin系列文章：\" class=\"headerlink\" title=\"margin系列文章：\"></a>margin系列文章：</h2><ul>\n<li><a href=\"/2013/12/31/css/margin系列之布局篇/\">margin系列之布局篇</a></li>\n<li><a href=\"/2013/12/20/css/margin系列之bug巡演（三）/\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"/2013/12/17/css/margin系列之bug巡演（二）/\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"/2013/12/14/css/margin系列之内秀篇（二）/\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"/2013/12/10/css/margin系列之bug巡演/\">margin系列之bug巡演</a></li>\n<li><a href=\"/2013/12/06/css/margin系列之内秀篇/\">margin系列之内秀篇</a></li>\n<li><a href=\"/2013/12/04/css/margin系列之外边距折叠/\">margin系列之外边距折叠</a></li>\n<li><a href=\"/2013/12/02/css/margin系列之与相对偏移的异同/\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"/2013/11/30/css/margin系列之百分比/\">margin系列之百分比</a></li>\n<li><a href=\"/2013/11/29/css/margin系列之keyword%20auto/\">margin系列之keyword auto</a></li>\n</ul>\n","excerpt":"<h2 id=\"也许我们是一样的\"><a href=\"#也许我们是一样的\" class=\"headerlink\" title=\"也许我们是一样的\"></a>也许我们是一样的</h2><p>可能大家都用会 <code>margin</code> 或者相对偏移的 <code>top, right, bottom, left</code> 来做一些类似元素偏移的事，其实我也会。这回我们只聊 <code>relative</code> 下的 <code>top, right, bottom, left</code> 。</p>\n<p>比如说我们想让一个 div 向下偏移 50 个像素，通常会这样：</p>\n<h3 id=\"Case-1\"><a href=\"#Case-1\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-top</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2\"><a href=\"#Case-2\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-top</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>:relative;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-top\"</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-top\"</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>上述2种方式，我们都可以完成 div 向下偏移 50 个像素的需求。来看看 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top.htm\">margin-top vs. relative top</a></p>","more":"<h2 id=\"其实它们真的有相似的地方\"><a href=\"#其实它们真的有相似的地方\" class=\"headerlink\" title=\"其实它们真的有相似的地方\"></a>其实它们真的有相似的地方</h2><p>从上面的例子，可以发现不论是 <code>margin-top</code> 还是 <code>relative top</code> 都是以自身作为参照物进行偏移的。</p>\n<p>顺带说一下 <code>absolute</code> 偏移相对的是包含块，并且其偏移值是从包含块的 <code>padding</code> 区域开始计算。</p>\n<h2 id=\"但它们真的不一样，我们来看看规范怎么说：\"><a href=\"#但它们真的不一样，我们来看看规范怎么说：\" class=\"headerlink\" title=\"但它们真的不一样，我们来看看规范怎么说：\"></a>但它们真的不一样，我们来看看规范怎么说：</h2><h3 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin:\"></a>margin:</h3><blockquote>\n<p>原文：Margins in CSS serve to add both horizontal and vertical space between boxes.</p>\n<p>翻译：CSS中的margin用来添加盒子之间的水平和垂直间隙。</p>\n</blockquote>\n<h3 id=\"top-right-bottom-left\"><a href=\"#top-right-bottom-left\" class=\"headerlink\" title=\"top, right, bottom, left:\"></a>top, right, bottom, left:</h3><blockquote>\n<p>原文：An element is said to be positioned if its ‘position’ property has a value other than ‘static’. Positioned elements generate positioned boxes, and may be laid out according to the following four physical properties: top, right, bottom, left.</p>\n<p>翻译：一个元素的position属性值如果不为static则发生定位。定位元素会产生定位盒，并且会根据 top, right, bottom, left 这4个物理属性进行排版布局。</p>\n</blockquote>\n<p>意思很明白，<code>margin</code> 是用来增加自身与它人之间的空白，而 <code>top, right, bottom, left</code> 是用来对自身进行排版，作用完全不同。</p>\n<p>也就是说 <code>margin</code> 是互动的，因为它要影响它人；而 <code>top, right, bottom, left</code>是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"回到之前那个例子\"><a href=\"#回到之前那个例子\" class=\"headerlink\" title=\"回到之前那个例子\"></a>回到之前那个例子</h2><p>在 <code>DEMO1</code> 中，我们看到2个方法都可以做到向下偏移50px，不过它们的意义不太一样。</p>\n<p>margin的case: 让该div的顶部与其相邻的元素（这里即其包含块）留有50px的空白。</p>\n<p>top的case: 让该div距离其包含块顶部边缘50px，因为是 <code>relative</code> ，所以这里是距离div自己的顶部边缘。</p>\n<h2 id=\"我们大胆假设一下\"><a href=\"#我们大胆假设一下\" class=\"headerlink\" title=\"我们大胆假设一下\"></a>我们大胆假设一下</h2><p>如果我们设置 <code>margin-bottom</code> 和 <code>bottom</code> 的值也为50px，它们的表现将完全不一样，你觉得呢？ 恩，试试：</p>\n<h3 id=\"Case-1-1\"><a href=\"#Case-1-1\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-bottom</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2-1\"><a href=\"#Case-2-1\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-bottom</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>: relative;</div><div class=\"line\">\t<span class=\"attribute\">bottom</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-bottom\"</span>&gt;</span>我是margin-bottom:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-bottom\"</span>&gt;</span>我是relative bottom:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>验证猜想的时刻到了，来看看 <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-bottom-vs-relative-bottom.htm\">对margin-bottom和bottom的表现猜想</a></p>\n<p>结果有出乎你的意料吗？好吧，不论怎么，解释下为什么会这样？</p>\n<p>前面我们说过 <code>margin</code> 是用来增加自身与它人之间的间隙，所以它距包含块底部有50px，这应该能理解？那为什么 <code>bottom</code>会跑到上面去？相信仔细看了之前的描述，你应该知道。因为它要相对自己的底部边缘有50px，恩，不是-50px，所以它等于是向上偏移了50px，很简单，不是吗？</p>\n<p>还有一个细节你注意到了吗？<code>bottom</code> 没有撑开它的包含块，仔细看看它的包含块的背景色区域。这正好也验证了之前说的 <code>top, right, bottom, left</code> 是孤独的，它只是自己一个人玩，不影响它人。</p>\n<h2 id=\"孤独患者\"><a href=\"#孤独患者\" class=\"headerlink\" title=\"孤独患者\"></a>孤独患者</h2><p>我们将 <code>DEMO1</code> 稍改改，为其加上一点上下文，再看看结果：</p>\n<h3 id=\"Case-1-2\"><a href=\"#Case-1-2\" class=\"headerlink\" title=\"Case 1:\"></a>Case 1:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.margin-top</span> <span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Case-2-2\"><a href=\"#Case-2-2\" class=\"headerlink\" title=\"Case 2:\"></a>Case 2:</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#demo</span> <span class=\"selector-class\">.relative-top</span> <span class=\"selector-tag\">p</span>&#123;</div><div class=\"line\">\t<span class=\"attribute\">position</span>:relative;</div><div class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML:\"></a>HTML:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"margin-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是margin-top:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"relative-top\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>我是relative top:50px<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\">\t\t我是一段随便什么上下文</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>迫不及待的要看看实际例子了，不是么？<code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/margin/margin-top-vs-relative-top-2.htm\">再次验证一下top, right, bottom, left是孤独患者</a></p>\n<p>至此可以再次说明 <code>top, right, bottom, left</code> 真的和其上下文一毛钱关系都没有，绝对的孤单患者。</p>\n<p>所以 <code>margin</code> 和 <code>top, right, bottom, left</code> 分别要在什么场景使用，应该可以有考量的依据了，不是么？enjoy it.</p>\n<h2 id=\"似乎还漏了点啥\"><a href=\"#似乎还漏了点啥\" class=\"headerlink\" title=\"似乎还漏了点啥\"></a>似乎还漏了点啥</h2><p>差点就这么结篇了，想起还有点遗漏的地方。</p>\n<p>当position为relative时，如果top和bottom都是auto，则它们的计算值是0，right和left亦然；如果top和bottom其中一个为auto，则auto相当于另一个的负值，即top = -bottom，right和left亦然；如果top和bottom的值都不为auto，则忽略bottom，如果right和left的值都不为auto，则忽略right。</p>\n<p>好吧，不得不再写个例子：<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/margin/top-right-bottom-left.htm\">top, right, bottom, left详述</a></p>\n<p>至于margin，就留给大家思考一下也不错 ^_^</p>\n<p>enjoy it again.</p>\n<h2 id=\"可参考：\"><a href=\"#可参考：\" class=\"headerlink\" title=\"可参考：\"></a>可参考：</h2><ul>\n<li><a href=\"http://dev.w3.org/csswg/css-box/#the-margin-properties\">http://dev.w3.org/csswg/css-box/#the-margin-properties</a></li>\n<li><a href=\"http://dev.w3.org/csswg/css-position/#box-offsets-trbl\">http://dev.w3.org/csswg/css-position/#box-offsets-trbl</a></li>\n</ul>\n<h2 id=\"margin系列文章：\"><a href=\"#margin系列文章：\" class=\"headerlink\" title=\"margin系列文章：\"></a>margin系列文章：</h2><ul>\n<li><a href=\"/2013/12/31/css/margin系列之布局篇/\">margin系列之布局篇</a></li>\n<li><a href=\"/2013/12/20/css/margin系列之bug巡演（三）/\">margin系列之bug巡演（三）</a></li>\n<li><a href=\"/2013/12/17/css/margin系列之bug巡演（二）/\">margin系列之bug巡演（二）</a></li>\n<li><a href=\"/2013/12/14/css/margin系列之内秀篇（二）/\">margin系列之内秀篇（二）</a></li>\n<li><a href=\"/2013/12/10/css/margin系列之bug巡演/\">margin系列之bug巡演</a></li>\n<li><a href=\"/2013/12/06/css/margin系列之内秀篇/\">margin系列之内秀篇</a></li>\n<li><a href=\"/2013/12/04/css/margin系列之外边距折叠/\">margin系列之外边距折叠</a></li>\n<li><a href=\"/2013/12/02/css/margin系列之与相对偏移的异同/\">margin系列之与相对偏移的异同</a></li>\n<li><a href=\"/2013/11/30/css/margin系列之百分比/\">margin系列之百分比</a></li>\n<li><a href=\"/2013/11/29/css/margin系列之keyword%20auto/\">margin系列之keyword auto</a></li>\n</ul>"},{"title":"你需要了解的z-index世界","date":"2014-01-21T03:15:00.000Z","author":"xiupi酱","_content":"\n## z-index的重要性\n\n在我看来，`z-index` 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。\n\n在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。\n\n## W3C这样描述\n\n每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 \"Z轴\" 上层层相叠、排列。元素在 \"Z轴\" 方向上的呈现顺序，由层叠上下文和层叠级别决定。\n\n在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 \"Z轴\" 上的呈现顺序。\n\n同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。\n\n不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。\n\n<!--more-->\n\n## z-index语法和应用\n\n    z-index: auto | <integer>\n\n`z-index` 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。\n\n需要注意的是 `z-index` 虽然很给力，却只能应用于定位元素（即设置了 `position` 属性为非 `static` 值），其它情况下，`z-index` 将被忽略。\n\n对于定位元素而言，`z-index` 意味着：\n\n* 确定该元素在当前层叠上下文中的层叠级别。\n* 确定该元素是否创建了一个新的局部层叠上下文。\n\n## 创建层叠上下文\n\n在规范中说明：当某个元素的 `z-index` 未显式定义或者被指定为 `auto` 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 `DEMO1`: [z-index与创建层叠上下文](http://demo.doyoe.com/css/z-index/stacking-context.htm)\n\n值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 `z-index` 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。\n\n## 深入浅出\n\n某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。\n\n### HTML\n\n    <div class=\"a\">\n        ...\n        <div class=\"tips\">我是一个简陋的浮层提示</div>\n    </div>\n    <div class=\"b\">\n        ...\n    </div>\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n\n如上HTML/CSS代码，很显然，浮层 `tips` 将可以覆盖在其父级元素 `a` 的兄弟元素 `b` 之上。\n\n于是你的意图得到实现，效果如下 `图一`：\n\n![create stacking context](http://demo.doyoe.com/css/z-index/images/create-stacking-context.png)（图一）\n\n这是具体的实现例子  `DEMO2`: [z-index实现元素层叠](http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm)。\n\n不过很显然，从 `DEMO2` 来看，你依然无法准确的判断出在各浏览器下，`tips` 能盖住 `b` 是因为其父级的定位还是本身的定位。\n\n但是我们可以做这样一个测试，我们让 `b` 也拥有定位，Code如下：\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n    .b{position:relative;}\n\n这段代码run完之后，就比较纠结了，你能得到的效果将会如下 `图二`：\n\n![IE6/7 create stacking context bug](http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png)（图二）\n\n当然要给出具体实现 `DEMO3`: [验证创建局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm)。\n\n首先，我们来解读一下这个例子：因为 `a` 和 `b` 都是 `relative` 且没有定义 `z-index` （等同于z-index:auto），根据后来居上的原则，此时 `b` 的层叠级别是要高于 `a` 的，意思就是说 `a` 是无法遮住 `b` 的。不过从 `DEMO3` 中，我们看到 `a` 的子元素 `tips` 遮住了 `b`，这就表示 `tips` 能越过它，所以可以判断出 `a` 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。\n\n不过这是在非IE6/7之下结果。在IE6/7下，我们看到 `tips` 并没能遮住 `b`，也就是说 `tips` 无法越过父级，因为 `a` 创建了新的局部层叠上下文，而 `a` 的层叠级别又比 `b` 低，所以 `tips` 无法遮住 `b`，这也就是在IE6/7下常出现覆盖Bug的根源。\n\n结合 `DEMO2` 和 `DEMO3`，你能很肯定的得出以下结论：\n\n* 当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文\n* 子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中\n\n在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 `b` 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 `z-index` 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。\n\n所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 `z-index` 值，将可避免出现创建新局部层叠上下文差异。\n\n如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。\n\n## opacity与层叠上下文\n\n我们知道 `opacity` 属性是用来设置元素不透明度的。但可能知道 `opacity` 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：\n\n* 当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较\n* 当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素\n\n简单来说，当一个普通的元素定义了 `opacity` 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 `z-index` 的情况，唯一的区别是没有显式定义 `z-index` 的定位元素不会产生局部层叠上下文，而定义了 `opacity` 值小于1的元素会产生新的局部层叠上下文。\n\n### opacity猜想\n\n假定我们有 `a`, `b`, `c` 三个元素，它们相互层层覆盖在一起，如果这时将 `a` 元素定义为 `opacity:.8`，你知道结果会怎样吗？\n\n### HTML\n\n    <div class=\"a\">a</div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{margin:-70px 0 0 30px;background:#090;}\n    .c{margin:-70px 0 0 60px;background:#f00;}\n\n如果你看明白了我对于 `opacity` 与层叠上下文的描述，相信你可以猜到结果，是的，`a` 元素将会覆盖 `b` 和 `c` 元素，虽然它在HTML文档中出现在 `b` 和 `c` 之前，且不是定位元素。\n\n必须看看具体的示例不是么？`DEMO4`: [opacity与局部层叠上下文猜想](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm)。\n\n如果我们将 `b` 和 `c` 设置为定位元素，又将会如何呢？\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n\n不急，我们可以接着看示例 `DEMO5`: [opacity与局部层叠上下文猜想2](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm)。\n\n从 `DEMO4` 和 `DEMO5` 两例，我们可以验证：当一个普通元素定义了 `opacity` 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 `z-index` 的定位元素一样。\n\n### opacity创建局部层叠上下文\n\n与未显式定义 `z-index` 的定位元素唯一不同的是 `opacity` 值小于1的元素会创建局部层叠上下文。\n\n创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：\n\n### HTML\n\n    <div class=\"a\">a\n        <div class=\"d\">d</div>\n    </div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c,.d{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n    .d{position:absolute;z-index:99;height:50px;background:#090;}\n\n你可以先看看具体结果 `DEMO6`: [opacity创建新局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm)。\n\n你会发现虽然 `a` 的子元素 `d` 将 `z-index` 定义为99，但 `d` 仍然无法遮住 `b` 和 `c` 元素，这是因为 `a` 创建了新的局部层叠上下文，`d` 元素无法超越父级。\n\n需要注意的是，此时就算 `a` 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 `opacity:.8`。\n\n按照我们前文所说，如果 `a` 没有定义 `opacity:.8` ，但却像 `b` 和 `c` 元素一样设置了 `relative`，那么其子元素 `d` 将可以覆盖 `b` 和 `c`，至于这个例子就不再奉上了，大家随便写个测试一下即可。\n\n## 图文替换\n\n上述都是理论性的东西，相对枯燥，来个实际点的应用场景。\n\n我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 `z-index` 负值的方案，有一些明显的优势：\n\n* 无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；\n* 没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；\n* 不像display:none方案那样有SEO欺骗嫌疑；\n* 当图片加载失败时，可以显示文字；\n* and etc...\n\n先来看看一个图文替换的例子 `DEMO7`: [图文替换实例](http://demo.doyoe.com/css/z-index/back-top.htm)。\n\n在不同的网络环境下，它的表现如下 `图三`：\n\n![back top](http://demo.doyoe.com/css/z-index/images/back-top.png)（图三）\n\n具体的Code很简单：\n\n### HTML\n\n    <a href=\"#top\" title=\"回到顶部\"><span>TOP▲</span></a>\n\n### CSS\n\n    a,a span{display:inline-block;width:38px;height:38px;}\n    a{background:url(images/ico.png) no-repeat;}\n    a:hover{background-position:0 -39px;color:#fff;}\n    a span{position:relative;z-index:-1;background-color:#eee;}\n    a:hover span{background-color:#999;}\n\n你会发现我们将 span 设置为了 `z-index:-1`，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。\n\n很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。","source":"_posts/前端/你需要了解的z-index世界.md","raw":"title: 你需要了解的z-index世界\ndate: 2014-01-21 11:15:00\ncategories: 前端\nauthor: xiupi酱\ntags: [z-index, w3c, css, 层叠上下文]\n---\n\n## z-index的重要性\n\n在我看来，`z-index` 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。\n\n在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。\n\n## W3C这样描述\n\n每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 \"Z轴\" 上层层相叠、排列。元素在 \"Z轴\" 方向上的呈现顺序，由层叠上下文和层叠级别决定。\n\n在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 \"Z轴\" 上的呈现顺序。\n\n同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。\n\n不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。\n\n<!--more-->\n\n## z-index语法和应用\n\n    z-index: auto | <integer>\n\n`z-index` 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。\n\n需要注意的是 `z-index` 虽然很给力，却只能应用于定位元素（即设置了 `position` 属性为非 `static` 值），其它情况下，`z-index` 将被忽略。\n\n对于定位元素而言，`z-index` 意味着：\n\n* 确定该元素在当前层叠上下文中的层叠级别。\n* 确定该元素是否创建了一个新的局部层叠上下文。\n\n## 创建层叠上下文\n\n在规范中说明：当某个元素的 `z-index` 未显式定义或者被指定为 `auto` 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 `DEMO1`: [z-index与创建层叠上下文](http://demo.doyoe.com/css/z-index/stacking-context.htm)\n\n值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 `z-index` 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。\n\n## 深入浅出\n\n某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。\n\n### HTML\n\n    <div class=\"a\">\n        ...\n        <div class=\"tips\">我是一个简陋的浮层提示</div>\n    </div>\n    <div class=\"b\">\n        ...\n    </div>\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n\n如上HTML/CSS代码，很显然，浮层 `tips` 将可以覆盖在其父级元素 `a` 的兄弟元素 `b` 之上。\n\n于是你的意图得到实现，效果如下 `图一`：\n\n![create stacking context](http://demo.doyoe.com/css/z-index/images/create-stacking-context.png)（图一）\n\n这是具体的实现例子  `DEMO2`: [z-index实现元素层叠](http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm)。\n\n不过很显然，从 `DEMO2` 来看，你依然无法准确的判断出在各浏览器下，`tips` 能盖住 `b` 是因为其父级的定位还是本身的定位。\n\n但是我们可以做这样一个测试，我们让 `b` 也拥有定位，Code如下：\n\n### CSS\n\n    .a{position:relative;}\n    .tips{position:absolute;z-index:99;}\n    .b{position:relative;}\n\n这段代码run完之后，就比较纠结了，你能得到的效果将会如下 `图二`：\n\n![IE6/7 create stacking context bug](http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png)（图二）\n\n当然要给出具体实现 `DEMO3`: [验证创建局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm)。\n\n首先，我们来解读一下这个例子：因为 `a` 和 `b` 都是 `relative` 且没有定义 `z-index` （等同于z-index:auto），根据后来居上的原则，此时 `b` 的层叠级别是要高于 `a` 的，意思就是说 `a` 是无法遮住 `b` 的。不过从 `DEMO3` 中，我们看到 `a` 的子元素 `tips` 遮住了 `b`，这就表示 `tips` 能越过它，所以可以判断出 `a` 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。\n\n不过这是在非IE6/7之下结果。在IE6/7下，我们看到 `tips` 并没能遮住 `b`，也就是说 `tips` 无法越过父级，因为 `a` 创建了新的局部层叠上下文，而 `a` 的层叠级别又比 `b` 低，所以 `tips` 无法遮住 `b`，这也就是在IE6/7下常出现覆盖Bug的根源。\n\n结合 `DEMO2` 和 `DEMO3`，你能很肯定的得出以下结论：\n\n* 当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文\n* 子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中\n\n在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 `b` 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 `z-index` 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。\n\n所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 `z-index` 值，将可避免出现创建新局部层叠上下文差异。\n\n如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。\n\n## opacity与层叠上下文\n\n我们知道 `opacity` 属性是用来设置元素不透明度的。但可能知道 `opacity` 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：\n\n* 当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较\n* 当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素\n\n简单来说，当一个普通的元素定义了 `opacity` 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 `z-index` 的情况，唯一的区别是没有显式定义 `z-index` 的定位元素不会产生局部层叠上下文，而定义了 `opacity` 值小于1的元素会产生新的局部层叠上下文。\n\n### opacity猜想\n\n假定我们有 `a`, `b`, `c` 三个元素，它们相互层层覆盖在一起，如果这时将 `a` 元素定义为 `opacity:.8`，你知道结果会怎样吗？\n\n### HTML\n\n    <div class=\"a\">a</div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{margin:-70px 0 0 30px;background:#090;}\n    .c{margin:-70px 0 0 60px;background:#f00;}\n\n如果你看明白了我对于 `opacity` 与层叠上下文的描述，相信你可以猜到结果，是的，`a` 元素将会覆盖 `b` 和 `c` 元素，虽然它在HTML文档中出现在 `b` 和 `c` 之前，且不是定位元素。\n\n必须看看具体的示例不是么？`DEMO4`: [opacity与局部层叠上下文猜想](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm)。\n\n如果我们将 `b` 和 `c` 设置为定位元素，又将会如何呢？\n\n### CSS\n\n    .a,.b,.c{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n\n不急，我们可以接着看示例 `DEMO5`: [opacity与局部层叠上下文猜想2](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm)。\n\n从 `DEMO4` 和 `DEMO5` 两例，我们可以验证：当一个普通元素定义了 `opacity` 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 `z-index` 的定位元素一样。\n\n### opacity创建局部层叠上下文\n\n与未显式定义 `z-index` 的定位元素唯一不同的是 `opacity` 值小于1的元素会创建局部层叠上下文。\n\n创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：\n\n### HTML\n\n    <div class=\"a\">a\n        <div class=\"d\">d</div>\n    </div>\n    <div class=\"b\">b</div>\n    <div class=\"c\">c</div>\n\n### CSS\n\n    .a,.b,.c,.d{width:100px;height:100px;}\n    .a{opacity:.8;background:#999;}\n    .b{position:relative;margin:-70px 0 0 30px;background:#090;}\n    .c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n    .d{position:absolute;z-index:99;height:50px;background:#090;}\n\n你可以先看看具体结果 `DEMO6`: [opacity创建新局部层叠上下文](http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm)。\n\n你会发现虽然 `a` 的子元素 `d` 将 `z-index` 定义为99，但 `d` 仍然无法遮住 `b` 和 `c` 元素，这是因为 `a` 创建了新的局部层叠上下文，`d` 元素无法超越父级。\n\n需要注意的是，此时就算 `a` 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 `opacity:.8`。\n\n按照我们前文所说，如果 `a` 没有定义 `opacity:.8` ，但却像 `b` 和 `c` 元素一样设置了 `relative`，那么其子元素 `d` 将可以覆盖 `b` 和 `c`，至于这个例子就不再奉上了，大家随便写个测试一下即可。\n\n## 图文替换\n\n上述都是理论性的东西，相对枯燥，来个实际点的应用场景。\n\n我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 `z-index` 负值的方案，有一些明显的优势：\n\n* 无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；\n* 没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；\n* 不像display:none方案那样有SEO欺骗嫌疑；\n* 当图片加载失败时，可以显示文字；\n* and etc...\n\n先来看看一个图文替换的例子 `DEMO7`: [图文替换实例](http://demo.doyoe.com/css/z-index/back-top.htm)。\n\n在不同的网络环境下，它的表现如下 `图三`：\n\n![back top](http://demo.doyoe.com/css/z-index/images/back-top.png)（图三）\n\n具体的Code很简单：\n\n### HTML\n\n    <a href=\"#top\" title=\"回到顶部\"><span>TOP▲</span></a>\n\n### CSS\n\n    a,a span{display:inline-block;width:38px;height:38px;}\n    a{background:url(images/ico.png) no-repeat;}\n    a:hover{background-position:0 -39px;color:#fff;}\n    a span{position:relative;z-index:-1;background-color:#eee;}\n    a:hover span{background-color:#999;}\n\n你会发现我们将 span 设置为了 `z-index:-1`，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。\n\n很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。","slug":"前端/你需要了解的z-index世界","published":1,"updated":"2016-09-06T19:11:31.224Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vpm000alsvf0c82uys0","content":"<h2 id=\"z-index的重要性\"><a href=\"#z-index的重要性\" class=\"headerlink\" title=\"z-index的重要性\"></a>z-index的重要性</h2><p>在我看来，<code>z-index</code> 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。</p>\n<p>在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。</p>\n<h2 id=\"W3C这样描述\"><a href=\"#W3C这样描述\" class=\"headerlink\" title=\"W3C这样描述\"></a>W3C这样描述</h2><p>每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 “Z轴” 上层层相叠、排列。元素在 “Z轴” 方向上的呈现顺序，由层叠上下文和层叠级别决定。</p>\n<p>在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 “Z轴” 上的呈现顺序。</p>\n<p>同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。</p>\n<p>不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。</p>\n<a id=\"more\"></a>\n<h2 id=\"z-index语法和应用\"><a href=\"#z-index语法和应用\" class=\"headerlink\" title=\"z-index语法和应用\"></a>z-index语法和应用</h2><pre><code>z-index: auto | &lt;integer&gt;\n</code></pre><p><code>z-index</code> 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。</p>\n<p>需要注意的是 <code>z-index</code> 虽然很给力，却只能应用于定位元素（即设置了 <code>position</code> 属性为非 <code>static</code> 值），其它情况下，<code>z-index</code> 将被忽略。</p>\n<p>对于定位元素而言，<code>z-index</code> 意味着：</p>\n<ul>\n<li>确定该元素在当前层叠上下文中的层叠级别。</li>\n<li>确定该元素是否创建了一个新的局部层叠上下文。</li>\n</ul>\n<h2 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h2><p>在规范中说明：当某个元素的 <code>z-index</code> 未显式定义或者被指定为 <code>auto</code> 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/z-index/stacking-context.htm\" target=\"_blank\" rel=\"external\">z-index与创建层叠上下文</a></p>\n<p>值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 <code>z-index</code> 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。</p>\n<h2 id=\"深入浅出\"><a href=\"#深入浅出\" class=\"headerlink\" title=\"深入浅出\"></a>深入浅出</h2><p>某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;\n    ...\n    &lt;div class=&quot;tips&quot;&gt;我是一个简陋的浮层提示&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;\n    ...\n&lt;/div&gt;\n</code></pre><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a{position:relative;}\n.tips{position:absolute;z-index:99;}\n</code></pre><p>如上HTML/CSS代码，很显然，浮层 <code>tips</code> 将可以覆盖在其父级元素 <code>a</code> 的兄弟元素 <code>b</code> 之上。</p>\n<p>于是你的意图得到实现，效果如下 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context.png\" alt=\"create stacking context\">（图一）</p>\n<p>这是具体的实现例子  <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm\" target=\"_blank\" rel=\"external\">z-index实现元素层叠</a>。</p>\n<p>不过很显然，从 <code>DEMO2</code> 来看，你依然无法准确的判断出在各浏览器下，<code>tips</code> 能盖住 <code>b</code> 是因为其父级的定位还是本身的定位。</p>\n<p>但是我们可以做这样一个测试，我们让 <code>b</code> 也拥有定位，Code如下：</p>\n<h3 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a{position:relative;}\n.tips{position:absolute;z-index:99;}\n.b{position:relative;}\n</code></pre><p>这段代码run完之后，就比较纠结了，你能得到的效果将会如下 <code>图二</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png\" alt=\"IE6/7 create stacking context bug\">（图二）</p>\n<p>当然要给出具体实现 <code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm\" target=\"_blank\" rel=\"external\">验证创建局部层叠上下文</a>。</p>\n<p>首先，我们来解读一下这个例子：因为 <code>a</code> 和 <code>b</code> 都是 <code>relative</code> 且没有定义 <code>z-index</code> （等同于z-index:auto），根据后来居上的原则，此时 <code>b</code> 的层叠级别是要高于 <code>a</code> 的，意思就是说 <code>a</code> 是无法遮住 <code>b</code> 的。不过从 <code>DEMO3</code> 中，我们看到 <code>a</code> 的子元素 <code>tips</code> 遮住了 <code>b</code>，这就表示 <code>tips</code> 能越过它，所以可以判断出 <code>a</code> 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。</p>\n<p>不过这是在非IE6/7之下结果。在IE6/7下，我们看到 <code>tips</code> 并没能遮住 <code>b</code>，也就是说 <code>tips</code> 无法越过父级，因为 <code>a</code> 创建了新的局部层叠上下文，而 <code>a</code> 的层叠级别又比 <code>b</code> 低，所以 <code>tips</code> 无法遮住 <code>b</code>，这也就是在IE6/7下常出现覆盖Bug的根源。</p>\n<p>结合 <code>DEMO2</code> 和 <code>DEMO3</code>，你能很肯定的得出以下结论：</p>\n<ul>\n<li>当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文</li>\n<li>子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中</li>\n</ul>\n<p>在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 <code>b</code> 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 <code>z-index</code> 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。</p>\n<p>所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 <code>z-index</code> 值，将可避免出现创建新局部层叠上下文差异。</p>\n<p>如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。</p>\n<h2 id=\"opacity与层叠上下文\"><a href=\"#opacity与层叠上下文\" class=\"headerlink\" title=\"opacity与层叠上下文\"></a>opacity与层叠上下文</h2><p>我们知道 <code>opacity</code> 属性是用来设置元素不透明度的。但可能知道 <code>opacity</code> 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：</p>\n<ul>\n<li>当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较</li>\n<li>当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素</li>\n</ul>\n<p>简单来说，当一个普通的元素定义了 <code>opacity</code> 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 <code>z-index</code> 的情况，唯一的区别是没有显式定义 <code>z-index</code> 的定位元素不会产生局部层叠上下文，而定义了 <code>opacity</code> 值小于1的元素会产生新的局部层叠上下文。</p>\n<h3 id=\"opacity猜想\"><a href=\"#opacity猜想\" class=\"headerlink\" title=\"opacity猜想\"></a>opacity猜想</h3><p>假定我们有 <code>a</code>, <code>b</code>, <code>c</code> 三个元素，它们相互层层覆盖在一起，如果这时将 <code>a</code> 元素定义为 <code>opacity:.8</code>，你知道结果会怎样吗？</p>\n<h3 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;a&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;b&lt;/div&gt;\n&lt;div class=&quot;c&quot;&gt;c&lt;/div&gt;\n</code></pre><h3 id=\"CSS-2\"><a href=\"#CSS-2\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{margin:-70px 0 0 30px;background:#090;}\n.c{margin:-70px 0 0 60px;background:#f00;}\n</code></pre><p>如果你看明白了我对于 <code>opacity</code> 与层叠上下文的描述，相信你可以猜到结果，是的，<code>a</code> 元素将会覆盖 <code>b</code> 和 <code>c</code> 元素，虽然它在HTML文档中出现在 <code>b</code> 和 <code>c</code> 之前，且不是定位元素。</p>\n<p>必须看看具体的示例不是么？<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm\" target=\"_blank\" rel=\"external\">opacity与局部层叠上下文猜想</a>。</p>\n<p>如果我们将 <code>b</code> 和 <code>c</code> 设置为定位元素，又将会如何呢？</p>\n<h3 id=\"CSS-3\"><a href=\"#CSS-3\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{position:relative;margin:-70px 0 0 30px;background:#090;}\n.c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n</code></pre><p>不急，我们可以接着看示例 <code>DEMO5</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm\" target=\"_blank\" rel=\"external\">opacity与局部层叠上下文猜想2</a>。</p>\n<p>从 <code>DEMO4</code> 和 <code>DEMO5</code> 两例，我们可以验证：当一个普通元素定义了 <code>opacity</code> 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 <code>z-index</code> 的定位元素一样。</p>\n<h3 id=\"opacity创建局部层叠上下文\"><a href=\"#opacity创建局部层叠上下文\" class=\"headerlink\" title=\"opacity创建局部层叠上下文\"></a>opacity创建局部层叠上下文</h3><p>与未显式定义 <code>z-index</code> 的定位元素唯一不同的是 <code>opacity</code> 值小于1的元素会创建局部层叠上下文。</p>\n<p>创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：</p>\n<h3 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;a\n    &lt;div class=&quot;d&quot;&gt;d&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;b&lt;/div&gt;\n&lt;div class=&quot;c&quot;&gt;c&lt;/div&gt;\n</code></pre><h3 id=\"CSS-4\"><a href=\"#CSS-4\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c,.d{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{position:relative;margin:-70px 0 0 30px;background:#090;}\n.c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n.d{position:absolute;z-index:99;height:50px;background:#090;}\n</code></pre><p>你可以先看看具体结果 <code>DEMO6</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm\" target=\"_blank\" rel=\"external\">opacity创建新局部层叠上下文</a>。</p>\n<p>你会发现虽然 <code>a</code> 的子元素 <code>d</code> 将 <code>z-index</code> 定义为99，但 <code>d</code> 仍然无法遮住 <code>b</code> 和 <code>c</code> 元素，这是因为 <code>a</code> 创建了新的局部层叠上下文，<code>d</code> 元素无法超越父级。</p>\n<p>需要注意的是，此时就算 <code>a</code> 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 <code>opacity:.8</code>。</p>\n<p>按照我们前文所说，如果 <code>a</code> 没有定义 <code>opacity:.8</code> ，但却像 <code>b</code> 和 <code>c</code> 元素一样设置了 <code>relative</code>，那么其子元素 <code>d</code> 将可以覆盖 <code>b</code> 和 <code>c</code>，至于这个例子就不再奉上了，大家随便写个测试一下即可。</p>\n<h2 id=\"图文替换\"><a href=\"#图文替换\" class=\"headerlink\" title=\"图文替换\"></a>图文替换</h2><p>上述都是理论性的东西，相对枯燥，来个实际点的应用场景。</p>\n<p>我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 <code>z-index</code> 负值的方案，有一些明显的优势：</p>\n<ul>\n<li>无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；</li>\n<li>没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；</li>\n<li>不像display:none方案那样有SEO欺骗嫌疑；</li>\n<li>当图片加载失败时，可以显示文字；</li>\n<li>and etc…</li>\n</ul>\n<p>先来看看一个图文替换的例子 <code>DEMO7</code>: <a href=\"http://demo.doyoe.com/css/z-index/back-top.htm\" target=\"_blank\" rel=\"external\">图文替换实例</a>。</p>\n<p>在不同的网络环境下，它的表现如下 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/back-top.png\" alt=\"back top\">（图三）</p>\n<p>具体的Code很简单：</p>\n<h3 id=\"HTML-3\"><a href=\"#HTML-3\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;a href=&quot;#top&quot; title=&quot;回到顶部&quot;&gt;&lt;span&gt;TOP▲&lt;/span&gt;&lt;/a&gt;\n</code></pre><h3 id=\"CSS-5\"><a href=\"#CSS-5\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>a,a span{display:inline-block;width:38px;height:38px;}\na{background:url(images/ico.png) no-repeat;}\na:hover{background-position:0 -39px;color:#fff;}\na span{position:relative;z-index:-1;background-color:#eee;}\na:hover span{background-color:#999;}\n</code></pre><p>你会发现我们将 span 设置为了 <code>z-index:-1</code>，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。</p>\n<p>很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。</p>\n","excerpt":"<h2 id=\"z-index的重要性\"><a href=\"#z-index的重要性\" class=\"headerlink\" title=\"z-index的重要性\"></a>z-index的重要性</h2><p>在我看来，<code>z-index</code> 给了我们日常工作中以极大的帮助，我们用它来定义元素的层叠级别（stack level）。受益于它，你能做Popup, DropDown, Tips, 图文替换等等。</p>\n<p>在开始本篇之前，或许我们要先了解一下关于z-index的基本信息。</p>\n<h2 id=\"W3C这样描述\"><a href=\"#W3C这样描述\" class=\"headerlink\" title=\"W3C这样描述\"></a>W3C这样描述</h2><p>每个元素都具有三维空间位置，除了水平和垂直位置外，还能在 “Z轴” 上层层相叠、排列。元素在 “Z轴” 方向上的呈现顺序，由层叠上下文和层叠级别决定。</p>\n<p>在文档中，每个元素仅属于一个层叠上下文。元素的层叠级别为整型，它描述了在相同层叠上下文中元素在 “Z轴” 上的呈现顺序。</p>\n<p>同一层叠上下文中，层叠级别大的显示在上，层叠级别小的显示在下，相同层叠级别时，遵循后来居上的原则，即其在HTML文档中的顺序。</p>\n<p>不同层叠上下文中，元素呈现顺序以父级层叠上下文的层叠级别来决定呈现的先后顺序，与自身的层叠级别无关。</p>","more":"<h2 id=\"z-index语法和应用\"><a href=\"#z-index语法和应用\" class=\"headerlink\" title=\"z-index语法和应用\"></a>z-index语法和应用</h2><pre><code>z-index: auto | &lt;integer&gt;\n</code></pre><p><code>z-index</code> 接受的属性值为：关键字auto和整数，整数可以是负值（Firefox2.0及之前不支持负值）。</p>\n<p>需要注意的是 <code>z-index</code> 虽然很给力，却只能应用于定位元素（即设置了 <code>position</code> 属性为非 <code>static</code> 值），其它情况下，<code>z-index</code> 将被忽略。</p>\n<p>对于定位元素而言，<code>z-index</code> 意味着：</p>\n<ul>\n<li>确定该元素在当前层叠上下文中的层叠级别。</li>\n<li>确定该元素是否创建了一个新的局部层叠上下文。</li>\n</ul>\n<h2 id=\"创建层叠上下文\"><a href=\"#创建层叠上下文\" class=\"headerlink\" title=\"创建层叠上下文\"></a>创建层叠上下文</h2><p>在规范中说明：当某个元素的 <code>z-index</code> 未显式定义或者被指定为 <code>auto</code> 时，该元素不会产生新的局部层叠上下文。也就是说它可以和兄弟，祖先，后辈元素处在同一个堆叠上下文中，它们被放在一起比较层叠级别，儿子可以盖住祖先，父亲也可以盖住儿子，儿子甚至可以越过祖先，盖住祖先的兄弟，在层叠上下文中，它们是并级的关系。来看这样一个例子 <code>DEMO1</code>: <a href=\"http://demo.doyoe.com/css/z-index/stacking-context.htm\">z-index与创建层叠上下文</a></p>\n<p>值得高兴的是，大部分浏览器都实现了这个特性；不过在IE6/7下，不论 <code>z-index</code> 值是否被显式定义，都将产生新的局部层叠上下文，也就是说子元素不可以越过是定位元素的父亲，子元素都处在新创建的局部层叠上下文中，只能在内部进行层叠级别的比较。</p>\n<h2 id=\"深入浅出\"><a href=\"#深入浅出\" class=\"headerlink\" title=\"深入浅出\"></a>深入浅出</h2><p>某区域内有个浮层提示或者下拉菜单，于是可能需要遮住该区域之下的区域。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;\n    ...\n    &lt;div class=&quot;tips&quot;&gt;我是一个简陋的浮层提示&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;\n    ...\n&lt;/div&gt;\n</code></pre><h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a{position:relative;}\n.tips{position:absolute;z-index:99;}\n</code></pre><p>如上HTML/CSS代码，很显然，浮层 <code>tips</code> 将可以覆盖在其父级元素 <code>a</code> 的兄弟元素 <code>b</code> 之上。</p>\n<p>于是你的意图得到实现，效果如下 <code>图一</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context.png\" alt=\"create stacking context\">（图一）</p>\n<p>这是具体的实现例子  <code>DEMO2</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-normal.htm\">z-index实现元素层叠</a>。</p>\n<p>不过很显然，从 <code>DEMO2</code> 来看，你依然无法准确的判断出在各浏览器下，<code>tips</code> 能盖住 <code>b</code> 是因为其父级的定位还是本身的定位。</p>\n<p>但是我们可以做这样一个测试，我们让 <code>b</code> 也拥有定位，Code如下：</p>\n<h3 id=\"CSS-1\"><a href=\"#CSS-1\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a{position:relative;}\n.tips{position:absolute;z-index:99;}\n.b{position:relative;}\n</code></pre><p>这段代码run完之后，就比较纠结了，你能得到的效果将会如下 <code>图二</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/create-stacking-context-ie6-7-bug.png\" alt=\"IE6/7 create stacking context bug\">（图二）</p>\n<p>当然要给出具体实现 <code>DEMO3</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-ie6-7-bug.htm\">验证创建局部层叠上下文</a>。</p>\n<p>首先，我们来解读一下这个例子：因为 <code>a</code> 和 <code>b</code> 都是 <code>relative</code> 且没有定义 <code>z-index</code> （等同于z-index:auto），根据后来居上的原则，此时 <code>b</code> 的层叠级别是要高于 <code>a</code> 的，意思就是说 <code>a</code> 是无法遮住 <code>b</code> 的。不过从 <code>DEMO3</code> 中，我们看到 <code>a</code> 的子元素 <code>tips</code> 遮住了 <code>b</code>，这就表示 <code>tips</code> 能越过它，所以可以判断出 <code>a</code> 没有创建新的局部层叠上下文。很明显，这是完全吻合标准对此的定义。</p>\n<p>不过这是在非IE6/7之下结果。在IE6/7下，我们看到 <code>tips</code> 并没能遮住 <code>b</code>，也就是说 <code>tips</code> 无法越过父级，因为 <code>a</code> 创建了新的局部层叠上下文，而 <code>a</code> 的层叠级别又比 <code>b</code> 低，所以 <code>tips</code> 无法遮住 <code>b</code>，这也就是在IE6/7下常出现覆盖Bug的根源。</p>\n<p>结合 <code>DEMO2</code> 和 <code>DEMO3</code>，你能很肯定的得出以下结论：</p>\n<ul>\n<li>当定位元素没有显式定义z-index值时，不会创建新的局部层叠上下文</li>\n<li>子元素有可能和祖先的兄弟或者祖先兄弟的子元素处在同一个层叠上下文中</li>\n</ul>\n<p>在实际工作中，有些情况可能是你没注意或者已然存在的。比如你事先可能并不知道 <code>b</code> 也是定位元素，或者由于某些原因，你需要将其设置为定位元素，于是可能出现各种兼容问题。如果你不了解 <code>z-index</code> 是如何创建局部层叠上下文，且又没注意到IE6/7的实现错误，那么处理起这样的问题将会让你深陷泥潭。</p>\n<p>所以在实际的场景中，如果是为了相互覆盖而设置为定位，那么显式的定义 <code>z-index</code> 值，将可避免出现创建新局部层叠上下文差异。</p>\n<p>如果需要越过祖先和其它区块内部元素进行相互层叠，那么考虑IE6/7的情况，也应该尽量避免给父级元素进定位。</p>\n<h2 id=\"opacity与层叠上下文\"><a href=\"#opacity与层叠上下文\" class=\"headerlink\" title=\"opacity与层叠上下文\"></a>opacity与层叠上下文</h2><p>我们知道 <code>opacity</code> 属性是用来设置元素不透明度的。但可能知道 <code>opacity</code> 和层叠上下文有关的不多，不过没关系，这里我们简单聊聊这个话题，有两点必须注意：</p>\n<ul>\n<li>当opacity值小于1时，该元素会创建新的局部层叠上下文，也就是说它可以和定位元素进行层叠层别比较</li>\n<li>当opacity值小于1时，该元素拥有层叠级别且相当于z-index:0或auto，但不能定义 z-index ，除非本身是定位元素</li>\n</ul>\n<p>简单来说，当一个普通的元素定义了 <code>opacity</code> 的值小于1时（比如 opacity:.5），那么该元素的层叠级别将会高于普通元素，其效果类同于定位元素没有显式定义 <code>z-index</code> 的情况，唯一的区别是没有显式定义 <code>z-index</code> 的定位元素不会产生局部层叠上下文，而定义了 <code>opacity</code> 值小于1的元素会产生新的局部层叠上下文。</p>\n<h3 id=\"opacity猜想\"><a href=\"#opacity猜想\" class=\"headerlink\" title=\"opacity猜想\"></a>opacity猜想</h3><p>假定我们有 <code>a</code>, <code>b</code>, <code>c</code> 三个元素，它们相互层层覆盖在一起，如果这时将 <code>a</code> 元素定义为 <code>opacity:.8</code>，你知道结果会怎样吗？</p>\n<h3 id=\"HTML-1\"><a href=\"#HTML-1\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;a&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;b&lt;/div&gt;\n&lt;div class=&quot;c&quot;&gt;c&lt;/div&gt;\n</code></pre><h3 id=\"CSS-2\"><a href=\"#CSS-2\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{margin:-70px 0 0 30px;background:#090;}\n.c{margin:-70px 0 0 60px;background:#f00;}\n</code></pre><p>如果你看明白了我对于 <code>opacity</code> 与层叠上下文的描述，相信你可以猜到结果，是的，<code>a</code> 元素将会覆盖 <code>b</code> 和 <code>c</code> 元素，虽然它在HTML文档中出现在 <code>b</code> 和 <code>c</code> 之前，且不是定位元素。</p>\n<p>必须看看具体的示例不是么？<code>DEMO4</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity.htm\">opacity与局部层叠上下文猜想</a>。</p>\n<p>如果我们将 <code>b</code> 和 <code>c</code> 设置为定位元素，又将会如何呢？</p>\n<h3 id=\"CSS-3\"><a href=\"#CSS-3\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{position:relative;margin:-70px 0 0 30px;background:#090;}\n.c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n</code></pre><p>不急，我们可以接着看示例 <code>DEMO5</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-2.htm\">opacity与局部层叠上下文猜想2</a>。</p>\n<p>从 <code>DEMO4</code> 和 <code>DEMO5</code> 两例，我们可以验证：当一个普通元素定义了 <code>opacity</code> 为小于1的值时，该元素将像定位元素一样拥有层叠级别，可以覆盖普通元素，并且其层叠级别与未显式定义 <code>z-index</code> 的定位元素一样。</p>\n<h3 id=\"opacity创建局部层叠上下文\"><a href=\"#opacity创建局部层叠上下文\" class=\"headerlink\" title=\"opacity创建局部层叠上下文\"></a>opacity创建局部层叠上下文</h3><p>与未显式定义 <code>z-index</code> 的定位元素唯一不同的是 <code>opacity</code> 值小于1的元素会创建局部层叠上下文。</p>\n<p>创建局部层叠上下文意味着什么，前文我们已经详述过。所以不再赘述，这里只给一个示例用以验证该特性。先奉上代码：</p>\n<h3 id=\"HTML-2\"><a href=\"#HTML-2\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;div class=&quot;a&quot;&gt;a\n    &lt;div class=&quot;d&quot;&gt;d&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;b&quot;&gt;b&lt;/div&gt;\n&lt;div class=&quot;c&quot;&gt;c&lt;/div&gt;\n</code></pre><h3 id=\"CSS-4\"><a href=\"#CSS-4\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>.a,.b,.c,.d{width:100px;height:100px;}\n.a{opacity:.8;background:#999;}\n.b{position:relative;margin:-70px 0 0 30px;background:#090;}\n.c{position:relative;margin:-70px 0 0 60px;background:#f00;}\n.d{position:absolute;z-index:99;height:50px;background:#090;}\n</code></pre><p>你可以先看看具体结果 <code>DEMO6</code>: <a href=\"http://demo.doyoe.com/css/z-index/create-stacking-context-by-opacity-3.htm\">opacity创建新局部层叠上下文</a>。</p>\n<p>你会发现虽然 <code>a</code> 的子元素 <code>d</code> 将 <code>z-index</code> 定义为99，但 <code>d</code> 仍然无法遮住 <code>b</code> 和 <code>c</code> 元素，这是因为 <code>a</code> 创建了新的局部层叠上下文，<code>d</code> 元素无法超越父级。</p>\n<p>需要注意的是，此时就算 <code>a</code> 元素变成了定位元素，也不能改变其会创建新局部层叠上下文的命运，因为他设置了 <code>opacity:.8</code>。</p>\n<p>按照我们前文所说，如果 <code>a</code> 没有定义 <code>opacity:.8</code> ，但却像 <code>b</code> 和 <code>c</code> 元素一样设置了 <code>relative</code>，那么其子元素 <code>d</code> 将可以覆盖 <code>b</code> 和 <code>c</code>，至于这个例子就不再奉上了，大家随便写个测试一下即可。</p>\n<h2 id=\"图文替换\"><a href=\"#图文替换\" class=\"headerlink\" title=\"图文替换\"></a>图文替换</h2><p>上述都是理论性的东西，相对枯燥，来个实际点的应用场景。</p>\n<p>我们聊聊图文替换的事，相对于使用较广的方案如：缩进正/负值（正/负text-indent）、超小字体、margin溢出、padding溢出、line-height溢出、透明字体、display:none、visibility:hidden等方案而言，使用 <code>z-index</code> 负值的方案，有一些明显的优势：</p>\n<ul>\n<li>无需考虑是否会有性能问题类同使用上述列举中的前几种方案（比如使用负缩进值-9999px，虽然此时文本被移到屏幕之外或者被裁减，但仍然会绘制一个宽9999px的盒子）；</li>\n<li>没有像类似超小字体和透明字体一样的方案会需要一些额外的hack；</li>\n<li>不像display:none方案那样有SEO欺骗嫌疑；</li>\n<li>当图片加载失败时，可以显示文字；</li>\n<li>and etc…</li>\n</ul>\n<p>先来看看一个图文替换的例子 <code>DEMO7</code>: <a href=\"http://demo.doyoe.com/css/z-index/back-top.htm\">图文替换实例</a>。</p>\n<p>在不同的网络环境下，它的表现如下 <code>图三</code>：</p>\n<p><img src=\"http://demo.doyoe.com/css/z-index/images/back-top.png\" alt=\"back top\">（图三）</p>\n<p>具体的Code很简单：</p>\n<h3 id=\"HTML-3\"><a href=\"#HTML-3\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><pre><code>&lt;a href=&quot;#top&quot; title=&quot;回到顶部&quot;&gt;&lt;span&gt;TOP▲&lt;/span&gt;&lt;/a&gt;\n</code></pre><h3 id=\"CSS-5\"><a href=\"#CSS-5\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><pre><code>a,a span{display:inline-block;width:38px;height:38px;}\na{background:url(images/ico.png) no-repeat;}\na:hover{background-position:0 -39px;color:#fff;}\na span{position:relative;z-index:-1;background-color:#eee;}\na:hover span{background-color:#999;}\n</code></pre><p>你会发现我们将 span 设置为了 <code>z-index:-1</code>，此时它的层叠级别将比正常的元素还要低，所以它可以被其父元素超链接a盖住，从而在图片正常载入时显示父元素的背景图，在网络环境不好图片载入有问题时，显示自身。</p>\n<p>很多时候，要实现一个需求可能有无数种解决方案，能够适应情况越多的方案毫无疑问会脱颖而出，这就要求我们可以去更多的思考，而不是更多的拷贝。</p>"},{"title":"置换和非置换元素","date":"2015-03-15T05:16:00.000Z","author":"xiupi酱","_content":"\n## 先进一个题外话\n\n在面试一个 `重构`（各大公司的叫法可能不太一样）时，我喜欢从一个点开始问，然后一直延展下去成为一条线，甚至是一个面，直到问到不会的地方，然后又换另外一个点。\n\n> 例如：我可能会说，能简单聊聊 `行内级元素` 和 `块级元素` 的区别吗。\n\n一般这时，候选人都会说到 `行内级元素` 不会换新行，而 `块级元素` 会格式化为块状，即换行。但也有些遗憾的方面（如：[混淆了块元素和块级元素，行内元素和行内级元素](/2015/03/09/css/视觉格式化模型中的各种框/#block-level-element)），当然这看起来似乎不是特别重要。\n\n> 这时我会继续问，`行内元素` 能够定义宽度和高度吗？\n\n不少候选人会说：**不能**\n\n> 我会继续问，说几个你熟悉的 `行内元素` 吧\n\n于是 `span`, `strong`, `em`, `ins`... 答案我还是比较满意的。\n\n> 我仍然会继续，`img` 是行内元素么？\n\n候选人这时通常会迟疑一下，可能意识到我接下来想问啥了，但还是会回答：**是**\n\n<!--more-->\n\n> 于是我会说，那 `img` 能定义宽度和高度么？\n\n有的候选人这时会犹豫，因为如果回答是，就会推翻他之前说的 `行内元素不能定义宽高`，如果回答不是，似乎又和他所熟知的经验不一致。但通常最后还是会回答：**能**\n\n> 那我就又得问，你之前不是说 `行内元素不能定义宽高` 吗？为什么 `img` 可以？\n\n到这里，候选人基本上不知道要怎么回答好了，最后可能会告诉我，**因为 `img` 是特殊元素**\n\n当然，虽然这么回答也不能说是错误的，但基本上也能知道候选人对这条线的基础的掌握程度了。\n\n但我希望听到的答案是通过解释置换元素相关的概念从而给出答案。\n\n## 什么是置换元素？\n\n一个 `内容` 不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。\n\n## 什么是非置换元素？\n\nw3c并没有给出明确的非置换元素的解释，但能确定的是除置换元素之外，所有的元素都是非置换元素。\n\n## 行内级置换和非置换元素的宽度定义\n\n对于行内级非置换元素，宽度设置是不适用的。\n\n对于行内级置换元素来说，其宽度的设置需遵循以下几点：\n\n* 若宽高的计算值都为 `auto` 且元素有固有宽度，则 `width` 的使用值为该固有宽度；\n> 典型的例子是：拥有默认宽高的 `input` 当宽度的计算值为auto时，则宽度使用值为其默认的固有宽度\n* 若宽度的计算值为 `auto` 且元素有固有宽度，则 `width` 的使用值为该固有宽度；\n> 例子同上\n* 若宽度的计算值为 `auto` 且高度有 `非auto` 的计算值，并且元素有固有宽高比，则 `width` 的使用值为 `高度使用值 * 固有宽高比`；\n> 典型的例子：`img` 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置\n* 除此之外，当 `width` 的计算值为 `auto` 时，则宽度的使用值为 `300px`\n> 典型的例子：比如iframe, canvas\n\n其它类型的置换元素，其宽度的定义都参照行内置换元素的定义。\n\n## 行内级置换和非置换元素的高度定义\n\n对于行内级非置换元素，高度设置是不适用的。\n\n对于行内级置换元素来说，其高度的设置需遵循以下几点：\n\n* 若宽高的计算值都为 `auto` 且元素有固有高度，则 `height` 的使用值为该固有高度；\n* 若高度的计算值为 `auto` 且元素有固有高度，则 `height` 的使用值为该固有高度；\n* 若高度的计算值为 `auto` 且宽度有 `非auto` 的计算值，并且元素有固有宽高比，则 `height` 的使用值为：`宽度使用值 / 固有宽高比`；\n* 若高度的计算值为 `auto` 且上述条件完全不符，则 `height` 的使用值 `不能大于150px`，且宽度不能大于长方形高度的2倍。\n\n其它类型的置换元素，其高度的定义都参照行内置换元素的定义。","source":"_posts/前端/置换和非置换元素.md","raw":"title: 置换和非置换元素\ndate: 2015-03-15 13:16:00\ncategories: 前端\nauthor: xiupi酱\ntags: [w3c, css, 视觉格式化模型, 非置换元素, 置换元素]\n---\n\n## 先进一个题外话\n\n在面试一个 `重构`（各大公司的叫法可能不太一样）时，我喜欢从一个点开始问，然后一直延展下去成为一条线，甚至是一个面，直到问到不会的地方，然后又换另外一个点。\n\n> 例如：我可能会说，能简单聊聊 `行内级元素` 和 `块级元素` 的区别吗。\n\n一般这时，候选人都会说到 `行内级元素` 不会换新行，而 `块级元素` 会格式化为块状，即换行。但也有些遗憾的方面（如：[混淆了块元素和块级元素，行内元素和行内级元素](/2015/03/09/css/视觉格式化模型中的各种框/#block-level-element)），当然这看起来似乎不是特别重要。\n\n> 这时我会继续问，`行内元素` 能够定义宽度和高度吗？\n\n不少候选人会说：**不能**\n\n> 我会继续问，说几个你熟悉的 `行内元素` 吧\n\n于是 `span`, `strong`, `em`, `ins`... 答案我还是比较满意的。\n\n> 我仍然会继续，`img` 是行内元素么？\n\n候选人这时通常会迟疑一下，可能意识到我接下来想问啥了，但还是会回答：**是**\n\n<!--more-->\n\n> 于是我会说，那 `img` 能定义宽度和高度么？\n\n有的候选人这时会犹豫，因为如果回答是，就会推翻他之前说的 `行内元素不能定义宽高`，如果回答不是，似乎又和他所熟知的经验不一致。但通常最后还是会回答：**能**\n\n> 那我就又得问，你之前不是说 `行内元素不能定义宽高` 吗？为什么 `img` 可以？\n\n到这里，候选人基本上不知道要怎么回答好了，最后可能会告诉我，**因为 `img` 是特殊元素**\n\n当然，虽然这么回答也不能说是错误的，但基本上也能知道候选人对这条线的基础的掌握程度了。\n\n但我希望听到的答案是通过解释置换元素相关的概念从而给出答案。\n\n## 什么是置换元素？\n\n一个 `内容` 不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。\n\n## 什么是非置换元素？\n\nw3c并没有给出明确的非置换元素的解释，但能确定的是除置换元素之外，所有的元素都是非置换元素。\n\n## 行内级置换和非置换元素的宽度定义\n\n对于行内级非置换元素，宽度设置是不适用的。\n\n对于行内级置换元素来说，其宽度的设置需遵循以下几点：\n\n* 若宽高的计算值都为 `auto` 且元素有固有宽度，则 `width` 的使用值为该固有宽度；\n> 典型的例子是：拥有默认宽高的 `input` 当宽度的计算值为auto时，则宽度使用值为其默认的固有宽度\n* 若宽度的计算值为 `auto` 且元素有固有宽度，则 `width` 的使用值为该固有宽度；\n> 例子同上\n* 若宽度的计算值为 `auto` 且高度有 `非auto` 的计算值，并且元素有固有宽高比，则 `width` 的使用值为 `高度使用值 * 固有宽高比`；\n> 典型的例子：`img` 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置\n* 除此之外，当 `width` 的计算值为 `auto` 时，则宽度的使用值为 `300px`\n> 典型的例子：比如iframe, canvas\n\n其它类型的置换元素，其宽度的定义都参照行内置换元素的定义。\n\n## 行内级置换和非置换元素的高度定义\n\n对于行内级非置换元素，高度设置是不适用的。\n\n对于行内级置换元素来说，其高度的设置需遵循以下几点：\n\n* 若宽高的计算值都为 `auto` 且元素有固有高度，则 `height` 的使用值为该固有高度；\n* 若高度的计算值为 `auto` 且元素有固有高度，则 `height` 的使用值为该固有高度；\n* 若高度的计算值为 `auto` 且宽度有 `非auto` 的计算值，并且元素有固有宽高比，则 `height` 的使用值为：`宽度使用值 / 固有宽高比`；\n* 若高度的计算值为 `auto` 且上述条件完全不符，则 `height` 的使用值 `不能大于150px`，且宽度不能大于长方形高度的2倍。\n\n其它类型的置换元素，其高度的定义都参照行内置换元素的定义。","slug":"前端/置换和非置换元素","published":1,"updated":"2016-09-06T19:10:32.805Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vpm000clsvf0bsyn5ma","content":"<h2 id=\"先进一个题外话\"><a href=\"#先进一个题外话\" class=\"headerlink\" title=\"先进一个题外话\"></a>先进一个题外话</h2><p>在面试一个 <code>重构</code>（各大公司的叫法可能不太一样）时，我喜欢从一个点开始问，然后一直延展下去成为一条线，甚至是一个面，直到问到不会的地方，然后又换另外一个点。</p>\n<blockquote>\n<p>例如：我可能会说，能简单聊聊 <code>行内级元素</code> 和 <code>块级元素</code> 的区别吗。</p>\n</blockquote>\n<p>一般这时，候选人都会说到 <code>行内级元素</code> 不会换新行，而 <code>块级元素</code> 会格式化为块状，即换行。但也有些遗憾的方面（如：<a href=\"/2015/03/09/css/视觉格式化模型中的各种框/#block-level-element\">混淆了块元素和块级元素，行内元素和行内级元素</a>），当然这看起来似乎不是特别重要。</p>\n<blockquote>\n<p>这时我会继续问，<code>行内元素</code> 能够定义宽度和高度吗？</p>\n</blockquote>\n<p>不少候选人会说：<strong>不能</strong></p>\n<blockquote>\n<p>我会继续问，说几个你熟悉的 <code>行内元素</code> 吧</p>\n</blockquote>\n<p>于是 <code>span</code>, <code>strong</code>, <code>em</code>, <code>ins</code>… 答案我还是比较满意的。</p>\n<blockquote>\n<p>我仍然会继续，<code>img</code> 是行内元素么？</p>\n</blockquote>\n<p>候选人这时通常会迟疑一下，可能意识到我接下来想问啥了，但还是会回答：<strong>是</strong></p>\n<a id=\"more\"></a>\n<blockquote>\n<p>于是我会说，那 <code>img</code> 能定义宽度和高度么？</p>\n</blockquote>\n<p>有的候选人这时会犹豫，因为如果回答是，就会推翻他之前说的 <code>行内元素不能定义宽高</code>，如果回答不是，似乎又和他所熟知的经验不一致。但通常最后还是会回答：<strong>能</strong></p>\n<blockquote>\n<p>那我就又得问，你之前不是说 <code>行内元素不能定义宽高</code> 吗？为什么 <code>img</code> 可以？</p>\n</blockquote>\n<p>到这里，候选人基本上不知道要怎么回答好了，最后可能会告诉我，<strong>因为 <code>img</code> 是特殊元素</strong></p>\n<p>当然，虽然这么回答也不能说是错误的，但基本上也能知道候选人对这条线的基础的掌握程度了。</p>\n<p>但我希望听到的答案是通过解释置换元素相关的概念从而给出答案。</p>\n<h2 id=\"什么是置换元素？\"><a href=\"#什么是置换元素？\" class=\"headerlink\" title=\"什么是置换元素？\"></a>什么是置换元素？</h2><p>一个 <code>内容</code> 不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。</p>\n<h2 id=\"什么是非置换元素？\"><a href=\"#什么是非置换元素？\" class=\"headerlink\" title=\"什么是非置换元素？\"></a>什么是非置换元素？</h2><p>w3c并没有给出明确的非置换元素的解释，但能确定的是除置换元素之外，所有的元素都是非置换元素。</p>\n<h2 id=\"行内级置换和非置换元素的宽度定义\"><a href=\"#行内级置换和非置换元素的宽度定义\" class=\"headerlink\" title=\"行内级置换和非置换元素的宽度定义\"></a>行内级置换和非置换元素的宽度定义</h2><p>对于行内级非置换元素，宽度设置是不适用的。</p>\n<p>对于行内级置换元素来说，其宽度的设置需遵循以下几点：</p>\n<ul>\n<li>若宽高的计算值都为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote>\n<p>典型的例子是：拥有默认宽高的 <code>input</code> 当宽度的计算值为auto时，则宽度使用值为其默认的固有宽度</p>\n</blockquote>\n</li>\n<li>若宽度的计算值为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote>\n<p>例子同上</p>\n</blockquote>\n</li>\n<li>若宽度的计算值为 <code>auto</code> 且高度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>width</code> 的使用值为 <code>高度使用值 * 固有宽高比</code>；<blockquote>\n<p>典型的例子：<code>img</code> 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置</p>\n</blockquote>\n</li>\n<li>除此之外，当 <code>width</code> 的计算值为 <code>auto</code> 时，则宽度的使用值为 <code>300px</code><blockquote>\n<p>典型的例子：比如iframe, canvas</p>\n</blockquote>\n</li>\n</ul>\n<p>其它类型的置换元素，其宽度的定义都参照行内置换元素的定义。</p>\n<h2 id=\"行内级置换和非置换元素的高度定义\"><a href=\"#行内级置换和非置换元素的高度定义\" class=\"headerlink\" title=\"行内级置换和非置换元素的高度定义\"></a>行内级置换和非置换元素的高度定义</h2><p>对于行内级非置换元素，高度设置是不适用的。</p>\n<p>对于行内级置换元素来说，其高度的设置需遵循以下几点：</p>\n<ul>\n<li>若宽高的计算值都为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li>\n<li>若高度的计算值为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li>\n<li>若高度的计算值为 <code>auto</code> 且宽度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>height</code> 的使用值为：<code>宽度使用值 / 固有宽高比</code>；</li>\n<li>若高度的计算值为 <code>auto</code> 且上述条件完全不符，则 <code>height</code> 的使用值 <code>不能大于150px</code>，且宽度不能大于长方形高度的2倍。</li>\n</ul>\n<p>其它类型的置换元素，其高度的定义都参照行内置换元素的定义。</p>\n","excerpt":"<h2 id=\"先进一个题外话\"><a href=\"#先进一个题外话\" class=\"headerlink\" title=\"先进一个题外话\"></a>先进一个题外话</h2><p>在面试一个 <code>重构</code>（各大公司的叫法可能不太一样）时，我喜欢从一个点开始问，然后一直延展下去成为一条线，甚至是一个面，直到问到不会的地方，然后又换另外一个点。</p>\n<blockquote>\n<p>例如：我可能会说，能简单聊聊 <code>行内级元素</code> 和 <code>块级元素</code> 的区别吗。</p>\n</blockquote>\n<p>一般这时，候选人都会说到 <code>行内级元素</code> 不会换新行，而 <code>块级元素</code> 会格式化为块状，即换行。但也有些遗憾的方面（如：<a href=\"/2015/03/09/css/视觉格式化模型中的各种框/#block-level-element\">混淆了块元素和块级元素，行内元素和行内级元素</a>），当然这看起来似乎不是特别重要。</p>\n<blockquote>\n<p>这时我会继续问，<code>行内元素</code> 能够定义宽度和高度吗？</p>\n</blockquote>\n<p>不少候选人会说：<strong>不能</strong></p>\n<blockquote>\n<p>我会继续问，说几个你熟悉的 <code>行内元素</code> 吧</p>\n</blockquote>\n<p>于是 <code>span</code>, <code>strong</code>, <code>em</code>, <code>ins</code>… 答案我还是比较满意的。</p>\n<blockquote>\n<p>我仍然会继续，<code>img</code> 是行内元素么？</p>\n</blockquote>\n<p>候选人这时通常会迟疑一下，可能意识到我接下来想问啥了，但还是会回答：<strong>是</strong></p>","more":"<blockquote>\n<p>于是我会说，那 <code>img</code> 能定义宽度和高度么？</p>\n</blockquote>\n<p>有的候选人这时会犹豫，因为如果回答是，就会推翻他之前说的 <code>行内元素不能定义宽高</code>，如果回答不是，似乎又和他所熟知的经验不一致。但通常最后还是会回答：<strong>能</strong></p>\n<blockquote>\n<p>那我就又得问，你之前不是说 <code>行内元素不能定义宽高</code> 吗？为什么 <code>img</code> 可以？</p>\n</blockquote>\n<p>到这里，候选人基本上不知道要怎么回答好了，最后可能会告诉我，<strong>因为 <code>img</code> 是特殊元素</strong></p>\n<p>当然，虽然这么回答也不能说是错误的，但基本上也能知道候选人对这条线的基础的掌握程度了。</p>\n<p>但我希望听到的答案是通过解释置换元素相关的概念从而给出答案。</p>\n<h2 id=\"什么是置换元素？\"><a href=\"#什么是置换元素？\" class=\"headerlink\" title=\"什么是置换元素？\"></a>什么是置换元素？</h2><p>一个 <code>内容</code> 不受CSS视觉格式化模型控制，CSS渲染模型并不考虑对此内容的渲染，且元素本身一般拥有固有尺寸（宽度，高度，宽高比）的元素，被称之为置换元素。</p>\n<h2 id=\"什么是非置换元素？\"><a href=\"#什么是非置换元素？\" class=\"headerlink\" title=\"什么是非置换元素？\"></a>什么是非置换元素？</h2><p>w3c并没有给出明确的非置换元素的解释，但能确定的是除置换元素之外，所有的元素都是非置换元素。</p>\n<h2 id=\"行内级置换和非置换元素的宽度定义\"><a href=\"#行内级置换和非置换元素的宽度定义\" class=\"headerlink\" title=\"行内级置换和非置换元素的宽度定义\"></a>行内级置换和非置换元素的宽度定义</h2><p>对于行内级非置换元素，宽度设置是不适用的。</p>\n<p>对于行内级置换元素来说，其宽度的设置需遵循以下几点：</p>\n<ul>\n<li>若宽高的计算值都为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote>\n<p>典型的例子是：拥有默认宽高的 <code>input</code> 当宽度的计算值为auto时，则宽度使用值为其默认的固有宽度</p>\n</blockquote>\n</li>\n<li>若宽度的计算值为 <code>auto</code> 且元素有固有宽度，则 <code>width</code> 的使用值为该固有宽度；<blockquote>\n<p>例子同上</p>\n</blockquote>\n</li>\n<li>若宽度的计算值为 <code>auto</code> 且高度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>width</code> 的使用值为 <code>高度使用值 * 固有宽高比</code>；<blockquote>\n<p>典型的例子：<code>img</code> 当只定义了其高度值时，其宽度将会根据固有宽高比进行等比设置</p>\n</blockquote>\n</li>\n<li>除此之外，当 <code>width</code> 的计算值为 <code>auto</code> 时，则宽度的使用值为 <code>300px</code><blockquote>\n<p>典型的例子：比如iframe, canvas</p>\n</blockquote>\n</li>\n</ul>\n<p>其它类型的置换元素，其宽度的定义都参照行内置换元素的定义。</p>\n<h2 id=\"行内级置换和非置换元素的高度定义\"><a href=\"#行内级置换和非置换元素的高度定义\" class=\"headerlink\" title=\"行内级置换和非置换元素的高度定义\"></a>行内级置换和非置换元素的高度定义</h2><p>对于行内级非置换元素，高度设置是不适用的。</p>\n<p>对于行内级置换元素来说，其高度的设置需遵循以下几点：</p>\n<ul>\n<li>若宽高的计算值都为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li>\n<li>若高度的计算值为 <code>auto</code> 且元素有固有高度，则 <code>height</code> 的使用值为该固有高度；</li>\n<li>若高度的计算值为 <code>auto</code> 且宽度有 <code>非auto</code> 的计算值，并且元素有固有宽高比，则 <code>height</code> 的使用值为：<code>宽度使用值 / 固有宽高比</code>；</li>\n<li>若高度的计算值为 <code>auto</code> 且上述条件完全不符，则 <code>height</code> 的使用值 <code>不能大于150px</code>，且宽度不能大于长方形高度的2倍。</li>\n</ul>\n<p>其它类型的置换元素，其高度的定义都参照行内置换元素的定义。</p>"},{"title":"视觉格式化模型中的各种框","date":"2015-03-09T09:29:00.000Z","author":"xiupi酱","_content":"\n在聊这个话题之前，我们可能得先简单说说 `视觉格式化模型` 这个概念。\n\n`视觉格式化模型` 的全称是 `Visual formatting model`，它被用来描述用户代理（比如浏览器）在图形媒体下如何处理文档树。\n\n在 `视觉格式化模型` 中，每个文档树的元素会根据[框模型](http://www.w3.org/TR/CSS2/box.html)产生零到多个框（boxes）。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系和外部信息（例如：视口 ① 大小，置换元素的固有尺寸等等）。\n\n> 举个最简单的例子来讲，假设一个页面上有2个div，那么第2个div的位置会取决第1个div的高度定义；假设更复杂一点，第1个div是浮动的，那么第2个div的位置还要取决于第1个div的宽度。\n\n## 不同类型的框\n\n在 `CSS` 中，可能会产生不同类型的框，框的类型取决于 `display` 属性的设定。某种程度上，框的类型会影响其在视觉格式化模型中的表现。接下来会详细的聊聊这些不同类型的框以及它们在视觉可视化模型中的表现。\n\n在说这个之前，我们先回忆一下，大家常说的一些名词：\n\n<!--more-->\n\n* [Containing block（包含块）](#containing-block)\n* [Block-level element（块级元素）](#block-level-element)\n* [Block element（块元素）](#block-element)\n* [Block-level box（块级框）, Block container box（块容器框）, Block box（块框）](#block-boxes)\n* [Inline-level element（行内级元素）](#inline-level-element)\n* [Inline element（行内元素）](#inline-element)\n* [Inline-level box（行内级框）, Atomic inline-level box（原子行内级框）, Inline box（行内框）](#inline-boxes)\n* [Anonymous boxes（匿名框）](#anonymous-boxes)\n\n<a name=\"containing-block\"></a>\n## 包含块\n\n首先，来看看什么是 `包含块`？这个说及 `CSS` 一般的都会提及的基本概念。\n\n一个元素，它的框的尺寸和位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 `包含块`。\n\n（为）一个元素生成的框通常会充当其子框的包含块；当我们叫一个 `框的包含块` 时，其实表达的是 `该框所处的包含块`，而不是其自身产生的包含块。\n\n每个框相对于其包含块（`该框所处的包含块`）都会被给予一个位置，不过该框并不局限在包含块内，有可能会溢出，通常这个时候你会借助 `overflow` 属性来进行处理。\n\n除了说什么是包含块，这里顺带再介绍一下生成包含块的一些特殊场景：\n\n* 由根元素生成的包含块叫做 `初始包含块（initial containing block）`。\n* 对于其它元素，如果元素的 `position` 值是 `relative` 或者 `static`，其包含块由最近的祖先 `块容器框` 的内容边界（如果想知道什么是内容边界，可以先看看CSS盒模型）形成。\n> 举个例子，`td`, `th` 就算有父容器 `tr`，但它们的包含块却是由 `table` 生成，因为 `table` 是 `块容器框` 而 `tr` 不是\n\n* 绝对定位元素的包含块由最近的定位（`position` 值非 `static`）祖先生成，如果不存在这样的祖先，则采用初始包含块；\n* 固定定位元素（`position: fixed`）的包含块一般情况下都由视口 ① 生成；\n\n说了这几个特殊的情景，你会发现并不是所有的包含块都是由父元素所生成。\n\n<a name=\"block-level-element\"></a>\n## 什么是块级元素？\n\n块级元素是那些视觉上会被格式化成块状的元素，通俗一点来说就是那些会换新行的元素。`display` 属性的：`block`, `list-item`, `table`, `flex`, `grid` 值都可以将一个元素设置成块级元素。\n\n> 举个例子来说，`li` 是一个 `块级元素`，但也有人会说它是一个 `块元素`。嗯，`li` 确实是一个块级元素，但并不是一个块元素，为什么？\n\n<a name=\"block-element\"></a>\n## 什么是块元素？\n\n块元素是 `display` 属性值为 `block` 的元素，它应该是 `块级元素` 的一个子集，而不是等同的，一个 `块元素` 是一个 `块级元素`，但一个 `块级元素` 不一定是一个 `块元素`，所以不要混淆。\n\n<a name=\"block-boxes\"></a>\n## 块级框，块容器框，块框\n\n### 什么是块级框？\n\n块级元素生成块级框，这些框会参与某些 `BFC`。每个块级元素都会生成一个主要的块级框来包含其子框和生成的内容，同时任何定位方式都会与这个主要的块级框有关。\n\n某些块级元素还会在主要的块级框之外产生额外的框：例如 `list-item` 元素，它需要生成一个额外的框用于包含 `list-style-type`。这些额外的框会相对于主要的块级框来进行排版。\n\n### 什么是块容器框？\n\n一个 `块容器框` 要么只包含 `块级框`，要么创建一个 `IFC` 而只包含 `行内级框`，但不能同时包含 `块级框` 和 `行内级框`。\n\n除了 `table框` 和 `置换元素`，一个 `块级框` 同时也是一个 `块容器框`。`非置换的行内块` 和 `单元格` 是 `块容器` 但不是 `块级框`。\n\n并不是所有的 `块级框` 都是 `块容器框`，也并不是所有的 `块容器框` 都是 `块级框`。\n\n`块级框` 和 `块容器框` 的另外一个重要的区别是：`块级框` 需要能够包含其生成的内容，但 `块容器框` 并不需要。这是什么意思呢？简单的解释一下：\n\n> 比如一个 `iframe` 其内容由 `src` 属性所决定，这可以当成是生成的内容，所以 `iframe` 是一个 `块级框` 但却不是 `块容器框`\n\n### 什么是块框？\n\n简要的来说，是 `块容器` 的 `块级框` 称之为 `块框`。\n\n可以通过下面这个图来快速的梳理清楚这3者之间的联系：\n\n![block boxes](../../../../../image/boxes/block-boxes.png)（图一）\n\n说完了块级框，接下来说说行内级框\n\n<a name=\"inline-level-element\"></a>\n## 什么是行内级元素？\n\n行内级元素是那些不会为自身内容形成新的块，而让内容分布在多行中的元素。`display` 属性的：`inline`, `inline-table`, `inline-block`, `inline-flex`, `inline-grid` 值都可以将一个元素设置成行内级元素。\n\n<a name=\"inline-element\"></a>\n## 什么是行内元素？\n\n如同块元素之于块级元素的关系，行内元素仅仅是 `display` 属性值为 `inline` 的元素，这里不再赘述。\n\n<a name=\"inline-boxes\"></a>\n## 行内级框，原子行内级框，行内框\n\n行内级元素生成行内级框，而这些框会参与某个 `IFC`。一个 `行内框` 是 `行内级框`，且其内容参与了包含它的 `IFC`。一个 `display` 值是 `inline` 的非置换元素会生成一个行内框。那些不是行内框的行内级框（例如行内级置换元素、行内块元素、行内表格元素）被称为 `原子行内级框`，因为它们是以单一不透明框的形式来参与其 `IFC` 的。\n\n细心的你会发现并没有一个 `行内容器框` 与 `块容器框` 相对应，但却多了一个 `原子行内级框`。并且有趣的是`行内块`（包括置换和非置换元素）是`原子行内级框`，而`非置换行内块`却同时还是`块容器框`。\n\n![inline boxes](../../../../../image/boxes/inline-boxes.png)（图二）\n\n<a name=\"anonymous-boxes\"></a>\n## 匿名框\n\n`匿名框` 包括 `匿名块框` 和 `匿名行内框`。\n\n假设一个 `div` 中包含有一个 `p` 和一段纯文本 `xxx`。由于 `块容器框` 只允许要么包含 `块级框`，要么包含 `行内级框`，所以，为了符合这种情况，`div` 会生成一个匿名的块级框用于包裹 `xxx`，这个匿名框就叫做 `匿名块框`。\n\n我们拿 `W3C` 上的一个例子来加深对匿名块框的印象：\n\n```\n<div>\n  Some text\n  <p>More text</p>\n</div>\n```\n\n![Anonymous block boxes](http://www.w3.org/TR/CSS2/images/anon-block.png)（图三）\n\n与此同时，我们将上面的代码稍微改一下，将 `p` 变成 `span`：\n\n```\n<div>\n  Some text\n  <span>More text</span>\n</div>\n```\n\n`div` 生成一个块框，`More text` 由 `span` 生成一个行内框，由于 `Some text` 没有与之相关的行级元素，将由 `div` 为其生成一个行内框用以包裹，这个框称为匿名行内框。如图四：\n\n![Anonymous block boxes](../../../../../image/boxes/anon-inline.png)（图四）\n\n假设一个匿名框的类型可根据上下文来清晰界定，则 `匿名行内框` 和 `匿名块框` 都可被简称为 `匿名框`。\n\n匿名框的继承属性会从包含它的非匿名框那里继承，非继承属性取其初始值。\n\n## 附注：\n\n* ① 用户代理一般会向用户提供一个载体（屏幕上的一个窗口或其它可视区域）用以访问文档，这个载体就叫做 `视口`。用户代理可以在视口大小被调整时改变文档的布局。如果视口小于渲染文档的画布区域，用户代理应当提供一个滚动机制。每个画布只能拥有一个视口，但用户代理可以把文档渲染至多个画布上（即为相同文档提供不同的视图）。\n\n## 说明：\n\n* 最近的文章都是断断续续写的，如读者朋友发现存在描述错误地方请及时提醒。","source":"_posts/前端/视觉格式化模型中的各种框.md","raw":"title: 视觉格式化模型中的各种框\ndate: 2015-03-09 17:29:00\ncategories: 前端\nauthor: xiupi酱\ntags: [w3c, css, 视觉格式化模型, 包含块]\n---\n\n在聊这个话题之前，我们可能得先简单说说 `视觉格式化模型` 这个概念。\n\n`视觉格式化模型` 的全称是 `Visual formatting model`，它被用来描述用户代理（比如浏览器）在图形媒体下如何处理文档树。\n\n在 `视觉格式化模型` 中，每个文档树的元素会根据[框模型](http://www.w3.org/TR/CSS2/box.html)产生零到多个框（boxes）。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系和外部信息（例如：视口 ① 大小，置换元素的固有尺寸等等）。\n\n> 举个最简单的例子来讲，假设一个页面上有2个div，那么第2个div的位置会取决第1个div的高度定义；假设更复杂一点，第1个div是浮动的，那么第2个div的位置还要取决于第1个div的宽度。\n\n## 不同类型的框\n\n在 `CSS` 中，可能会产生不同类型的框，框的类型取决于 `display` 属性的设定。某种程度上，框的类型会影响其在视觉格式化模型中的表现。接下来会详细的聊聊这些不同类型的框以及它们在视觉可视化模型中的表现。\n\n在说这个之前，我们先回忆一下，大家常说的一些名词：\n\n<!--more-->\n\n* [Containing block（包含块）](#containing-block)\n* [Block-level element（块级元素）](#block-level-element)\n* [Block element（块元素）](#block-element)\n* [Block-level box（块级框）, Block container box（块容器框）, Block box（块框）](#block-boxes)\n* [Inline-level element（行内级元素）](#inline-level-element)\n* [Inline element（行内元素）](#inline-element)\n* [Inline-level box（行内级框）, Atomic inline-level box（原子行内级框）, Inline box（行内框）](#inline-boxes)\n* [Anonymous boxes（匿名框）](#anonymous-boxes)\n\n<a name=\"containing-block\"></a>\n## 包含块\n\n首先，来看看什么是 `包含块`？这个说及 `CSS` 一般的都会提及的基本概念。\n\n一个元素，它的框的尺寸和位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 `包含块`。\n\n（为）一个元素生成的框通常会充当其子框的包含块；当我们叫一个 `框的包含块` 时，其实表达的是 `该框所处的包含块`，而不是其自身产生的包含块。\n\n每个框相对于其包含块（`该框所处的包含块`）都会被给予一个位置，不过该框并不局限在包含块内，有可能会溢出，通常这个时候你会借助 `overflow` 属性来进行处理。\n\n除了说什么是包含块，这里顺带再介绍一下生成包含块的一些特殊场景：\n\n* 由根元素生成的包含块叫做 `初始包含块（initial containing block）`。\n* 对于其它元素，如果元素的 `position` 值是 `relative` 或者 `static`，其包含块由最近的祖先 `块容器框` 的内容边界（如果想知道什么是内容边界，可以先看看CSS盒模型）形成。\n> 举个例子，`td`, `th` 就算有父容器 `tr`，但它们的包含块却是由 `table` 生成，因为 `table` 是 `块容器框` 而 `tr` 不是\n\n* 绝对定位元素的包含块由最近的定位（`position` 值非 `static`）祖先生成，如果不存在这样的祖先，则采用初始包含块；\n* 固定定位元素（`position: fixed`）的包含块一般情况下都由视口 ① 生成；\n\n说了这几个特殊的情景，你会发现并不是所有的包含块都是由父元素所生成。\n\n<a name=\"block-level-element\"></a>\n## 什么是块级元素？\n\n块级元素是那些视觉上会被格式化成块状的元素，通俗一点来说就是那些会换新行的元素。`display` 属性的：`block`, `list-item`, `table`, `flex`, `grid` 值都可以将一个元素设置成块级元素。\n\n> 举个例子来说，`li` 是一个 `块级元素`，但也有人会说它是一个 `块元素`。嗯，`li` 确实是一个块级元素，但并不是一个块元素，为什么？\n\n<a name=\"block-element\"></a>\n## 什么是块元素？\n\n块元素是 `display` 属性值为 `block` 的元素，它应该是 `块级元素` 的一个子集，而不是等同的，一个 `块元素` 是一个 `块级元素`，但一个 `块级元素` 不一定是一个 `块元素`，所以不要混淆。\n\n<a name=\"block-boxes\"></a>\n## 块级框，块容器框，块框\n\n### 什么是块级框？\n\n块级元素生成块级框，这些框会参与某些 `BFC`。每个块级元素都会生成一个主要的块级框来包含其子框和生成的内容，同时任何定位方式都会与这个主要的块级框有关。\n\n某些块级元素还会在主要的块级框之外产生额外的框：例如 `list-item` 元素，它需要生成一个额外的框用于包含 `list-style-type`。这些额外的框会相对于主要的块级框来进行排版。\n\n### 什么是块容器框？\n\n一个 `块容器框` 要么只包含 `块级框`，要么创建一个 `IFC` 而只包含 `行内级框`，但不能同时包含 `块级框` 和 `行内级框`。\n\n除了 `table框` 和 `置换元素`，一个 `块级框` 同时也是一个 `块容器框`。`非置换的行内块` 和 `单元格` 是 `块容器` 但不是 `块级框`。\n\n并不是所有的 `块级框` 都是 `块容器框`，也并不是所有的 `块容器框` 都是 `块级框`。\n\n`块级框` 和 `块容器框` 的另外一个重要的区别是：`块级框` 需要能够包含其生成的内容，但 `块容器框` 并不需要。这是什么意思呢？简单的解释一下：\n\n> 比如一个 `iframe` 其内容由 `src` 属性所决定，这可以当成是生成的内容，所以 `iframe` 是一个 `块级框` 但却不是 `块容器框`\n\n### 什么是块框？\n\n简要的来说，是 `块容器` 的 `块级框` 称之为 `块框`。\n\n可以通过下面这个图来快速的梳理清楚这3者之间的联系：\n\n![block boxes](../../../../../image/boxes/block-boxes.png)（图一）\n\n说完了块级框，接下来说说行内级框\n\n<a name=\"inline-level-element\"></a>\n## 什么是行内级元素？\n\n行内级元素是那些不会为自身内容形成新的块，而让内容分布在多行中的元素。`display` 属性的：`inline`, `inline-table`, `inline-block`, `inline-flex`, `inline-grid` 值都可以将一个元素设置成行内级元素。\n\n<a name=\"inline-element\"></a>\n## 什么是行内元素？\n\n如同块元素之于块级元素的关系，行内元素仅仅是 `display` 属性值为 `inline` 的元素，这里不再赘述。\n\n<a name=\"inline-boxes\"></a>\n## 行内级框，原子行内级框，行内框\n\n行内级元素生成行内级框，而这些框会参与某个 `IFC`。一个 `行内框` 是 `行内级框`，且其内容参与了包含它的 `IFC`。一个 `display` 值是 `inline` 的非置换元素会生成一个行内框。那些不是行内框的行内级框（例如行内级置换元素、行内块元素、行内表格元素）被称为 `原子行内级框`，因为它们是以单一不透明框的形式来参与其 `IFC` 的。\n\n细心的你会发现并没有一个 `行内容器框` 与 `块容器框` 相对应，但却多了一个 `原子行内级框`。并且有趣的是`行内块`（包括置换和非置换元素）是`原子行内级框`，而`非置换行内块`却同时还是`块容器框`。\n\n![inline boxes](../../../../../image/boxes/inline-boxes.png)（图二）\n\n<a name=\"anonymous-boxes\"></a>\n## 匿名框\n\n`匿名框` 包括 `匿名块框` 和 `匿名行内框`。\n\n假设一个 `div` 中包含有一个 `p` 和一段纯文本 `xxx`。由于 `块容器框` 只允许要么包含 `块级框`，要么包含 `行内级框`，所以，为了符合这种情况，`div` 会生成一个匿名的块级框用于包裹 `xxx`，这个匿名框就叫做 `匿名块框`。\n\n我们拿 `W3C` 上的一个例子来加深对匿名块框的印象：\n\n```\n<div>\n  Some text\n  <p>More text</p>\n</div>\n```\n\n![Anonymous block boxes](http://www.w3.org/TR/CSS2/images/anon-block.png)（图三）\n\n与此同时，我们将上面的代码稍微改一下，将 `p` 变成 `span`：\n\n```\n<div>\n  Some text\n  <span>More text</span>\n</div>\n```\n\n`div` 生成一个块框，`More text` 由 `span` 生成一个行内框，由于 `Some text` 没有与之相关的行级元素，将由 `div` 为其生成一个行内框用以包裹，这个框称为匿名行内框。如图四：\n\n![Anonymous block boxes](../../../../../image/boxes/anon-inline.png)（图四）\n\n假设一个匿名框的类型可根据上下文来清晰界定，则 `匿名行内框` 和 `匿名块框` 都可被简称为 `匿名框`。\n\n匿名框的继承属性会从包含它的非匿名框那里继承，非继承属性取其初始值。\n\n## 附注：\n\n* ① 用户代理一般会向用户提供一个载体（屏幕上的一个窗口或其它可视区域）用以访问文档，这个载体就叫做 `视口`。用户代理可以在视口大小被调整时改变文档的布局。如果视口小于渲染文档的画布区域，用户代理应当提供一个滚动机制。每个画布只能拥有一个视口，但用户代理可以把文档渲染至多个画布上（即为相同文档提供不同的视图）。\n\n## 说明：\n\n* 最近的文章都是断断续续写的，如读者朋友发现存在描述错误地方请及时提醒。","slug":"前端/视觉格式化模型中的各种框","published":1,"updated":"2016-09-06T19:11:00.678Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vpm000elsvf8x3j2vp6","content":"<p>在聊这个话题之前，我们可能得先简单说说 <code>视觉格式化模型</code> 这个概念。</p>\n<p><code>视觉格式化模型</code> 的全称是 <code>Visual formatting model</code>，它被用来描述用户代理（比如浏览器）在图形媒体下如何处理文档树。</p>\n<p>在 <code>视觉格式化模型</code> 中，每个文档树的元素会根据<a href=\"http://www.w3.org/TR/CSS2/box.html\" target=\"_blank\" rel=\"external\">框模型</a>产生零到多个框（boxes）。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系和外部信息（例如：视口 ① 大小，置换元素的固有尺寸等等）。</p>\n<blockquote>\n<p>举个最简单的例子来讲，假设一个页面上有2个div，那么第2个div的位置会取决第1个div的高度定义；假设更复杂一点，第1个div是浮动的，那么第2个div的位置还要取决于第1个div的宽度。</p>\n</blockquote>\n<h2 id=\"不同类型的框\"><a href=\"#不同类型的框\" class=\"headerlink\" title=\"不同类型的框\"></a>不同类型的框</h2><p>在 <code>CSS</code> 中，可能会产生不同类型的框，框的类型取决于 <code>display</code> 属性的设定。某种程度上，框的类型会影响其在视觉格式化模型中的表现。接下来会详细的聊聊这些不同类型的框以及它们在视觉可视化模型中的表现。</p>\n<p>在说这个之前，我们先回忆一下，大家常说的一些名词：</p>\n<a id=\"more\"></a>\n<ul>\n<li><a href=\"#containing-block\">Containing block（包含块）</a></li>\n<li><a href=\"#block-level-element\">Block-level element（块级元素）</a></li>\n<li><a href=\"#block-element\">Block element（块元素）</a></li>\n<li><a href=\"#block-boxes\">Block-level box（块级框）, Block container box（块容器框）, Block box（块框）</a></li>\n<li><a href=\"#inline-level-element\">Inline-level element（行内级元素）</a></li>\n<li><a href=\"#inline-element\">Inline element（行内元素）</a></li>\n<li><a href=\"#inline-boxes\">Inline-level box（行内级框）, Atomic inline-level box（原子行内级框）, Inline box（行内框）</a></li>\n<li><a href=\"#anonymous-boxes\">Anonymous boxes（匿名框）</a></li>\n</ul>\n<p><a name=\"containing-block\"></a></p>\n<h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>首先，来看看什么是 <code>包含块</code>？这个说及 <code>CSS</code> 一般的都会提及的基本概念。</p>\n<p>一个元素，它的框的尺寸和位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 <code>包含块</code>。</p>\n<p>（为）一个元素生成的框通常会充当其子框的包含块；当我们叫一个 <code>框的包含块</code> 时，其实表达的是 <code>该框所处的包含块</code>，而不是其自身产生的包含块。</p>\n<p>每个框相对于其包含块（<code>该框所处的包含块</code>）都会被给予一个位置，不过该框并不局限在包含块内，有可能会溢出，通常这个时候你会借助 <code>overflow</code> 属性来进行处理。</p>\n<p>除了说什么是包含块，这里顺带再介绍一下生成包含块的一些特殊场景：</p>\n<ul>\n<li>由根元素生成的包含块叫做 <code>初始包含块（initial containing block）</code>。</li>\n<li><p>对于其它元素，如果元素的 <code>position</code> 值是 <code>relative</code> 或者 <code>static</code>，其包含块由最近的祖先 <code>块容器框</code> 的内容边界（如果想知道什么是内容边界，可以先看看CSS盒模型）形成。</p>\n<blockquote>\n<p>举个例子，<code>td</code>, <code>th</code> 就算有父容器 <code>tr</code>，但它们的包含块却是由 <code>table</code> 生成，因为 <code>table</code> 是 <code>块容器框</code> 而 <code>tr</code> 不是</p>\n</blockquote>\n</li>\n<li><p>绝对定位元素的包含块由最近的定位（<code>position</code> 值非 <code>static</code>）祖先生成，如果不存在这样的祖先，则采用初始包含块；</p>\n</li>\n<li>固定定位元素（<code>position: fixed</code>）的包含块一般情况下都由视口 ① 生成；</li>\n</ul>\n<p>说了这几个特殊的情景，你会发现并不是所有的包含块都是由父元素所生成。</p>\n<p><a name=\"block-level-element\"></a></p>\n<h2 id=\"什么是块级元素？\"><a href=\"#什么是块级元素？\" class=\"headerlink\" title=\"什么是块级元素？\"></a>什么是块级元素？</h2><p>块级元素是那些视觉上会被格式化成块状的元素，通俗一点来说就是那些会换新行的元素。<code>display</code> 属性的：<code>block</code>, <code>list-item</code>, <code>table</code>, <code>flex</code>, <code>grid</code> 值都可以将一个元素设置成块级元素。</p>\n<blockquote>\n<p>举个例子来说，<code>li</code> 是一个 <code>块级元素</code>，但也有人会说它是一个 <code>块元素</code>。嗯，<code>li</code> 确实是一个块级元素，但并不是一个块元素，为什么？</p>\n</blockquote>\n<p><a name=\"block-element\"></a></p>\n<h2 id=\"什么是块元素？\"><a href=\"#什么是块元素？\" class=\"headerlink\" title=\"什么是块元素？\"></a>什么是块元素？</h2><p>块元素是 <code>display</code> 属性值为 <code>block</code> 的元素，它应该是 <code>块级元素</code> 的一个子集，而不是等同的，一个 <code>块元素</code> 是一个 <code>块级元素</code>，但一个 <code>块级元素</code> 不一定是一个 <code>块元素</code>，所以不要混淆。</p>\n<p><a name=\"block-boxes\"></a></p>\n<h2 id=\"块级框，块容器框，块框\"><a href=\"#块级框，块容器框，块框\" class=\"headerlink\" title=\"块级框，块容器框，块框\"></a>块级框，块容器框，块框</h2><h3 id=\"什么是块级框？\"><a href=\"#什么是块级框？\" class=\"headerlink\" title=\"什么是块级框？\"></a>什么是块级框？</h3><p>块级元素生成块级框，这些框会参与某些 <code>BFC</code>。每个块级元素都会生成一个主要的块级框来包含其子框和生成的内容，同时任何定位方式都会与这个主要的块级框有关。</p>\n<p>某些块级元素还会在主要的块级框之外产生额外的框：例如 <code>list-item</code> 元素，它需要生成一个额外的框用于包含 <code>list-style-type</code>。这些额外的框会相对于主要的块级框来进行排版。</p>\n<h3 id=\"什么是块容器框？\"><a href=\"#什么是块容器框？\" class=\"headerlink\" title=\"什么是块容器框？\"></a>什么是块容器框？</h3><p>一个 <code>块容器框</code> 要么只包含 <code>块级框</code>，要么创建一个 <code>IFC</code> 而只包含 <code>行内级框</code>，但不能同时包含 <code>块级框</code> 和 <code>行内级框</code>。</p>\n<p>除了 <code>table框</code> 和 <code>置换元素</code>，一个 <code>块级框</code> 同时也是一个 <code>块容器框</code>。<code>非置换的行内块</code> 和 <code>单元格</code> 是 <code>块容器</code> 但不是 <code>块级框</code>。</p>\n<p>并不是所有的 <code>块级框</code> 都是 <code>块容器框</code>，也并不是所有的 <code>块容器框</code> 都是 <code>块级框</code>。</p>\n<p><code>块级框</code> 和 <code>块容器框</code> 的另外一个重要的区别是：<code>块级框</code> 需要能够包含其生成的内容，但 <code>块容器框</code> 并不需要。这是什么意思呢？简单的解释一下：</p>\n<blockquote>\n<p>比如一个 <code>iframe</code> 其内容由 <code>src</code> 属性所决定，这可以当成是生成的内容，所以 <code>iframe</code> 是一个 <code>块级框</code> 但却不是 <code>块容器框</code></p>\n</blockquote>\n<h3 id=\"什么是块框？\"><a href=\"#什么是块框？\" class=\"headerlink\" title=\"什么是块框？\"></a>什么是块框？</h3><p>简要的来说，是 <code>块容器</code> 的 <code>块级框</code> 称之为 <code>块框</code>。</p>\n<p>可以通过下面这个图来快速的梳理清楚这3者之间的联系：</p>\n<p><img src=\"../../../../../image/boxes/block-boxes.png\" alt=\"block boxes\">（图一）</p>\n<p>说完了块级框，接下来说说行内级框</p>\n<p><a name=\"inline-level-element\"></a></p>\n<h2 id=\"什么是行内级元素？\"><a href=\"#什么是行内级元素？\" class=\"headerlink\" title=\"什么是行内级元素？\"></a>什么是行内级元素？</h2><p>行内级元素是那些不会为自身内容形成新的块，而让内容分布在多行中的元素。<code>display</code> 属性的：<code>inline</code>, <code>inline-table</code>, <code>inline-block</code>, <code>inline-flex</code>, <code>inline-grid</code> 值都可以将一个元素设置成行内级元素。</p>\n<p><a name=\"inline-element\"></a></p>\n<h2 id=\"什么是行内元素？\"><a href=\"#什么是行内元素？\" class=\"headerlink\" title=\"什么是行内元素？\"></a>什么是行内元素？</h2><p>如同块元素之于块级元素的关系，行内元素仅仅是 <code>display</code> 属性值为 <code>inline</code> 的元素，这里不再赘述。</p>\n<p><a name=\"inline-boxes\"></a></p>\n<h2 id=\"行内级框，原子行内级框，行内框\"><a href=\"#行内级框，原子行内级框，行内框\" class=\"headerlink\" title=\"行内级框，原子行内级框，行内框\"></a>行内级框，原子行内级框，行内框</h2><p>行内级元素生成行内级框，而这些框会参与某个 <code>IFC</code>。一个 <code>行内框</code> 是 <code>行内级框</code>，且其内容参与了包含它的 <code>IFC</code>。一个 <code>display</code> 值是 <code>inline</code> 的非置换元素会生成一个行内框。那些不是行内框的行内级框（例如行内级置换元素、行内块元素、行内表格元素）被称为 <code>原子行内级框</code>，因为它们是以单一不透明框的形式来参与其 <code>IFC</code> 的。</p>\n<p>细心的你会发现并没有一个 <code>行内容器框</code> 与 <code>块容器框</code> 相对应，但却多了一个 <code>原子行内级框</code>。并且有趣的是<code>行内块</code>（包括置换和非置换元素）是<code>原子行内级框</code>，而<code>非置换行内块</code>却同时还是<code>块容器框</code>。</p>\n<p><img src=\"../../../../../image/boxes/inline-boxes.png\" alt=\"inline boxes\">（图二）</p>\n<p><a name=\"anonymous-boxes\"></a></p>\n<h2 id=\"匿名框\"><a href=\"#匿名框\" class=\"headerlink\" title=\"匿名框\"></a>匿名框</h2><p><code>匿名框</code> 包括 <code>匿名块框</code> 和 <code>匿名行内框</code>。</p>\n<p>假设一个 <code>div</code> 中包含有一个 <code>p</code> 和一段纯文本 <code>xxx</code>。由于 <code>块容器框</code> 只允许要么包含 <code>块级框</code>，要么包含 <code>行内级框</code>，所以，为了符合这种情况，<code>div</code> 会生成一个匿名的块级框用于包裹 <code>xxx</code>，这个匿名框就叫做 <code>匿名块框</code>。</p>\n<p>我们拿 <code>W3C</code> 上的一个例子来加深对匿名块框的印象：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  Some text</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://www.w3.org/TR/CSS2/images/anon-block.png\" alt=\"Anonymous block boxes\">（图三）</p>\n<p>与此同时，我们将上面的代码稍微改一下，将 <code>p</code> 变成 <code>span</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  Some text</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>div</code> 生成一个块框，<code>More text</code> 由 <code>span</code> 生成一个行内框，由于 <code>Some text</code> 没有与之相关的行级元素，将由 <code>div</code> 为其生成一个行内框用以包裹，这个框称为匿名行内框。如图四：</p>\n<p><img src=\"../../../../../image/boxes/anon-inline.png\" alt=\"Anonymous block boxes\">（图四）</p>\n<p>假设一个匿名框的类型可根据上下文来清晰界定，则 <code>匿名行内框</code> 和 <code>匿名块框</code> 都可被简称为 <code>匿名框</code>。</p>\n<p>匿名框的继承属性会从包含它的非匿名框那里继承，非继承属性取其初始值。</p>\n<h2 id=\"附注：\"><a href=\"#附注：\" class=\"headerlink\" title=\"附注：\"></a>附注：</h2><ul>\n<li>① 用户代理一般会向用户提供一个载体（屏幕上的一个窗口或其它可视区域）用以访问文档，这个载体就叫做 <code>视口</code>。用户代理可以在视口大小被调整时改变文档的布局。如果视口小于渲染文档的画布区域，用户代理应当提供一个滚动机制。每个画布只能拥有一个视口，但用户代理可以把文档渲染至多个画布上（即为相同文档提供不同的视图）。</li>\n</ul>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>最近的文章都是断断续续写的，如读者朋友发现存在描述错误地方请及时提醒。</li>\n</ul>\n","excerpt":"<p>在聊这个话题之前，我们可能得先简单说说 <code>视觉格式化模型</code> 这个概念。</p>\n<p><code>视觉格式化模型</code> 的全称是 <code>Visual formatting model</code>，它被用来描述用户代理（比如浏览器）在图形媒体下如何处理文档树。</p>\n<p>在 <code>视觉格式化模型</code> 中，每个文档树的元素会根据<a href=\"http://www.w3.org/TR/CSS2/box.html\">框模型</a>产生零到多个框（boxes）。这些框的布局取决于框的尺寸，类型，定位方式（正常流，浮动和绝对定位），元素之间的关系和外部信息（例如：视口 ① 大小，置换元素的固有尺寸等等）。</p>\n<blockquote>\n<p>举个最简单的例子来讲，假设一个页面上有2个div，那么第2个div的位置会取决第1个div的高度定义；假设更复杂一点，第1个div是浮动的，那么第2个div的位置还要取决于第1个div的宽度。</p>\n</blockquote>\n<h2 id=\"不同类型的框\"><a href=\"#不同类型的框\" class=\"headerlink\" title=\"不同类型的框\"></a>不同类型的框</h2><p>在 <code>CSS</code> 中，可能会产生不同类型的框，框的类型取决于 <code>display</code> 属性的设定。某种程度上，框的类型会影响其在视觉格式化模型中的表现。接下来会详细的聊聊这些不同类型的框以及它们在视觉可视化模型中的表现。</p>\n<p>在说这个之前，我们先回忆一下，大家常说的一些名词：</p>","more":"<ul>\n<li><a href=\"#containing-block\">Containing block（包含块）</a></li>\n<li><a href=\"#block-level-element\">Block-level element（块级元素）</a></li>\n<li><a href=\"#block-element\">Block element（块元素）</a></li>\n<li><a href=\"#block-boxes\">Block-level box（块级框）, Block container box（块容器框）, Block box（块框）</a></li>\n<li><a href=\"#inline-level-element\">Inline-level element（行内级元素）</a></li>\n<li><a href=\"#inline-element\">Inline element（行内元素）</a></li>\n<li><a href=\"#inline-boxes\">Inline-level box（行内级框）, Atomic inline-level box（原子行内级框）, Inline box（行内框）</a></li>\n<li><a href=\"#anonymous-boxes\">Anonymous boxes（匿名框）</a></li>\n</ul>\n<p><a name=\"containing-block\"></a></p>\n<h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><p>首先，来看看什么是 <code>包含块</code>？这个说及 <code>CSS</code> 一般的都会提及的基本概念。</p>\n<p>一个元素，它的框的尺寸和位置会相对于一个特定的矩形框边缘来计算而得到，这个特定的矩形框称之为该元素的 <code>包含块</code>。</p>\n<p>（为）一个元素生成的框通常会充当其子框的包含块；当我们叫一个 <code>框的包含块</code> 时，其实表达的是 <code>该框所处的包含块</code>，而不是其自身产生的包含块。</p>\n<p>每个框相对于其包含块（<code>该框所处的包含块</code>）都会被给予一个位置，不过该框并不局限在包含块内，有可能会溢出，通常这个时候你会借助 <code>overflow</code> 属性来进行处理。</p>\n<p>除了说什么是包含块，这里顺带再介绍一下生成包含块的一些特殊场景：</p>\n<ul>\n<li>由根元素生成的包含块叫做 <code>初始包含块（initial containing block）</code>。</li>\n<li><p>对于其它元素，如果元素的 <code>position</code> 值是 <code>relative</code> 或者 <code>static</code>，其包含块由最近的祖先 <code>块容器框</code> 的内容边界（如果想知道什么是内容边界，可以先看看CSS盒模型）形成。</p>\n<blockquote>\n<p>举个例子，<code>td</code>, <code>th</code> 就算有父容器 <code>tr</code>，但它们的包含块却是由 <code>table</code> 生成，因为 <code>table</code> 是 <code>块容器框</code> 而 <code>tr</code> 不是</p>\n</blockquote>\n</li>\n<li><p>绝对定位元素的包含块由最近的定位（<code>position</code> 值非 <code>static</code>）祖先生成，如果不存在这样的祖先，则采用初始包含块；</p>\n</li>\n<li>固定定位元素（<code>position: fixed</code>）的包含块一般情况下都由视口 ① 生成；</li>\n</ul>\n<p>说了这几个特殊的情景，你会发现并不是所有的包含块都是由父元素所生成。</p>\n<p><a name=\"block-level-element\"></a></p>\n<h2 id=\"什么是块级元素？\"><a href=\"#什么是块级元素？\" class=\"headerlink\" title=\"什么是块级元素？\"></a>什么是块级元素？</h2><p>块级元素是那些视觉上会被格式化成块状的元素，通俗一点来说就是那些会换新行的元素。<code>display</code> 属性的：<code>block</code>, <code>list-item</code>, <code>table</code>, <code>flex</code>, <code>grid</code> 值都可以将一个元素设置成块级元素。</p>\n<blockquote>\n<p>举个例子来说，<code>li</code> 是一个 <code>块级元素</code>，但也有人会说它是一个 <code>块元素</code>。嗯，<code>li</code> 确实是一个块级元素，但并不是一个块元素，为什么？</p>\n</blockquote>\n<p><a name=\"block-element\"></a></p>\n<h2 id=\"什么是块元素？\"><a href=\"#什么是块元素？\" class=\"headerlink\" title=\"什么是块元素？\"></a>什么是块元素？</h2><p>块元素是 <code>display</code> 属性值为 <code>block</code> 的元素，它应该是 <code>块级元素</code> 的一个子集，而不是等同的，一个 <code>块元素</code> 是一个 <code>块级元素</code>，但一个 <code>块级元素</code> 不一定是一个 <code>块元素</code>，所以不要混淆。</p>\n<p><a name=\"block-boxes\"></a></p>\n<h2 id=\"块级框，块容器框，块框\"><a href=\"#块级框，块容器框，块框\" class=\"headerlink\" title=\"块级框，块容器框，块框\"></a>块级框，块容器框，块框</h2><h3 id=\"什么是块级框？\"><a href=\"#什么是块级框？\" class=\"headerlink\" title=\"什么是块级框？\"></a>什么是块级框？</h3><p>块级元素生成块级框，这些框会参与某些 <code>BFC</code>。每个块级元素都会生成一个主要的块级框来包含其子框和生成的内容，同时任何定位方式都会与这个主要的块级框有关。</p>\n<p>某些块级元素还会在主要的块级框之外产生额外的框：例如 <code>list-item</code> 元素，它需要生成一个额外的框用于包含 <code>list-style-type</code>。这些额外的框会相对于主要的块级框来进行排版。</p>\n<h3 id=\"什么是块容器框？\"><a href=\"#什么是块容器框？\" class=\"headerlink\" title=\"什么是块容器框？\"></a>什么是块容器框？</h3><p>一个 <code>块容器框</code> 要么只包含 <code>块级框</code>，要么创建一个 <code>IFC</code> 而只包含 <code>行内级框</code>，但不能同时包含 <code>块级框</code> 和 <code>行内级框</code>。</p>\n<p>除了 <code>table框</code> 和 <code>置换元素</code>，一个 <code>块级框</code> 同时也是一个 <code>块容器框</code>。<code>非置换的行内块</code> 和 <code>单元格</code> 是 <code>块容器</code> 但不是 <code>块级框</code>。</p>\n<p>并不是所有的 <code>块级框</code> 都是 <code>块容器框</code>，也并不是所有的 <code>块容器框</code> 都是 <code>块级框</code>。</p>\n<p><code>块级框</code> 和 <code>块容器框</code> 的另外一个重要的区别是：<code>块级框</code> 需要能够包含其生成的内容，但 <code>块容器框</code> 并不需要。这是什么意思呢？简单的解释一下：</p>\n<blockquote>\n<p>比如一个 <code>iframe</code> 其内容由 <code>src</code> 属性所决定，这可以当成是生成的内容，所以 <code>iframe</code> 是一个 <code>块级框</code> 但却不是 <code>块容器框</code></p>\n</blockquote>\n<h3 id=\"什么是块框？\"><a href=\"#什么是块框？\" class=\"headerlink\" title=\"什么是块框？\"></a>什么是块框？</h3><p>简要的来说，是 <code>块容器</code> 的 <code>块级框</code> 称之为 <code>块框</code>。</p>\n<p>可以通过下面这个图来快速的梳理清楚这3者之间的联系：</p>\n<p><img src=\"../../../../../image/boxes/block-boxes.png\" alt=\"block boxes\">（图一）</p>\n<p>说完了块级框，接下来说说行内级框</p>\n<p><a name=\"inline-level-element\"></a></p>\n<h2 id=\"什么是行内级元素？\"><a href=\"#什么是行内级元素？\" class=\"headerlink\" title=\"什么是行内级元素？\"></a>什么是行内级元素？</h2><p>行内级元素是那些不会为自身内容形成新的块，而让内容分布在多行中的元素。<code>display</code> 属性的：<code>inline</code>, <code>inline-table</code>, <code>inline-block</code>, <code>inline-flex</code>, <code>inline-grid</code> 值都可以将一个元素设置成行内级元素。</p>\n<p><a name=\"inline-element\"></a></p>\n<h2 id=\"什么是行内元素？\"><a href=\"#什么是行内元素？\" class=\"headerlink\" title=\"什么是行内元素？\"></a>什么是行内元素？</h2><p>如同块元素之于块级元素的关系，行内元素仅仅是 <code>display</code> 属性值为 <code>inline</code> 的元素，这里不再赘述。</p>\n<p><a name=\"inline-boxes\"></a></p>\n<h2 id=\"行内级框，原子行内级框，行内框\"><a href=\"#行内级框，原子行内级框，行内框\" class=\"headerlink\" title=\"行内级框，原子行内级框，行内框\"></a>行内级框，原子行内级框，行内框</h2><p>行内级元素生成行内级框，而这些框会参与某个 <code>IFC</code>。一个 <code>行内框</code> 是 <code>行内级框</code>，且其内容参与了包含它的 <code>IFC</code>。一个 <code>display</code> 值是 <code>inline</code> 的非置换元素会生成一个行内框。那些不是行内框的行内级框（例如行内级置换元素、行内块元素、行内表格元素）被称为 <code>原子行内级框</code>，因为它们是以单一不透明框的形式来参与其 <code>IFC</code> 的。</p>\n<p>细心的你会发现并没有一个 <code>行内容器框</code> 与 <code>块容器框</code> 相对应，但却多了一个 <code>原子行内级框</code>。并且有趣的是<code>行内块</code>（包括置换和非置换元素）是<code>原子行内级框</code>，而<code>非置换行内块</code>却同时还是<code>块容器框</code>。</p>\n<p><img src=\"../../../../../image/boxes/inline-boxes.png\" alt=\"inline boxes\">（图二）</p>\n<p><a name=\"anonymous-boxes\"></a></p>\n<h2 id=\"匿名框\"><a href=\"#匿名框\" class=\"headerlink\" title=\"匿名框\"></a>匿名框</h2><p><code>匿名框</code> 包括 <code>匿名块框</code> 和 <code>匿名行内框</code>。</p>\n<p>假设一个 <code>div</code> 中包含有一个 <code>p</code> 和一段纯文本 <code>xxx</code>。由于 <code>块容器框</code> 只允许要么包含 <code>块级框</code>，要么包含 <code>行内级框</code>，所以，为了符合这种情况，<code>div</code> 会生成一个匿名的块级框用于包裹 <code>xxx</code>，这个匿名框就叫做 <code>匿名块框</code>。</p>\n<p>我们拿 <code>W3C</code> 上的一个例子来加深对匿名块框的印象：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  Some text</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://www.w3.org/TR/CSS2/images/anon-block.png\" alt=\"Anonymous block boxes\">（图三）</p>\n<p>与此同时，我们将上面的代码稍微改一下，将 <code>p</code> 变成 <code>span</code>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  Some text</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>More text<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><code>div</code> 生成一个块框，<code>More text</code> 由 <code>span</code> 生成一个行内框，由于 <code>Some text</code> 没有与之相关的行级元素，将由 <code>div</code> 为其生成一个行内框用以包裹，这个框称为匿名行内框。如图四：</p>\n<p><img src=\"../../../../../image/boxes/anon-inline.png\" alt=\"Anonymous block boxes\">（图四）</p>\n<p>假设一个匿名框的类型可根据上下文来清晰界定，则 <code>匿名行内框</code> 和 <code>匿名块框</code> 都可被简称为 <code>匿名框</code>。</p>\n<p>匿名框的继承属性会从包含它的非匿名框那里继承，非继承属性取其初始值。</p>\n<h2 id=\"附注：\"><a href=\"#附注：\" class=\"headerlink\" title=\"附注：\"></a>附注：</h2><ul>\n<li>① 用户代理一般会向用户提供一个载体（屏幕上的一个窗口或其它可视区域）用以访问文档，这个载体就叫做 <code>视口</code>。用户代理可以在视口大小被调整时改变文档的布局。如果视口小于渲染文档的画布区域，用户代理应当提供一个滚动机制。每个画布只能拥有一个视口，但用户代理可以把文档渲染至多个画布上（即为相同文档提供不同的视图）。</li>\n</ul>\n<h2 id=\"说明：\"><a href=\"#说明：\" class=\"headerlink\" title=\"说明：\"></a>说明：</h2><ul>\n<li>最近的文章都是断断续续写的，如读者朋友发现存在描述错误地方请及时提醒。</li>\n</ul>"},{"title":"一年又要过去了","date":"2013-11-28T03:15:00.000Z","author":"xiupi酱","_content":"\n##\n\n不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！","source":"_posts/生活/一年又要过去了.md","raw":"title: 一年又要过去了\ndate: 2013-11-28 11:15:00\ncategories: 生活\nauthor: xiupi酱\ntags: [随笔, 生活]\n---\n\n##\n\n不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！","slug":"生活/一年又要过去了","published":1,"updated":"2016-09-06T19:19:11.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vq5000hlsvf0br7b3af","content":"<p>##</p>\n<p>不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！</p>\n","excerpt":"","more":"<p>##</p>\n<p>不知不觉，一年又要过去了。这是年龄暴增的节奏啊，以后是不能过青年节了么？次奥！</p>\n"},{"title":"MySQL流行的原因","date":"2016-09-06T20:14:22.000Z","author":"xiupi酱","_content":"## 简单\n\n\n尽管MySQL源码的入门门槛很高，很多人不能深入其中，但是MySQL的使用还是非常简单的，任何稍微有IT背景的技术人员都可以无师自通地参照文档安装运行和使用MySQL,这几乎没有什么门槛。同时，MySQL支持大部分ANSI SQL-92，略有经验的使用者都能完成基本的操作需求。\n\n## 开源\n\n开源意味着安全和免费，代码就摆在那里，无数的技术爱好者一起来审核程序，一起修补问题，这让使用者非常的放心。同时，开源带来了免费。从上世纪90年代末一直持续到现在，互联网的兴起并快速发展，对免费数据库的需求非常迫切，免费，也让规模化部署的需求成为可能。要知道很多大型互联网公司的MySQL集群都是数以千记或者万记的，如果是按照传统的商业数据库的收费模式，没有人愿意承担。免费，让数据库大规模使用成为可能，也提升了互联网的交互式服务的质量。\n\n## 复制\n\nMySQL从3.23.15这个版本开始，支持了replication，可以帮助MySQL使用者搭建Master-Slave的架构。把数据准实时的从一个实例同步到另一个实例。这个时间是2000年之前。要知道，其他一些开源数据库是在最近的几年里才开始支持这样的功能的,这对于数据库使用者来说，不管是在线备份还是读写分离，或者负载均衡到多个读库，意义实在太大了。\n\n在2010年之前，一个Master，多个slave的部署情况随处可见，我见过有12个slave的情形，可以设想，如果没有replication功能，我们要用数据库处理百万甚至是亿万规模的查询负载是非常困难的。\n\n## 引擎\n\nMySQL不同于其他多数数据库之处是它对插件式存储引擎的支持，这是一个开放的设计，有点兼容并包，海纳百川的感觉。熟悉MySQL的人随便就能报出几种MySQL存储引擎的名字，MyISAM，InnoDB，NDB,TokuDB，等等。\n\n而MySQL里最常用的，也是奠定了MySQL开源数据库之王地位的InnoDB，并不是Monty或者他的伙伴们开发的。插件式存储引擎的设计，让InnoDB以及其他存储引擎轻松接入到MySQL Server，集百家之长，这样MySQL就有了无限的活力和竞争力以保持其长盛不衰。\n\n## 支持\n\nMonty说在早期MySQL刚刚推出的时候，他亲自写了30000封邮件来帮助人们使用MySQL。这样持之以恒，不辞劳苦，不厌其烦的精神让人赞叹。我们自己也维护了一个开源数据库项目InceptionSQL审核。在过去的一年多里，我们也碰到了很多很多的使用者提问的问题，这种感受，真的是只有经历过才能体会其中的付出。\n\n## 合作\n\nMySQL在发布的早期，就广泛的跟其他社区合作，PHP和Perl的开发者都很愿意去传播MySQL的技术和新闻，很多Linux版本都会预装MySQL。一度LAMP（Linux，Apace，MySQL，Php）成为站长或者开发者的标配。MySQL在各种合作中逐步深入人心,遍地开花。\n**关注一下；你就知道**\n![关注一下；你就知道][1]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","source":"_posts/后端/MySQL流行的原因.md","raw":"title: MySQL流行的原因\ndate: 2016-09-07 04:14:22\nauthor: xiupi酱\ncategories: 后端\ntags: [MySQL, mysql]\n---\n## 简单\n\n\n尽管MySQL源码的入门门槛很高，很多人不能深入其中，但是MySQL的使用还是非常简单的，任何稍微有IT背景的技术人员都可以无师自通地参照文档安装运行和使用MySQL,这几乎没有什么门槛。同时，MySQL支持大部分ANSI SQL-92，略有经验的使用者都能完成基本的操作需求。\n\n## 开源\n\n开源意味着安全和免费，代码就摆在那里，无数的技术爱好者一起来审核程序，一起修补问题，这让使用者非常的放心。同时，开源带来了免费。从上世纪90年代末一直持续到现在，互联网的兴起并快速发展，对免费数据库的需求非常迫切，免费，也让规模化部署的需求成为可能。要知道很多大型互联网公司的MySQL集群都是数以千记或者万记的，如果是按照传统的商业数据库的收费模式，没有人愿意承担。免费，让数据库大规模使用成为可能，也提升了互联网的交互式服务的质量。\n\n## 复制\n\nMySQL从3.23.15这个版本开始，支持了replication，可以帮助MySQL使用者搭建Master-Slave的架构。把数据准实时的从一个实例同步到另一个实例。这个时间是2000年之前。要知道，其他一些开源数据库是在最近的几年里才开始支持这样的功能的,这对于数据库使用者来说，不管是在线备份还是读写分离，或者负载均衡到多个读库，意义实在太大了。\n\n在2010年之前，一个Master，多个slave的部署情况随处可见，我见过有12个slave的情形，可以设想，如果没有replication功能，我们要用数据库处理百万甚至是亿万规模的查询负载是非常困难的。\n\n## 引擎\n\nMySQL不同于其他多数数据库之处是它对插件式存储引擎的支持，这是一个开放的设计，有点兼容并包，海纳百川的感觉。熟悉MySQL的人随便就能报出几种MySQL存储引擎的名字，MyISAM，InnoDB，NDB,TokuDB，等等。\n\n而MySQL里最常用的，也是奠定了MySQL开源数据库之王地位的InnoDB，并不是Monty或者他的伙伴们开发的。插件式存储引擎的设计，让InnoDB以及其他存储引擎轻松接入到MySQL Server，集百家之长，这样MySQL就有了无限的活力和竞争力以保持其长盛不衰。\n\n## 支持\n\nMonty说在早期MySQL刚刚推出的时候，他亲自写了30000封邮件来帮助人们使用MySQL。这样持之以恒，不辞劳苦，不厌其烦的精神让人赞叹。我们自己也维护了一个开源数据库项目InceptionSQL审核。在过去的一年多里，我们也碰到了很多很多的使用者提问的问题，这种感受，真的是只有经历过才能体会其中的付出。\n\n## 合作\n\nMySQL在发布的早期，就广泛的跟其他社区合作，PHP和Perl的开发者都很愿意去传播MySQL的技术和新闻，很多Linux版本都会预装MySQL。一度LAMP（Linux，Apace，MySQL，Php）成为站长或者开发者的标配。MySQL在各种合作中逐步深入人心,遍地开花。\n**关注一下；你就知道**\n![关注一下；你就知道][1]\n\n\n  [1]: http://od3jhy35s.bkt.clouddn.com/ewm.jpg","slug":"后端/MySQL流行的原因","published":1,"updated":"2016-09-06T20:46:21.906Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vq7000jlsvfx3a4se9j","content":"<h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><p>尽管MySQL源码的入门门槛很高，很多人不能深入其中，但是MySQL的使用还是非常简单的，任何稍微有IT背景的技术人员都可以无师自通地参照文档安装运行和使用MySQL,这几乎没有什么门槛。同时，MySQL支持大部分ANSI SQL-92，略有经验的使用者都能完成基本的操作需求。</p>\n<h2 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h2><p>开源意味着安全和免费，代码就摆在那里，无数的技术爱好者一起来审核程序，一起修补问题，这让使用者非常的放心。同时，开源带来了免费。从上世纪90年代末一直持续到现在，互联网的兴起并快速发展，对免费数据库的需求非常迫切，免费，也让规模化部署的需求成为可能。要知道很多大型互联网公司的MySQL集群都是数以千记或者万记的，如果是按照传统的商业数据库的收费模式，没有人愿意承担。免费，让数据库大规模使用成为可能，也提升了互联网的交互式服务的质量。</p>\n<h2 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h2><p>MySQL从3.23.15这个版本开始，支持了replication，可以帮助MySQL使用者搭建Master-Slave的架构。把数据准实时的从一个实例同步到另一个实例。这个时间是2000年之前。要知道，其他一些开源数据库是在最近的几年里才开始支持这样的功能的,这对于数据库使用者来说，不管是在线备份还是读写分离，或者负载均衡到多个读库，意义实在太大了。</p>\n<p>在2010年之前，一个Master，多个slave的部署情况随处可见，我见过有12个slave的情形，可以设想，如果没有replication功能，我们要用数据库处理百万甚至是亿万规模的查询负载是非常困难的。</p>\n<h2 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h2><p>MySQL不同于其他多数数据库之处是它对插件式存储引擎的支持，这是一个开放的设计，有点兼容并包，海纳百川的感觉。熟悉MySQL的人随便就能报出几种MySQL存储引擎的名字，MyISAM，InnoDB，NDB,TokuDB，等等。</p>\n<p>而MySQL里最常用的，也是奠定了MySQL开源数据库之王地位的InnoDB，并不是Monty或者他的伙伴们开发的。插件式存储引擎的设计，让InnoDB以及其他存储引擎轻松接入到MySQL Server，集百家之长，这样MySQL就有了无限的活力和竞争力以保持其长盛不衰。</p>\n<h2 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h2><p>Monty说在早期MySQL刚刚推出的时候，他亲自写了30000封邮件来帮助人们使用MySQL。这样持之以恒，不辞劳苦，不厌其烦的精神让人赞叹。我们自己也维护了一个开源数据库项目InceptionSQL审核。在过去的一年多里，我们也碰到了很多很多的使用者提问的问题，这种感受，真的是只有经历过才能体会其中的付出。</p>\n<h2 id=\"合作\"><a href=\"#合作\" class=\"headerlink\" title=\"合作\"></a>合作</h2><p>MySQL在发布的早期，就广泛的跟其他社区合作，PHP和Perl的开发者都很愿意去传播MySQL的技术和新闻，很多Linux版本都会预装MySQL。一度LAMP（Linux，Apace，MySQL，Php）成为站长或者开发者的标配。MySQL在各种合作中逐步深入人心,遍地开花。<br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n","excerpt":"","more":"<h2 id=\"简单\"><a href=\"#简单\" class=\"headerlink\" title=\"简单\"></a>简单</h2><p>尽管MySQL源码的入门门槛很高，很多人不能深入其中，但是MySQL的使用还是非常简单的，任何稍微有IT背景的技术人员都可以无师自通地参照文档安装运行和使用MySQL,这几乎没有什么门槛。同时，MySQL支持大部分ANSI SQL-92，略有经验的使用者都能完成基本的操作需求。</p>\n<h2 id=\"开源\"><a href=\"#开源\" class=\"headerlink\" title=\"开源\"></a>开源</h2><p>开源意味着安全和免费，代码就摆在那里，无数的技术爱好者一起来审核程序，一起修补问题，这让使用者非常的放心。同时，开源带来了免费。从上世纪90年代末一直持续到现在，互联网的兴起并快速发展，对免费数据库的需求非常迫切，免费，也让规模化部署的需求成为可能。要知道很多大型互联网公司的MySQL集群都是数以千记或者万记的，如果是按照传统的商业数据库的收费模式，没有人愿意承担。免费，让数据库大规模使用成为可能，也提升了互联网的交互式服务的质量。</p>\n<h2 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h2><p>MySQL从3.23.15这个版本开始，支持了replication，可以帮助MySQL使用者搭建Master-Slave的架构。把数据准实时的从一个实例同步到另一个实例。这个时间是2000年之前。要知道，其他一些开源数据库是在最近的几年里才开始支持这样的功能的,这对于数据库使用者来说，不管是在线备份还是读写分离，或者负载均衡到多个读库，意义实在太大了。</p>\n<p>在2010年之前，一个Master，多个slave的部署情况随处可见，我见过有12个slave的情形，可以设想，如果没有replication功能，我们要用数据库处理百万甚至是亿万规模的查询负载是非常困难的。</p>\n<h2 id=\"引擎\"><a href=\"#引擎\" class=\"headerlink\" title=\"引擎\"></a>引擎</h2><p>MySQL不同于其他多数数据库之处是它对插件式存储引擎的支持，这是一个开放的设计，有点兼容并包，海纳百川的感觉。熟悉MySQL的人随便就能报出几种MySQL存储引擎的名字，MyISAM，InnoDB，NDB,TokuDB，等等。</p>\n<p>而MySQL里最常用的，也是奠定了MySQL开源数据库之王地位的InnoDB，并不是Monty或者他的伙伴们开发的。插件式存储引擎的设计，让InnoDB以及其他存储引擎轻松接入到MySQL Server，集百家之长，这样MySQL就有了无限的活力和竞争力以保持其长盛不衰。</p>\n<h2 id=\"支持\"><a href=\"#支持\" class=\"headerlink\" title=\"支持\"></a>支持</h2><p>Monty说在早期MySQL刚刚推出的时候，他亲自写了30000封邮件来帮助人们使用MySQL。这样持之以恒，不辞劳苦，不厌其烦的精神让人赞叹。我们自己也维护了一个开源数据库项目InceptionSQL审核。在过去的一年多里，我们也碰到了很多很多的使用者提问的问题，这种感受，真的是只有经历过才能体会其中的付出。</p>\n<h2 id=\"合作\"><a href=\"#合作\" class=\"headerlink\" title=\"合作\"></a>合作</h2><p>MySQL在发布的早期，就广泛的跟其他社区合作，PHP和Perl的开发者都很愿意去传播MySQL的技术和新闻，很多Linux版本都会预装MySQL。一度LAMP（Linux，Apace，MySQL，Php）成为站长或者开发者的标配。MySQL在各种合作中逐步深入人心,遍地开花。<br><strong>关注一下；你就知道</strong><br><img src=\"http://od3jhy35s.bkt.clouddn.com/ewm.jpg\" alt=\"关注一下；你就知道\"></p>\n"},{"title":"viewport详解","date":"2016-09-06T18:41:36.000Z","author":"xiupi酱","_content":"\n## 前言\n\n这次想聊聊移动开发相关的事。是的，你没有看错，一句话就可以开始你的移动前端开发。\n\n你心里一定在想，什么话这么酷，能够瞬间带入到移动前端开发的世界。\n\n但其实它一点也不新奇，不复杂。\n\n## viewport简介\n\n没错，就是`viewport`特性，一个移动专属的`Meta`值，用于定义视口的各种行为。\n\n该特性最先由`Apple`引入，用于解决移动端的页面展示问题，后续被越来越多的厂商跟进。\n\n举个简单的例子来讲为什么会需要它：\n\n我们知道用户大规模使用手机等移动设备来进行网页浏览器，其实得益于智能手持设备的兴起，也就是近几年的事。（还记得不久前的几年，满大街都还是诺基亚的天下么？）\n\n这时有一个很现实的问题摆在了厂商面前，用户并不能很好地通过手机等设备访问网页，因为屏幕太小。\n\n<!--more-->\n\n### layout viewport\n\n`Apple`也发现了这个问题，并且适时的出现，它提出了一个方案用来解决这个问题。在iOS Safari中定义了一个`viewport meta`标签，用来创建一个虚拟的`布局视口（layout viewport）`，而这个视口的分辨率接近于PC显示器，`Apple`将其定义为`980px`（其他厂商各有不同①）。\n\n这就很好的解决了早期的页面在手机上显示的问题，由于两者之间的宽度趋近，CSS只需要像在PC上那样渲染页面就行，原有的页面结构不会被破坏。\n\n> ①的描述大致如下，数值不一定持续准确，厂商可能更改，但这个绝对值其实并非特别重要：\n> iOS, Android基本都是: 980px\n> BlackBerry: 1024px\n\n### visual viewport\n\n有了`layout viewport`，我们还需要一个视口用来承载它，这个视口可以简单的认为是手持设备物理屏幕的可视区域，我们称之为`（视觉视口）visual viewport`。这是一个比较直观的概念，因为你能看得见你的手机屏幕。\n\n对于`visual viewport`，开发者一般只需要知道它的存在和概念就行，因为无法对它进行任何设置或者修改。很明显，`visual viewport`的尺寸不会是一个固定的值，甚至每款设备都可能不同。大致列几种常见设备的`visual viewport`尺寸：\n\n* iPhone4~iPhone5S: 320*480px\n* iPhone6~iPhone6S: 375*627px\n* iPhone6 Plus~iPhone6S Plus: 414*736px\n\n以`iPhone4S`为例，会在其320px②的`visual viewport`上，创建一个宽`980px`的`layout viewport`，于是用户可以在`visual viewport`中拖动或者缩放网页，来获得良好的浏览效果；布局视口用来配合CSS渲染布局，当我们定义一个容器的宽度为`100%`时，这个容器的实际宽度是`980px`而不是`320px`，通过这种方式大部分网页就能以缩放的形式正常显示在手机屏幕上了。\n\n> ②的描述大致如下：\n> 早期移动前端开发工程师常能见到宽640px的设计稿，原因就是UI工程师以物理屏幕宽度为320px的`iPhone4-iPhone5S`作为参照设计；\n> 当然，现在你还可能会见到750px和1242px尺寸的设计稿，原因当然是iPhone6的出现\n\n当然，为了更好的适配移动端或者只为移动端设计的应用，单有布局视口和视觉视口还是不够的。\n\n### ideal viewport\n\n我们还需要一个视口，它类似于布局视口，但宽度和视觉视口相同，这就是完美视口（ideal viewport）。\n\n有了完美视口，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过`viewport meta`的某种设置来达到。\n\n说了这么一大堆的东西，貌似都和`viewport`有关联，那么`viewport`到底怎么搞，请继续往下。\n\n> 关于3个视口，[PPK](http://www.quirksmode.org/)已经做了非常棒的阐释，你也可以在`StackOverflow`上找到一些对此描述的相互补充，例如：[[1]](http://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport), [[2]](http://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices)，有兴趣的童鞋也可以看看\n\n## viewport特性\n\n通常情况下，`viewport`有以下6种设置。当然厂商可能会增加一些特定的设置，比如iOS Safari7.1增加了一种在网页加载时隐藏地址栏与导航栏的设置：`minimal-ui`，不过随后又将之移除了。\n\nName|Value|Description\n---|---|\nwidth|正整数或`device-width`|定义视口的宽度，单位为像素\nheight|正整数或`device-height`|定义视口的高度，单位为像素\ninitial-scale|[0.0-10.0]|定义初始缩放值\nminimum-scale|[0.0-10.0]|定义缩小最小比例，它必须小于或等于maximum-scale设置\nmaximum-scale|[0.0-10.0]|定义放大最大比例，它必须大于或等于minimum-scale设置\nuser-scalable|yes/no|定义是否允许用户手动缩放页面，默认值yes\n\n### width\n\n`width`被用来定义`layout viewport`的宽度，如果不指定该属性（或者移除`viewport meta`标签），则`layout viewport`宽度为厂商默认值。如：iPhone为`980px`；\n\n举个例子：\n\n```\n<meta name=\"viewport\" content=\"width=device-width\" />\n```\n\n此时的`layout viewport`将成为`ideal viewport`，因为`layout viewport`宽度与设备视觉视口宽度一致了。\n\n除了`width`之外，还有一个属性定义也能实现`ideal viewport`，那就是`initial-scale`。\n\n### height\n\n与`width`类似，但实际上却不常用，因为没有太多的use case。\n\n### initial-scale\n\n如果想页面默认以某个比例放大或者缩小然后呈现给用户，那么可以通过定义`initial-scale`来完成。\n\n`initial-scale`用于指定页面的初始缩放比例，假定你这样定义：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=2\" />\n```\n\n那么用户将会看到2倍大小的页面内容。\n\n在说`width`的时候，我们说到`initial-scale`也能实现`ideal viewport`，是的，你只需要这样做，也可以得到完美视口：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=1\" />\n```\n\n### maximum-scale\n\n在移动端，你可能会考虑用户浏览不便，然后给予用户放大页面的权利，但同时又希望是在一定范围内的放大，这时就可以使用`maximum-scale`来进行约束。\n\n`maximum-scale`用于指定用户能够放大的比例。\n\n举个例子来讲：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=5\" />\n```\n\n假设页面的默认缩放值`initial-scale`是`1`，那么用户最终能够将页面放大到这个初始页面大小的5倍。\n\n### minimum-scale\n\n类似`maximum-scale`的描述，不过`minimum-scale`是用来指定页面缩小比例的。\n\n通常情况下，为了有更好地体验，不会定义该属性的值比`1`更小，因为那样页面将变得难以阅读。\n\n### user-scalable\n\n如果你不想页面被放大或者缩小，通过定义`user-scalable`来约束用户是否可以通过手势对页面进行缩放即可。\n\n该属性的默认值为`yes`，即可被缩放（如果使用默认值，该属性可以不定义）；当然，如果你的应用不打算让用户拥有缩放权限，可以将该值设置为`no`。\n\n使用方法如下：\n\n```\n<meta name=\"viewport\" content=\"user-scalable=no\" />\n```\n\n## 结语\n\n正如开篇所说，这既不高深也不新奇，它而仅仅是一点观念转变。\n\n当你掌握了`viewport`，那么意味着你已经大致了解了移动平台与PC平台的不同，你可以更专注而细致的去解决某些平台差异问题。","source":"_posts/移动端/viewport详解.md","raw":"title: viewport详解\ndate: 2016-09-07 02:41:36\nauthor: xiupi酱\ncategories: 移动端\ntags: [HTML5, viewport]\n---\n\n## 前言\n\n这次想聊聊移动开发相关的事。是的，你没有看错，一句话就可以开始你的移动前端开发。\n\n你心里一定在想，什么话这么酷，能够瞬间带入到移动前端开发的世界。\n\n但其实它一点也不新奇，不复杂。\n\n## viewport简介\n\n没错，就是`viewport`特性，一个移动专属的`Meta`值，用于定义视口的各种行为。\n\n该特性最先由`Apple`引入，用于解决移动端的页面展示问题，后续被越来越多的厂商跟进。\n\n举个简单的例子来讲为什么会需要它：\n\n我们知道用户大规模使用手机等移动设备来进行网页浏览器，其实得益于智能手持设备的兴起，也就是近几年的事。（还记得不久前的几年，满大街都还是诺基亚的天下么？）\n\n这时有一个很现实的问题摆在了厂商面前，用户并不能很好地通过手机等设备访问网页，因为屏幕太小。\n\n<!--more-->\n\n### layout viewport\n\n`Apple`也发现了这个问题，并且适时的出现，它提出了一个方案用来解决这个问题。在iOS Safari中定义了一个`viewport meta`标签，用来创建一个虚拟的`布局视口（layout viewport）`，而这个视口的分辨率接近于PC显示器，`Apple`将其定义为`980px`（其他厂商各有不同①）。\n\n这就很好的解决了早期的页面在手机上显示的问题，由于两者之间的宽度趋近，CSS只需要像在PC上那样渲染页面就行，原有的页面结构不会被破坏。\n\n> ①的描述大致如下，数值不一定持续准确，厂商可能更改，但这个绝对值其实并非特别重要：\n> iOS, Android基本都是: 980px\n> BlackBerry: 1024px\n\n### visual viewport\n\n有了`layout viewport`，我们还需要一个视口用来承载它，这个视口可以简单的认为是手持设备物理屏幕的可视区域，我们称之为`（视觉视口）visual viewport`。这是一个比较直观的概念，因为你能看得见你的手机屏幕。\n\n对于`visual viewport`，开发者一般只需要知道它的存在和概念就行，因为无法对它进行任何设置或者修改。很明显，`visual viewport`的尺寸不会是一个固定的值，甚至每款设备都可能不同。大致列几种常见设备的`visual viewport`尺寸：\n\n* iPhone4~iPhone5S: 320*480px\n* iPhone6~iPhone6S: 375*627px\n* iPhone6 Plus~iPhone6S Plus: 414*736px\n\n以`iPhone4S`为例，会在其320px②的`visual viewport`上，创建一个宽`980px`的`layout viewport`，于是用户可以在`visual viewport`中拖动或者缩放网页，来获得良好的浏览效果；布局视口用来配合CSS渲染布局，当我们定义一个容器的宽度为`100%`时，这个容器的实际宽度是`980px`而不是`320px`，通过这种方式大部分网页就能以缩放的形式正常显示在手机屏幕上了。\n\n> ②的描述大致如下：\n> 早期移动前端开发工程师常能见到宽640px的设计稿，原因就是UI工程师以物理屏幕宽度为320px的`iPhone4-iPhone5S`作为参照设计；\n> 当然，现在你还可能会见到750px和1242px尺寸的设计稿，原因当然是iPhone6的出现\n\n当然，为了更好的适配移动端或者只为移动端设计的应用，单有布局视口和视觉视口还是不够的。\n\n### ideal viewport\n\n我们还需要一个视口，它类似于布局视口，但宽度和视觉视口相同，这就是完美视口（ideal viewport）。\n\n有了完美视口，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过`viewport meta`的某种设置来达到。\n\n说了这么一大堆的东西，貌似都和`viewport`有关联，那么`viewport`到底怎么搞，请继续往下。\n\n> 关于3个视口，[PPK](http://www.quirksmode.org/)已经做了非常棒的阐释，你也可以在`StackOverflow`上找到一些对此描述的相互补充，例如：[[1]](http://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport), [[2]](http://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices)，有兴趣的童鞋也可以看看\n\n## viewport特性\n\n通常情况下，`viewport`有以下6种设置。当然厂商可能会增加一些特定的设置，比如iOS Safari7.1增加了一种在网页加载时隐藏地址栏与导航栏的设置：`minimal-ui`，不过随后又将之移除了。\n\nName|Value|Description\n---|---|\nwidth|正整数或`device-width`|定义视口的宽度，单位为像素\nheight|正整数或`device-height`|定义视口的高度，单位为像素\ninitial-scale|[0.0-10.0]|定义初始缩放值\nminimum-scale|[0.0-10.0]|定义缩小最小比例，它必须小于或等于maximum-scale设置\nmaximum-scale|[0.0-10.0]|定义放大最大比例，它必须大于或等于minimum-scale设置\nuser-scalable|yes/no|定义是否允许用户手动缩放页面，默认值yes\n\n### width\n\n`width`被用来定义`layout viewport`的宽度，如果不指定该属性（或者移除`viewport meta`标签），则`layout viewport`宽度为厂商默认值。如：iPhone为`980px`；\n\n举个例子：\n\n```\n<meta name=\"viewport\" content=\"width=device-width\" />\n```\n\n此时的`layout viewport`将成为`ideal viewport`，因为`layout viewport`宽度与设备视觉视口宽度一致了。\n\n除了`width`之外，还有一个属性定义也能实现`ideal viewport`，那就是`initial-scale`。\n\n### height\n\n与`width`类似，但实际上却不常用，因为没有太多的use case。\n\n### initial-scale\n\n如果想页面默认以某个比例放大或者缩小然后呈现给用户，那么可以通过定义`initial-scale`来完成。\n\n`initial-scale`用于指定页面的初始缩放比例，假定你这样定义：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=2\" />\n```\n\n那么用户将会看到2倍大小的页面内容。\n\n在说`width`的时候，我们说到`initial-scale`也能实现`ideal viewport`，是的，你只需要这样做，也可以得到完美视口：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=1\" />\n```\n\n### maximum-scale\n\n在移动端，你可能会考虑用户浏览不便，然后给予用户放大页面的权利，但同时又希望是在一定范围内的放大，这时就可以使用`maximum-scale`来进行约束。\n\n`maximum-scale`用于指定用户能够放大的比例。\n\n举个例子来讲：\n\n```\n<meta name=\"viewport\" content=\"initial-scale=1,maximum-scale=5\" />\n```\n\n假设页面的默认缩放值`initial-scale`是`1`，那么用户最终能够将页面放大到这个初始页面大小的5倍。\n\n### minimum-scale\n\n类似`maximum-scale`的描述，不过`minimum-scale`是用来指定页面缩小比例的。\n\n通常情况下，为了有更好地体验，不会定义该属性的值比`1`更小，因为那样页面将变得难以阅读。\n\n### user-scalable\n\n如果你不想页面被放大或者缩小，通过定义`user-scalable`来约束用户是否可以通过手势对页面进行缩放即可。\n\n该属性的默认值为`yes`，即可被缩放（如果使用默认值，该属性可以不定义）；当然，如果你的应用不打算让用户拥有缩放权限，可以将该值设置为`no`。\n\n使用方法如下：\n\n```\n<meta name=\"viewport\" content=\"user-scalable=no\" />\n```\n\n## 结语\n\n正如开篇所说，这既不高深也不新奇，它而仅仅是一点观念转变。\n\n当你掌握了`viewport`，那么意味着你已经大致了解了移动平台与PC平台的不同，你可以更专注而细致的去解决某些平台差异问题。","slug":"移动端/viewport详解","published":1,"updated":"2016-09-06T18:46:03.833Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vq7000mlsvffkera9sr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这次想聊聊移动开发相关的事。是的，你没有看错，一句话就可以开始你的移动前端开发。</p>\n<p>你心里一定在想，什么话这么酷，能够瞬间带入到移动前端开发的世界。</p>\n<p>但其实它一点也不新奇，不复杂。</p>\n<h2 id=\"viewport简介\"><a href=\"#viewport简介\" class=\"headerlink\" title=\"viewport简介\"></a>viewport简介</h2><p>没错，就是<code>viewport</code>特性，一个移动专属的<code>Meta</code>值，用于定义视口的各种行为。</p>\n<p>该特性最先由<code>Apple</code>引入，用于解决移动端的页面展示问题，后续被越来越多的厂商跟进。</p>\n<p>举个简单的例子来讲为什么会需要它：</p>\n<p>我们知道用户大规模使用手机等移动设备来进行网页浏览器，其实得益于智能手持设备的兴起，也就是近几年的事。（还记得不久前的几年，满大街都还是诺基亚的天下么？）</p>\n<p>这时有一个很现实的问题摆在了厂商面前，用户并不能很好地通过手机等设备访问网页，因为屏幕太小。</p>\n<a id=\"more\"></a>\n<h3 id=\"layout-viewport\"><a href=\"#layout-viewport\" class=\"headerlink\" title=\"layout viewport\"></a>layout viewport</h3><p><code>Apple</code>也发现了这个问题，并且适时的出现，它提出了一个方案用来解决这个问题。在iOS Safari中定义了一个<code>viewport meta</code>标签，用来创建一个虚拟的<code>布局视口（layout viewport）</code>，而这个视口的分辨率接近于PC显示器，<code>Apple</code>将其定义为<code>980px</code>（其他厂商各有不同①）。</p>\n<p>这就很好的解决了早期的页面在手机上显示的问题，由于两者之间的宽度趋近，CSS只需要像在PC上那样渲染页面就行，原有的页面结构不会被破坏。</p>\n<blockquote>\n<p>①的描述大致如下，数值不一定持续准确，厂商可能更改，但这个绝对值其实并非特别重要：<br>iOS, Android基本都是: 980px<br>BlackBerry: 1024px</p>\n</blockquote>\n<h3 id=\"visual-viewport\"><a href=\"#visual-viewport\" class=\"headerlink\" title=\"visual viewport\"></a>visual viewport</h3><p>有了<code>layout viewport</code>，我们还需要一个视口用来承载它，这个视口可以简单的认为是手持设备物理屏幕的可视区域，我们称之为<code>（视觉视口）visual viewport</code>。这是一个比较直观的概念，因为你能看得见你的手机屏幕。</p>\n<p>对于<code>visual viewport</code>，开发者一般只需要知道它的存在和概念就行，因为无法对它进行任何设置或者修改。很明显，<code>visual viewport</code>的尺寸不会是一个固定的值，甚至每款设备都可能不同。大致列几种常见设备的<code>visual viewport</code>尺寸：</p>\n<ul>\n<li>iPhone4~iPhone5S: 320*480px</li>\n<li>iPhone6~iPhone6S: 375*627px</li>\n<li>iPhone6 Plus~iPhone6S Plus: 414*736px</li>\n</ul>\n<p>以<code>iPhone4S</code>为例，会在其320px②的<code>visual viewport</code>上，创建一个宽<code>980px</code>的<code>layout viewport</code>，于是用户可以在<code>visual viewport</code>中拖动或者缩放网页，来获得良好的浏览效果；布局视口用来配合CSS渲染布局，当我们定义一个容器的宽度为<code>100%</code>时，这个容器的实际宽度是<code>980px</code>而不是<code>320px</code>，通过这种方式大部分网页就能以缩放的形式正常显示在手机屏幕上了。</p>\n<blockquote>\n<p>②的描述大致如下：<br>早期移动前端开发工程师常能见到宽640px的设计稿，原因就是UI工程师以物理屏幕宽度为320px的<code>iPhone4-iPhone5S</code>作为参照设计；<br>当然，现在你还可能会见到750px和1242px尺寸的设计稿，原因当然是iPhone6的出现</p>\n</blockquote>\n<p>当然，为了更好的适配移动端或者只为移动端设计的应用，单有布局视口和视觉视口还是不够的。</p>\n<h3 id=\"ideal-viewport\"><a href=\"#ideal-viewport\" class=\"headerlink\" title=\"ideal viewport\"></a>ideal viewport</h3><p>我们还需要一个视口，它类似于布局视口，但宽度和视觉视口相同，这就是完美视口（ideal viewport）。</p>\n<p>有了完美视口，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过<code>viewport meta</code>的某种设置来达到。</p>\n<p>说了这么一大堆的东西，貌似都和<code>viewport</code>有关联，那么<code>viewport</code>到底怎么搞，请继续往下。</p>\n<blockquote>\n<p>关于3个视口，<a href=\"http://www.quirksmode.org/\" target=\"_blank\" rel=\"external\">PPK</a>已经做了非常棒的阐释，你也可以在<code>StackOverflow</code>上找到一些对此描述的相互补充，例如：<a href=\"http://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport\" target=\"_blank\" rel=\"external\">[1]</a>, <a href=\"http://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices\" target=\"_blank\" rel=\"external\">[2]</a>，有兴趣的童鞋也可以看看</p>\n</blockquote>\n<h2 id=\"viewport特性\"><a href=\"#viewport特性\" class=\"headerlink\" title=\"viewport特性\"></a>viewport特性</h2><p>通常情况下，<code>viewport</code>有以下6种设置。当然厂商可能会增加一些特定的设置，比如iOS Safari7.1增加了一种在网页加载时隐藏地址栏与导航栏的设置：<code>minimal-ui</code>，不过随后又将之移除了。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>正整数或<code>device-width</code></td>\n<td>定义视口的宽度，单位为像素</td>\n</tr>\n<tr>\n<td>height</td>\n<td>正整数或<code>device-height</code></td>\n<td>定义视口的高度，单位为像素</td>\n</tr>\n<tr>\n<td>initial-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义初始缩放值</td>\n</tr>\n<tr>\n<td>minimum-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义缩小最小比例，它必须小于或等于maximum-scale设置</td>\n</tr>\n<tr>\n<td>maximum-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义放大最大比例，它必须大于或等于minimum-scale设置</td>\n</tr>\n<tr>\n<td>user-scalable</td>\n<td>yes/no</td>\n<td>定义是否允许用户手动缩放页面，默认值yes</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"width\"><a href=\"#width\" class=\"headerlink\" title=\"width\"></a>width</h3><p><code>width</code>被用来定义<code>layout viewport</code>的宽度，如果不指定该属性（或者移除<code>viewport meta</code>标签），则<code>layout viewport</code>宽度为厂商默认值。如：iPhone为<code>980px</code>；</p>\n<p>举个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>此时的<code>layout viewport</code>将成为<code>ideal viewport</code>，因为<code>layout viewport</code>宽度与设备视觉视口宽度一致了。</p>\n<p>除了<code>width</code>之外，还有一个属性定义也能实现<code>ideal viewport</code>，那就是<code>initial-scale</code>。</p>\n<h3 id=\"height\"><a href=\"#height\" class=\"headerlink\" title=\"height\"></a>height</h3><p>与<code>width</code>类似，但实际上却不常用，因为没有太多的use case。</p>\n<h3 id=\"initial-scale\"><a href=\"#initial-scale\" class=\"headerlink\" title=\"initial-scale\"></a>initial-scale</h3><p>如果想页面默认以某个比例放大或者缩小然后呈现给用户，那么可以通过定义<code>initial-scale</code>来完成。</p>\n<p><code>initial-scale</code>用于指定页面的初始缩放比例，假定你这样定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=2\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>那么用户将会看到2倍大小的页面内容。</p>\n<p>在说<code>width</code>的时候，我们说到<code>initial-scale</code>也能实现<code>ideal viewport</code>，是的，你只需要这样做，也可以得到完美视口：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"maximum-scale\"><a href=\"#maximum-scale\" class=\"headerlink\" title=\"maximum-scale\"></a>maximum-scale</h3><p>在移动端，你可能会考虑用户浏览不便，然后给予用户放大页面的权利，但同时又希望是在一定范围内的放大，这时就可以使用<code>maximum-scale</code>来进行约束。</p>\n<p><code>maximum-scale</code>用于指定用户能够放大的比例。</p>\n<p>举个例子来讲：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1,maximum-scale=5\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>假设页面的默认缩放值<code>initial-scale</code>是<code>1</code>，那么用户最终能够将页面放大到这个初始页面大小的5倍。</p>\n<h3 id=\"minimum-scale\"><a href=\"#minimum-scale\" class=\"headerlink\" title=\"minimum-scale\"></a>minimum-scale</h3><p>类似<code>maximum-scale</code>的描述，不过<code>minimum-scale</code>是用来指定页面缩小比例的。</p>\n<p>通常情况下，为了有更好地体验，不会定义该属性的值比<code>1</code>更小，因为那样页面将变得难以阅读。</p>\n<h3 id=\"user-scalable\"><a href=\"#user-scalable\" class=\"headerlink\" title=\"user-scalable\"></a>user-scalable</h3><p>如果你不想页面被放大或者缩小，通过定义<code>user-scalable</code>来约束用户是否可以通过手势对页面进行缩放即可。</p>\n<p>该属性的默认值为<code>yes</code>，即可被缩放（如果使用默认值，该属性可以不定义）；当然，如果你的应用不打算让用户拥有缩放权限，可以将该值设置为<code>no</code>。</p>\n<p>使用方法如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>正如开篇所说，这既不高深也不新奇，它而仅仅是一点观念转变。</p>\n<p>当你掌握了<code>viewport</code>，那么意味着你已经大致了解了移动平台与PC平台的不同，你可以更专注而细致的去解决某些平台差异问题。</p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>这次想聊聊移动开发相关的事。是的，你没有看错，一句话就可以开始你的移动前端开发。</p>\n<p>你心里一定在想，什么话这么酷，能够瞬间带入到移动前端开发的世界。</p>\n<p>但其实它一点也不新奇，不复杂。</p>\n<h2 id=\"viewport简介\"><a href=\"#viewport简介\" class=\"headerlink\" title=\"viewport简介\"></a>viewport简介</h2><p>没错，就是<code>viewport</code>特性，一个移动专属的<code>Meta</code>值，用于定义视口的各种行为。</p>\n<p>该特性最先由<code>Apple</code>引入，用于解决移动端的页面展示问题，后续被越来越多的厂商跟进。</p>\n<p>举个简单的例子来讲为什么会需要它：</p>\n<p>我们知道用户大规模使用手机等移动设备来进行网页浏览器，其实得益于智能手持设备的兴起，也就是近几年的事。（还记得不久前的几年，满大街都还是诺基亚的天下么？）</p>\n<p>这时有一个很现实的问题摆在了厂商面前，用户并不能很好地通过手机等设备访问网页，因为屏幕太小。</p>","more":"<h3 id=\"layout-viewport\"><a href=\"#layout-viewport\" class=\"headerlink\" title=\"layout viewport\"></a>layout viewport</h3><p><code>Apple</code>也发现了这个问题，并且适时的出现，它提出了一个方案用来解决这个问题。在iOS Safari中定义了一个<code>viewport meta</code>标签，用来创建一个虚拟的<code>布局视口（layout viewport）</code>，而这个视口的分辨率接近于PC显示器，<code>Apple</code>将其定义为<code>980px</code>（其他厂商各有不同①）。</p>\n<p>这就很好的解决了早期的页面在手机上显示的问题，由于两者之间的宽度趋近，CSS只需要像在PC上那样渲染页面就行，原有的页面结构不会被破坏。</p>\n<blockquote>\n<p>①的描述大致如下，数值不一定持续准确，厂商可能更改，但这个绝对值其实并非特别重要：<br>iOS, Android基本都是: 980px<br>BlackBerry: 1024px</p>\n</blockquote>\n<h3 id=\"visual-viewport\"><a href=\"#visual-viewport\" class=\"headerlink\" title=\"visual viewport\"></a>visual viewport</h3><p>有了<code>layout viewport</code>，我们还需要一个视口用来承载它，这个视口可以简单的认为是手持设备物理屏幕的可视区域，我们称之为<code>（视觉视口）visual viewport</code>。这是一个比较直观的概念，因为你能看得见你的手机屏幕。</p>\n<p>对于<code>visual viewport</code>，开发者一般只需要知道它的存在和概念就行，因为无法对它进行任何设置或者修改。很明显，<code>visual viewport</code>的尺寸不会是一个固定的值，甚至每款设备都可能不同。大致列几种常见设备的<code>visual viewport</code>尺寸：</p>\n<ul>\n<li>iPhone4~iPhone5S: 320*480px</li>\n<li>iPhone6~iPhone6S: 375*627px</li>\n<li>iPhone6 Plus~iPhone6S Plus: 414*736px</li>\n</ul>\n<p>以<code>iPhone4S</code>为例，会在其320px②的<code>visual viewport</code>上，创建一个宽<code>980px</code>的<code>layout viewport</code>，于是用户可以在<code>visual viewport</code>中拖动或者缩放网页，来获得良好的浏览效果；布局视口用来配合CSS渲染布局，当我们定义一个容器的宽度为<code>100%</code>时，这个容器的实际宽度是<code>980px</code>而不是<code>320px</code>，通过这种方式大部分网页就能以缩放的形式正常显示在手机屏幕上了。</p>\n<blockquote>\n<p>②的描述大致如下：<br>早期移动前端开发工程师常能见到宽640px的设计稿，原因就是UI工程师以物理屏幕宽度为320px的<code>iPhone4-iPhone5S</code>作为参照设计；<br>当然，现在你还可能会见到750px和1242px尺寸的设计稿，原因当然是iPhone6的出现</p>\n</blockquote>\n<p>当然，为了更好的适配移动端或者只为移动端设计的应用，单有布局视口和视觉视口还是不够的。</p>\n<h3 id=\"ideal-viewport\"><a href=\"#ideal-viewport\" class=\"headerlink\" title=\"ideal viewport\"></a>ideal viewport</h3><p>我们还需要一个视口，它类似于布局视口，但宽度和视觉视口相同，这就是完美视口（ideal viewport）。</p>\n<p>有了完美视口，用户不用缩放和拖动网页就能够很好的进行网页浏览。而完美视口也是通过<code>viewport meta</code>的某种设置来达到。</p>\n<p>说了这么一大堆的东西，貌似都和<code>viewport</code>有关联，那么<code>viewport</code>到底怎么搞，请继续往下。</p>\n<blockquote>\n<p>关于3个视口，<a href=\"http://www.quirksmode.org/\">PPK</a>已经做了非常棒的阐释，你也可以在<code>StackOverflow</code>上找到一些对此描述的相互补充，例如：<a href=\"http://stackoverflow.com/questions/6333927/difference-between-visual-viewport-and-layout-viewport\">[1]</a>, <a href=\"http://stackoverflow.com/questions/7344886/visual-viewport-vs-layout-viewport-on-mobile-devices\">[2]</a>，有兴趣的童鞋也可以看看</p>\n</blockquote>\n<h2 id=\"viewport特性\"><a href=\"#viewport特性\" class=\"headerlink\" title=\"viewport特性\"></a>viewport特性</h2><p>通常情况下，<code>viewport</code>有以下6种设置。当然厂商可能会增加一些特定的设置，比如iOS Safari7.1增加了一种在网页加载时隐藏地址栏与导航栏的设置：<code>minimal-ui</code>，不过随后又将之移除了。</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>正整数或<code>device-width</code></td>\n<td>定义视口的宽度，单位为像素</td>\n</tr>\n<tr>\n<td>height</td>\n<td>正整数或<code>device-height</code></td>\n<td>定义视口的高度，单位为像素</td>\n</tr>\n<tr>\n<td>initial-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义初始缩放值</td>\n</tr>\n<tr>\n<td>minimum-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义缩小最小比例，它必须小于或等于maximum-scale设置</td>\n</tr>\n<tr>\n<td>maximum-scale</td>\n<td>[0.0-10.0]</td>\n<td>定义放大最大比例，它必须大于或等于minimum-scale设置</td>\n</tr>\n<tr>\n<td>user-scalable</td>\n<td>yes/no</td>\n<td>定义是否允许用户手动缩放页面，默认值yes</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"width\"><a href=\"#width\" class=\"headerlink\" title=\"width\"></a>width</h3><p><code>width</code>被用来定义<code>layout viewport</code>的宽度，如果不指定该属性（或者移除<code>viewport meta</code>标签），则<code>layout viewport</code>宽度为厂商默认值。如：iPhone为<code>980px</code>；</p>\n<p>举个例子：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>此时的<code>layout viewport</code>将成为<code>ideal viewport</code>，因为<code>layout viewport</code>宽度与设备视觉视口宽度一致了。</p>\n<p>除了<code>width</code>之外，还有一个属性定义也能实现<code>ideal viewport</code>，那就是<code>initial-scale</code>。</p>\n<h3 id=\"height\"><a href=\"#height\" class=\"headerlink\" title=\"height\"></a>height</h3><p>与<code>width</code>类似，但实际上却不常用，因为没有太多的use case。</p>\n<h3 id=\"initial-scale\"><a href=\"#initial-scale\" class=\"headerlink\" title=\"initial-scale\"></a>initial-scale</h3><p>如果想页面默认以某个比例放大或者缩小然后呈现给用户，那么可以通过定义<code>initial-scale</code>来完成。</p>\n<p><code>initial-scale</code>用于指定页面的初始缩放比例，假定你这样定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=2\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>那么用户将会看到2倍大小的页面内容。</p>\n<p>在说<code>width</code>的时候，我们说到<code>initial-scale</code>也能实现<code>ideal viewport</code>，是的，你只需要这样做，也可以得到完美视口：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"maximum-scale\"><a href=\"#maximum-scale\" class=\"headerlink\" title=\"maximum-scale\"></a>maximum-scale</h3><p>在移动端，你可能会考虑用户浏览不便，然后给予用户放大页面的权利，但同时又希望是在一定范围内的放大，这时就可以使用<code>maximum-scale</code>来进行约束。</p>\n<p><code>maximum-scale</code>用于指定用户能够放大的比例。</p>\n<p>举个例子来讲：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"initial-scale=1,maximum-scale=5\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>假设页面的默认缩放值<code>initial-scale</code>是<code>1</code>，那么用户最终能够将页面放大到这个初始页面大小的5倍。</p>\n<h3 id=\"minimum-scale\"><a href=\"#minimum-scale\" class=\"headerlink\" title=\"minimum-scale\"></a>minimum-scale</h3><p>类似<code>maximum-scale</code>的描述，不过<code>minimum-scale</code>是用来指定页面缩小比例的。</p>\n<p>通常情况下，为了有更好地体验，不会定义该属性的值比<code>1</code>更小，因为那样页面将变得难以阅读。</p>\n<h3 id=\"user-scalable\"><a href=\"#user-scalable\" class=\"headerlink\" title=\"user-scalable\"></a>user-scalable</h3><p>如果你不想页面被放大或者缩小，通过定义<code>user-scalable</code>来约束用户是否可以通过手势对页面进行缩放即可。</p>\n<p>该属性的默认值为<code>yes</code>，即可被缩放（如果使用默认值，该属性可以不定义）；当然，如果你的应用不打算让用户拥有缩放权限，可以将该值设置为<code>no</code>。</p>\n<p>使用方法如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"user-scalable=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>正如开篇所说，这既不高深也不新奇，它而仅仅是一点观念转变。</p>\n<p>当你掌握了<code>viewport</code>，那么意味着你已经大致了解了移动平台与PC平台的不同，你可以更专注而细致的去解决某些平台差异问题。</p>"},{"title":"善用meta","date":"2016-09-06T16:00:00.000Z","author":"xiupi酱","_content":"\n## 前言\n\n在[移动前端第一弹：viewport详解](/2015/10/13/mobile/移动前端第一弹：viewport详解/)中，我们讲了`viewport`，那是一个关于`meta`的故事。这次我们会就将`meta`这个故事讲得更广阔、更有意思一些。\n\n写过`HTML`的童鞋，应该都对这个不陌生，或用它来定义页面编码，或用它来定义搜索引擎抓取方式，或用它定义页面关键字，描述等等。\n\n## meta列表\n\n好的`meta`使用，能更好地提高页面的可用性及被检索的几率。\n\n这里并不会列出所有的`meta`使用方式，只挑选一些常用及实际意义比较大的讲讲，当然也包括一些厂商私有定制的。\n\n<!--more-->\n\n### 常规\n\n#### 声明文档使用的字符编码\n```\n<meta charset=\"utf-8\" />\n```\n该声明用来指定文档的编码，除了`utf-8`，可选值还有：ISO-8859-1、BIG5、iso-8859-2, iso-2022-jp, iso-2022-kr, gb2312等\n\n当然，你可能还见过使用另外一种方式来定义文档字符编码：\n```\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n```\n相对于这种方式，更推荐你使用第1种，言外之意，就是推荐使用`HTML5`。\n\n\n#### 声明页面刷新或跳转\n```\n<meta http-equiv=\"refresh\" content=\"10\" />\n<meta http-equiv=\"refresh\" content=\"10; url=http://www.doyoe.com\" />\n```\n该声明用来指定页面自刷新或者跳转到其它页面，其中的时间单位是`s`。\n\n\n#### 声明页面过期时间\n```\n<meta http-equiv=\"expires\" content=\"0\" />\n<meta http-equiv=\"expires\" content=\"Wed, 26 Feb 1997 08:21:57 GMT\" />\n```\n该声明用来指定页面的过期时间，一旦网页过期，从服务器上重新请求，其中时间必须使用`GMT`格式，或者直接是`0`（即不缓存）\n\n\n#### 声明页面是否缓存\n```\n<meta http-equiv=\"pragma\" content=\"no-cache\" />\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n```\n上述语句都可以用来指定文档不被缓存。一些仍然在使用HTTP/1.0的可以使用第1条，第2条由HTTP/1.1提供，常用值还有：public, no-cache, no-store等\n\n\n\n#### 声明作者信息\n```\n<meta name=\"author\" content=\"joy, dooyoe@gmail.com\" />\n```\n\n\n#### 声明文档关键字\n```\n<meta name=\"keywords\" content=\"CSS, HTML, JavaScript, 前端\" />\n```\n多关键字之间以半角逗号分隔\n\n\n#### 声明文档描述\n```\n<meta name=\"description\" content=\"这是一份meta列表\" />\n```\n文档描述内容最好是完整的一句话，以不超过50个字符为宜\n\n\n#### 声明使用的浏览器及版本\n`x-ua-compatible`设置是从`IE8`开始增加的（很明显，只适用于IE），对于过往的版本无法识别。\n开发者可以通过设置`x-ua-compatible`来指定渲染引擎的类型和版本，并且因为需求不同可以有多种不同的设置：\n\n##### Case1:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=7\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=4\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=xx\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=50\" />\n```\n当直接指定`content`为`IE的某个具体版本`，如上述代码第1条，客户端的IE将会使用IE7.0标准模式对页面进行渲染，并忽略Doctype定义。\n**当指定的IE版本在客户端IE中不存在时，IE将会尝试将该值转换为最为接近的版本。**\n例如指定一个错误的或者低于5.0的IE版本，如上述代码第2，3条，客户端的IE将会使用IE5.0对页面进行渲染，由于IE5.0并没有标准模式，所以将会直接使用`quirks mode`来渲染；\n如果指定一个大于客户端IE的版本，如上述代码第4条，假定客户端IE的最高版本为9.0，那么IE会将该值转换为`IE=9`，即使用IE9.0标准模式对页面进行渲染。\n\n##### Case2:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=EmulateIE7\" />\n```\n当指定的`content`值加了`Emulate`前缀时，如上述代码，客户端IE将会根据Doctype定义来决定如何来对页面进行渲染。假设页面使用了标准的Doctype，那么此定义效果等同`Case1`；假设页面并没有使用标准的Doctype，那么将使用`quirks mode`来渲染。\n\n##### Case3:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=Edge\" />\n```\n当指定的`content`值为`IE=Edge`时，如上述代码，客户端的IE将会使用最高的标准模式对页面进行渲染。\n\n##### Case4:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=7, 10, 11\" />\n```\n当指定的`content`值有多个版本时，如上述代码，假定客户端IE版本为8.0或者9.0，则使用IE7.0标准模式对页面进行渲染；假定客户端IE版本为10.0或者11.0，则直接使用对应版本的标准模式对页面进行渲染。\n\n##### Case5:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=Edge, chrome=1\" />\n```\n当指定的`content`值为`IE=Edge, chrome=1`时，如上述代码，假定客户端安装了`Google Chrome Frame`，则在IE中使用chrome的渲染引擎来渲染页面，否则，将会使用客户端IE最高的标准模式对页面进行渲染。\n\n\n#### 声明搜索引擎抓取方式\n```\n<meta name=\"robots\" content=\"index\" />\n```\n通知搜索引擎文档是否需要被索引。可选值有：\n\n* all（默认值，索引当前页并跟踪链接，相当于：index, follow）\n* none（忽略当前页，相当于：noindex, nofollow）\n* index（索引当前页）\n* noindex（不索引当前页）\n* follow（跟踪当前页链接，不论当前页是否被索引）\n* nofollow（不跟踪当前页链接，不论当前页是否被索引）\n\n如果声明冲突，某些引擎可能会做严格处理：\n```\n<meta name=\"robots\" content=\"noindex\" />\n<meta name=\"robots\" content=\"index\" />\n```\n类似上述代码，在`Google`引擎中，会执行`noindex`这个更为严格的声明。\n\n需要注意的是并不是所有搜索引擎都支持`robots meta`，比较保守的做法是配合`robots.txt`使用。\n\n\n#### 声明搜索引擎抓取间隔\n```\n<meta name=\"revisit-after\" content=\"10 days\" />\n```\n有时候你可能并不希望站点一直被搜索引擎抓取，而是每间隔一段时间才来访问一次，这时，可以声明`revisit-after meta`。\n\n### 移动\n\n#### 声明viewport视口\n```\n<meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\" />\n```\n该声明用于指定在移动设备上页面的布局视口如何设置。对于`viewport meta`的详细设置，请参考：[移动前端第一弹：viewport详解](/2015/10/13/mobile/移动前端第一弹：viewport详解/)\n\n\n#### 声明添加到主屏幕的Web App标题\n`iOS Safari`允许用户将一个网页添加到主屏幕然后像`App`一样来操作它。我们知道每个`App`下方都会有一个名字，`iOS Safari`提供了一个私有的`meta`来定义这个名字，代码如下：\n```\n<meta name=\"apple-mobile-web-app-title\" content=\"Web App名称\" />\n```\n`Android Chrome31.0`，`Android Browser5.0`也开始支持添加到主屏幕了，但并没有提供相应的定义标题的方式，所以如果你想统一`iOS`和`Android`平台定义`Web app`名称的方式，可以使用`title`标签来定义，代码如下：\n```\n<title>Web App名称</title>\n```\n但如果你想要网页标题和App名字不一样的话，那就只有iOS才行。\n\n\n#### 声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\n当我们将一个网页添加到主屏幕时，会更希望它能有像`App`一样的表现，没有地址栏和状态栏全屏显示，代码如下：\n```\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n```\n该方案在 `iOS` 和 `Android5.0+` 上都通用。\n\n\n#### 声明添加到主屏幕时设置系统顶栏颜色\n当我们将一个网页添加到主屏幕时，还可以对 `系统显示手机信号、时间、电池的顶部状态栏` 颜色进行设置，前提是开启了：\n```\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n```\n有了这个前提，你可以通过下面的方式来进行定义：\n```\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n```\ncontent只有3个固定值可选：default | black | black-translucent\n\n* 如果设置为 `default`，状态栏将为正常的，即白色，网页从状态栏以下开始显示；\n* 如果设置为 `black`，状态栏将为黑色，网页从状态栏以下开始显示；\n* 如果设置为 `black-translucent`，状态栏将为灰色半透明，网页将充满整个屏幕，状态栏会盖在网页之上；\n\n该设置只在 `iOS` 上有效。\n\n\n#### 电话号码识别\n在 `iOS Safari` （其他浏览器和Android均不会）上会对那些看起来像是电话号码的数字处理为电话链接，比如：\n\n* 7位数字，形如：1234567\n* 带括号及加号的数字，形如：(+86)123456789\n* 双连接线的数字，形如：00-00-00111\n* 11位数字，形如：13800138000\n\n可能还有其他类型的数字也会被识别，但在具体的业务场景中，有些时候这是不必须的，所以你可以关闭电话自动识别，然后在需要拨号的地方，开启电话呼出和短信功能。\n\n1. 关闭电话号码识别：\n```\n<meta name=\"format-detection\" content=\"telephone=no\" />\n```\n\n2. 开启拨打电话功能：\n```\n<a href=\"tel:123456\">123456</a>\n```\n\n3. 开启发送短信功能：\n```\n<a href=\"sms:123456\">123456</a>\n```\n\n\n#### 邮箱地址识别\n在 `Android` （iOS不会）上，浏览器会自动识别看起来像邮箱地址的字符串，不论有你没有加上邮箱链接，当你在这个字符串上长按，会弹出发邮件的提示。\n\n1. 关闭邮箱地址识别：\n```\n<meta name=\"format-detection\" content=\"email=no\" />\n```\n\n2. 开启邮件发送：\n```\n<a href=\"mailto:dooyoe@gmail.com\">dooyoe@gmail.com</a>\n```\n\n3. 如果想同时关闭电话和邮箱识别，可以把它们写到一条 meta 内，代码如下：\n```\n<meta name=\"format-detection\" content=\"telephone=no,email=no\" />\n```\n\n\n## 附注\n\n部分`meta`定义来自于[trip](https://github.com/doyoe/trip)","source":"_posts/移动端/善用meta.md","raw":"title: 善用meta\ndate: 2016-09-07 \nauthor: xiupi酱\ncategories: 移动端\ntags: [HTML5, meta, meta大全, meta列表]\n---\n\n## 前言\n\n在[移动前端第一弹：viewport详解](/2015/10/13/mobile/移动前端第一弹：viewport详解/)中，我们讲了`viewport`，那是一个关于`meta`的故事。这次我们会就将`meta`这个故事讲得更广阔、更有意思一些。\n\n写过`HTML`的童鞋，应该都对这个不陌生，或用它来定义页面编码，或用它来定义搜索引擎抓取方式，或用它定义页面关键字，描述等等。\n\n## meta列表\n\n好的`meta`使用，能更好地提高页面的可用性及被检索的几率。\n\n这里并不会列出所有的`meta`使用方式，只挑选一些常用及实际意义比较大的讲讲，当然也包括一些厂商私有定制的。\n\n<!--more-->\n\n### 常规\n\n#### 声明文档使用的字符编码\n```\n<meta charset=\"utf-8\" />\n```\n该声明用来指定文档的编码，除了`utf-8`，可选值还有：ISO-8859-1、BIG5、iso-8859-2, iso-2022-jp, iso-2022-kr, gb2312等\n\n当然，你可能还见过使用另外一种方式来定义文档字符编码：\n```\n<meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n```\n相对于这种方式，更推荐你使用第1种，言外之意，就是推荐使用`HTML5`。\n\n\n#### 声明页面刷新或跳转\n```\n<meta http-equiv=\"refresh\" content=\"10\" />\n<meta http-equiv=\"refresh\" content=\"10; url=http://www.doyoe.com\" />\n```\n该声明用来指定页面自刷新或者跳转到其它页面，其中的时间单位是`s`。\n\n\n#### 声明页面过期时间\n```\n<meta http-equiv=\"expires\" content=\"0\" />\n<meta http-equiv=\"expires\" content=\"Wed, 26 Feb 1997 08:21:57 GMT\" />\n```\n该声明用来指定页面的过期时间，一旦网页过期，从服务器上重新请求，其中时间必须使用`GMT`格式，或者直接是`0`（即不缓存）\n\n\n#### 声明页面是否缓存\n```\n<meta http-equiv=\"pragma\" content=\"no-cache\" />\n<meta http-equiv=\"cache-control\" content=\"no-cache\" />\n```\n上述语句都可以用来指定文档不被缓存。一些仍然在使用HTTP/1.0的可以使用第1条，第2条由HTTP/1.1提供，常用值还有：public, no-cache, no-store等\n\n\n\n#### 声明作者信息\n```\n<meta name=\"author\" content=\"joy, dooyoe@gmail.com\" />\n```\n\n\n#### 声明文档关键字\n```\n<meta name=\"keywords\" content=\"CSS, HTML, JavaScript, 前端\" />\n```\n多关键字之间以半角逗号分隔\n\n\n#### 声明文档描述\n```\n<meta name=\"description\" content=\"这是一份meta列表\" />\n```\n文档描述内容最好是完整的一句话，以不超过50个字符为宜\n\n\n#### 声明使用的浏览器及版本\n`x-ua-compatible`设置是从`IE8`开始增加的（很明显，只适用于IE），对于过往的版本无法识别。\n开发者可以通过设置`x-ua-compatible`来指定渲染引擎的类型和版本，并且因为需求不同可以有多种不同的设置：\n\n##### Case1:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=7\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=4\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=xx\" />\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=50\" />\n```\n当直接指定`content`为`IE的某个具体版本`，如上述代码第1条，客户端的IE将会使用IE7.0标准模式对页面进行渲染，并忽略Doctype定义。\n**当指定的IE版本在客户端IE中不存在时，IE将会尝试将该值转换为最为接近的版本。**\n例如指定一个错误的或者低于5.0的IE版本，如上述代码第2，3条，客户端的IE将会使用IE5.0对页面进行渲染，由于IE5.0并没有标准模式，所以将会直接使用`quirks mode`来渲染；\n如果指定一个大于客户端IE的版本，如上述代码第4条，假定客户端IE的最高版本为9.0，那么IE会将该值转换为`IE=9`，即使用IE9.0标准模式对页面进行渲染。\n\n##### Case2:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=EmulateIE7\" />\n```\n当指定的`content`值加了`Emulate`前缀时，如上述代码，客户端IE将会根据Doctype定义来决定如何来对页面进行渲染。假设页面使用了标准的Doctype，那么此定义效果等同`Case1`；假设页面并没有使用标准的Doctype，那么将使用`quirks mode`来渲染。\n\n##### Case3:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=Edge\" />\n```\n当指定的`content`值为`IE=Edge`时，如上述代码，客户端的IE将会使用最高的标准模式对页面进行渲染。\n\n##### Case4:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=7, 10, 11\" />\n```\n当指定的`content`值有多个版本时，如上述代码，假定客户端IE版本为8.0或者9.0，则使用IE7.0标准模式对页面进行渲染；假定客户端IE版本为10.0或者11.0，则直接使用对应版本的标准模式对页面进行渲染。\n\n##### Case5:\n```\n<meta http-equiv=\"x-ua-compatible\" content=\"IE=Edge, chrome=1\" />\n```\n当指定的`content`值为`IE=Edge, chrome=1`时，如上述代码，假定客户端安装了`Google Chrome Frame`，则在IE中使用chrome的渲染引擎来渲染页面，否则，将会使用客户端IE最高的标准模式对页面进行渲染。\n\n\n#### 声明搜索引擎抓取方式\n```\n<meta name=\"robots\" content=\"index\" />\n```\n通知搜索引擎文档是否需要被索引。可选值有：\n\n* all（默认值，索引当前页并跟踪链接，相当于：index, follow）\n* none（忽略当前页，相当于：noindex, nofollow）\n* index（索引当前页）\n* noindex（不索引当前页）\n* follow（跟踪当前页链接，不论当前页是否被索引）\n* nofollow（不跟踪当前页链接，不论当前页是否被索引）\n\n如果声明冲突，某些引擎可能会做严格处理：\n```\n<meta name=\"robots\" content=\"noindex\" />\n<meta name=\"robots\" content=\"index\" />\n```\n类似上述代码，在`Google`引擎中，会执行`noindex`这个更为严格的声明。\n\n需要注意的是并不是所有搜索引擎都支持`robots meta`，比较保守的做法是配合`robots.txt`使用。\n\n\n#### 声明搜索引擎抓取间隔\n```\n<meta name=\"revisit-after\" content=\"10 days\" />\n```\n有时候你可能并不希望站点一直被搜索引擎抓取，而是每间隔一段时间才来访问一次，这时，可以声明`revisit-after meta`。\n\n### 移动\n\n#### 声明viewport视口\n```\n<meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\" />\n```\n该声明用于指定在移动设备上页面的布局视口如何设置。对于`viewport meta`的详细设置，请参考：[移动前端第一弹：viewport详解](/2015/10/13/mobile/移动前端第一弹：viewport详解/)\n\n\n#### 声明添加到主屏幕的Web App标题\n`iOS Safari`允许用户将一个网页添加到主屏幕然后像`App`一样来操作它。我们知道每个`App`下方都会有一个名字，`iOS Safari`提供了一个私有的`meta`来定义这个名字，代码如下：\n```\n<meta name=\"apple-mobile-web-app-title\" content=\"Web App名称\" />\n```\n`Android Chrome31.0`，`Android Browser5.0`也开始支持添加到主屏幕了，但并没有提供相应的定义标题的方式，所以如果你想统一`iOS`和`Android`平台定义`Web app`名称的方式，可以使用`title`标签来定义，代码如下：\n```\n<title>Web App名称</title>\n```\n但如果你想要网页标题和App名字不一样的话，那就只有iOS才行。\n\n\n#### 声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\n当我们将一个网页添加到主屏幕时，会更希望它能有像`App`一样的表现，没有地址栏和状态栏全屏显示，代码如下：\n```\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n```\n该方案在 `iOS` 和 `Android5.0+` 上都通用。\n\n\n#### 声明添加到主屏幕时设置系统顶栏颜色\n当我们将一个网页添加到主屏幕时，还可以对 `系统显示手机信号、时间、电池的顶部状态栏` 颜色进行设置，前提是开启了：\n```\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n```\n有了这个前提，你可以通过下面的方式来进行定义：\n```\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\" />\n```\ncontent只有3个固定值可选：default | black | black-translucent\n\n* 如果设置为 `default`，状态栏将为正常的，即白色，网页从状态栏以下开始显示；\n* 如果设置为 `black`，状态栏将为黑色，网页从状态栏以下开始显示；\n* 如果设置为 `black-translucent`，状态栏将为灰色半透明，网页将充满整个屏幕，状态栏会盖在网页之上；\n\n该设置只在 `iOS` 上有效。\n\n\n#### 电话号码识别\n在 `iOS Safari` （其他浏览器和Android均不会）上会对那些看起来像是电话号码的数字处理为电话链接，比如：\n\n* 7位数字，形如：1234567\n* 带括号及加号的数字，形如：(+86)123456789\n* 双连接线的数字，形如：00-00-00111\n* 11位数字，形如：13800138000\n\n可能还有其他类型的数字也会被识别，但在具体的业务场景中，有些时候这是不必须的，所以你可以关闭电话自动识别，然后在需要拨号的地方，开启电话呼出和短信功能。\n\n1. 关闭电话号码识别：\n```\n<meta name=\"format-detection\" content=\"telephone=no\" />\n```\n\n2. 开启拨打电话功能：\n```\n<a href=\"tel:123456\">123456</a>\n```\n\n3. 开启发送短信功能：\n```\n<a href=\"sms:123456\">123456</a>\n```\n\n\n#### 邮箱地址识别\n在 `Android` （iOS不会）上，浏览器会自动识别看起来像邮箱地址的字符串，不论有你没有加上邮箱链接，当你在这个字符串上长按，会弹出发邮件的提示。\n\n1. 关闭邮箱地址识别：\n```\n<meta name=\"format-detection\" content=\"email=no\" />\n```\n\n2. 开启邮件发送：\n```\n<a href=\"mailto:dooyoe@gmail.com\">dooyoe@gmail.com</a>\n```\n\n3. 如果想同时关闭电话和邮箱识别，可以把它们写到一条 meta 内，代码如下：\n```\n<meta name=\"format-detection\" content=\"telephone=no,email=no\" />\n```\n\n\n## 附注\n\n部分`meta`定义来自于[trip](https://github.com/doyoe/trip)","slug":"移动端/善用meta","published":1,"updated":"2016-09-06T18:53:20.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vq7000olsvfq5avjjqm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"/2015/10/13/mobile/移动前端第一弹：viewport详解/\">移动前端第一弹：viewport详解</a>中，我们讲了<code>viewport</code>，那是一个关于<code>meta</code>的故事。这次我们会就将<code>meta</code>这个故事讲得更广阔、更有意思一些。</p>\n<p>写过<code>HTML</code>的童鞋，应该都对这个不陌生，或用它来定义页面编码，或用它来定义搜索引擎抓取方式，或用它定义页面关键字，描述等等。</p>\n<h2 id=\"meta列表\"><a href=\"#meta列表\" class=\"headerlink\" title=\"meta列表\"></a>meta列表</h2><p>好的<code>meta</code>使用，能更好地提高页面的可用性及被检索的几率。</p>\n<p>这里并不会列出所有的<code>meta</code>使用方式，只挑选一些常用及实际意义比较大的讲讲，当然也包括一些厂商私有定制的。</p>\n<a id=\"more\"></a>\n<h3 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h3><h4 id=\"声明文档使用的字符编码\"><a href=\"#声明文档使用的字符编码\" class=\"headerlink\" title=\"声明文档使用的字符编码\"></a>声明文档使用的字符编码</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定文档的编码，除了<code>utf-8</code>，可选值还有：ISO-8859-1、BIG5、iso-8859-2, iso-2022-jp, iso-2022-kr, gb2312等</p>\n<p>当然，你可能还见过使用另外一种方式来定义文档字符编码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>相对于这种方式，更推荐你使用第1种，言外之意，就是推荐使用<code>HTML5</code>。</p>\n<h4 id=\"声明页面刷新或跳转\"><a href=\"#声明页面刷新或跳转\" class=\"headerlink\" title=\"声明页面刷新或跳转\"></a>声明页面刷新或跳转</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10; url=http://www.doyoe.com\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定页面自刷新或者跳转到其它页面，其中的时间单位是<code>s</code>。</p>\n<h4 id=\"声明页面过期时间\"><a href=\"#声明页面过期时间\" class=\"headerlink\" title=\"声明页面过期时间\"></a>声明页面过期时间</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Wed, 26 Feb 1997 08:21:57 GMT\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定页面的过期时间，一旦网页过期，从服务器上重新请求，其中时间必须使用<code>GMT</code>格式，或者直接是<code>0</code>（即不缓存）</p>\n<h4 id=\"声明页面是否缓存\"><a href=\"#声明页面是否缓存\" class=\"headerlink\" title=\"声明页面是否缓存\"></a>声明页面是否缓存</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>上述语句都可以用来指定文档不被缓存。一些仍然在使用HTTP/1.0的可以使用第1条，第2条由HTTP/1.1提供，常用值还有：public, no-cache, no-store等</p>\n<h4 id=\"声明作者信息\"><a href=\"#声明作者信息\" class=\"headerlink\" title=\"声明作者信息\"></a>声明作者信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"joy, dooyoe@gmail.com\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"声明文档关键字\"><a href=\"#声明文档关键字\" class=\"headerlink\" title=\"声明文档关键字\"></a>声明文档关键字</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"CSS, HTML, JavaScript, 前端\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>多关键字之间以半角逗号分隔</p>\n<h4 id=\"声明文档描述\"><a href=\"#声明文档描述\" class=\"headerlink\" title=\"声明文档描述\"></a>声明文档描述</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"这是一份meta列表\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>文档描述内容最好是完整的一句话，以不超过50个字符为宜</p>\n<h4 id=\"声明使用的浏览器及版本\"><a href=\"#声明使用的浏览器及版本\" class=\"headerlink\" title=\"声明使用的浏览器及版本\"></a>声明使用的浏览器及版本</h4><p><code>x-ua-compatible</code>设置是从<code>IE8</code>开始增加的（很明显，只适用于IE），对于过往的版本无法识别。<br>开发者可以通过设置<code>x-ua-compatible</code>来指定渲染引擎的类型和版本，并且因为需求不同可以有多种不同的设置：</p>\n<h5 id=\"Case1\"><a href=\"#Case1\" class=\"headerlink\" title=\"Case1:\"></a>Case1:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=7\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=4\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=xx\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=50\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当直接指定<code>content</code>为<code>IE的某个具体版本</code>，如上述代码第1条，客户端的IE将会使用IE7.0标准模式对页面进行渲染，并忽略Doctype定义。<br><strong>当指定的IE版本在客户端IE中不存在时，IE将会尝试将该值转换为最为接近的版本。</strong><br>例如指定一个错误的或者低于5.0的IE版本，如上述代码第2，3条，客户端的IE将会使用IE5.0对页面进行渲染，由于IE5.0并没有标准模式，所以将会直接使用<code>quirks mode</code>来渲染；<br>如果指定一个大于客户端IE的版本，如上述代码第4条，假定客户端IE的最高版本为9.0，那么IE会将该值转换为<code>IE=9</code>，即使用IE9.0标准模式对页面进行渲染。</p>\n<h5 id=\"Case2\"><a href=\"#Case2\" class=\"headerlink\" title=\"Case2:\"></a>Case2:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=EmulateIE7\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值加了<code>Emulate</code>前缀时，如上述代码，客户端IE将会根据Doctype定义来决定如何来对页面进行渲染。假设页面使用了标准的Doctype，那么此定义效果等同<code>Case1</code>；假设页面并没有使用标准的Doctype，那么将使用<code>quirks mode</code>来渲染。</p>\n<h5 id=\"Case3\"><a href=\"#Case3\" class=\"headerlink\" title=\"Case3:\"></a>Case3:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值为<code>IE=Edge</code>时，如上述代码，客户端的IE将会使用最高的标准模式对页面进行渲染。</p>\n<h5 id=\"Case4\"><a href=\"#Case4\" class=\"headerlink\" title=\"Case4:\"></a>Case4:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=7, 10, 11\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值有多个版本时，如上述代码，假定客户端IE版本为8.0或者9.0，则使用IE7.0标准模式对页面进行渲染；假定客户端IE版本为10.0或者11.0，则直接使用对应版本的标准模式对页面进行渲染。</p>\n<h5 id=\"Case5\"><a href=\"#Case5\" class=\"headerlink\" title=\"Case5:\"></a>Case5:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge, chrome=1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值为<code>IE=Edge, chrome=1</code>时，如上述代码，假定客户端安装了<code>Google Chrome Frame</code>，则在IE中使用chrome的渲染引擎来渲染页面，否则，将会使用客户端IE最高的标准模式对页面进行渲染。</p>\n<h4 id=\"声明搜索引擎抓取方式\"><a href=\"#声明搜索引擎抓取方式\" class=\"headerlink\" title=\"声明搜索引擎抓取方式\"></a>声明搜索引擎抓取方式</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>通知搜索引擎文档是否需要被索引。可选值有：</p>\n<ul>\n<li>all（默认值，索引当前页并跟踪链接，相当于：index, follow）</li>\n<li>none（忽略当前页，相当于：noindex, nofollow）</li>\n<li>index（索引当前页）</li>\n<li>noindex（不索引当前页）</li>\n<li>follow（跟踪当前页链接，不论当前页是否被索引）</li>\n<li>nofollow（不跟踪当前页链接，不论当前页是否被索引）</li>\n</ul>\n<p>如果声明冲突，某些引擎可能会做严格处理：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"noindex\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>类似上述代码，在<code>Google</code>引擎中，会执行<code>noindex</code>这个更为严格的声明。</p>\n<p>需要注意的是并不是所有搜索引擎都支持<code>robots meta</code>，比较保守的做法是配合<code>robots.txt</code>使用。</p>\n<h4 id=\"声明搜索引擎抓取间隔\"><a href=\"#声明搜索引擎抓取间隔\" class=\"headerlink\" title=\"声明搜索引擎抓取间隔\"></a>声明搜索引擎抓取间隔</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10 days\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>有时候你可能并不希望站点一直被搜索引擎抓取，而是每间隔一段时间才来访问一次，这时，可以声明<code>revisit-after meta</code>。</p>\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><h4 id=\"声明viewport视口\"><a href=\"#声明viewport视口\" class=\"headerlink\" title=\"声明viewport视口\"></a>声明viewport视口</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"attr\">name=\"viewport\"</span> <span class=\"attr\">content=\"initial-scale=1,</span> <span class=\"attr\">maximum-scale=1,</span> <span class=\"attr\">minimum-scale=1,</span> <span class=\"attr\">user-scalable=no\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>该声明用于指定在移动设备上页面的布局视口如何设置。对于<code>viewport meta</code>的详细设置，请参考：<a href=\"/2015/10/13/mobile/移动前端第一弹：viewport详解/\">移动前端第一弹：viewport详解</a></p>\n<h4 id=\"声明添加到主屏幕的Web-App标题\"><a href=\"#声明添加到主屏幕的Web-App标题\" class=\"headerlink\" title=\"声明添加到主屏幕的Web App标题\"></a>声明添加到主屏幕的Web App标题</h4><p><code>iOS Safari</code>允许用户将一个网页添加到主屏幕然后像<code>App</code>一样来操作它。我们知道每个<code>App</code>下方都会有一个名字，<code>iOS Safari</code>提供了一个私有的<code>meta</code>来定义这个名字，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Web App名称\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>Android Chrome31.0</code>，<code>Android Browser5.0</code>也开始支持添加到主屏幕了，但并没有提供相应的定义标题的方式，所以如果你想统一<code>iOS</code>和<code>Android</code>平台定义<code>Web app</code>名称的方式，可以使用<code>title</code>标签来定义，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web App名称<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但如果你想要网页标题和App名字不一样的话，那就只有iOS才行。</p>\n<h4 id=\"声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\"><a href=\"#声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\" class=\"headerlink\" title=\"声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\"></a>声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）</h4><p>当我们将一个网页添加到主屏幕时，会更希望它能有像<code>App</code>一样的表现，没有地址栏和状态栏全屏显示，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>该方案在 <code>iOS</code> 和 <code>Android5.0+</code> 上都通用。</p>\n<h4 id=\"声明添加到主屏幕时设置系统顶栏颜色\"><a href=\"#声明添加到主屏幕时设置系统顶栏颜色\" class=\"headerlink\" title=\"声明添加到主屏幕时设置系统顶栏颜色\"></a>声明添加到主屏幕时设置系统顶栏颜色</h4><p>当我们将一个网页添加到主屏幕时，还可以对 <code>系统显示手机信号、时间、电池的顶部状态栏</code> 颜色进行设置，前提是开启了：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>有了这个前提，你可以通过下面的方式来进行定义：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>content只有3个固定值可选：default | black | black-translucent</p>\n<ul>\n<li>如果设置为 <code>default</code>，状态栏将为正常的，即白色，网页从状态栏以下开始显示；</li>\n<li>如果设置为 <code>black</code>，状态栏将为黑色，网页从状态栏以下开始显示；</li>\n<li>如果设置为 <code>black-translucent</code>，状态栏将为灰色半透明，网页将充满整个屏幕，状态栏会盖在网页之上；</li>\n</ul>\n<p>该设置只在 <code>iOS</code> 上有效。</p>\n<h4 id=\"电话号码识别\"><a href=\"#电话号码识别\" class=\"headerlink\" title=\"电话号码识别\"></a>电话号码识别</h4><p>在 <code>iOS Safari</code> （其他浏览器和Android均不会）上会对那些看起来像是电话号码的数字处理为电话链接，比如：</p>\n<ul>\n<li>7位数字，形如：1234567</li>\n<li>带括号及加号的数字，形如：(+86)123456789</li>\n<li>双连接线的数字，形如：00-00-00111</li>\n<li>11位数字，形如：13800138000</li>\n</ul>\n<p>可能还有其他类型的数字也会被识别，但在具体的业务场景中，有些时候这是不必须的，所以你可以关闭电话自动识别，然后在需要拨号的地方，开启电话呼出和短信功能。</p>\n<ol>\n<li><p>关闭电话号码识别：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启拨打电话功能：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:123456\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启发送短信功能：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:123456\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"邮箱地址识别\"><a href=\"#邮箱地址识别\" class=\"headerlink\" title=\"邮箱地址识别\"></a>邮箱地址识别</h4><p>在 <code>Android</code> （iOS不会）上，浏览器会自动识别看起来像邮箱地址的字符串，不论有你没有加上邮箱链接，当你在这个字符串上长按，会弹出发邮件的提示。</p>\n<ol>\n<li><p>关闭邮箱地址识别：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启邮件发送：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:dooyoe@gmail.com\"</span>&gt;</span>dooyoe@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想同时关闭电话和邮箱识别，可以把它们写到一条 meta 内，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no,email=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"附注\"><a href=\"#附注\" class=\"headerlink\" title=\"附注\"></a>附注</h2><p>部分<code>meta</code>定义来自于<a href=\"https://github.com/doyoe/trip\" target=\"_blank\" rel=\"external\">trip</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在<a href=\"/2015/10/13/mobile/移动前端第一弹：viewport详解/\">移动前端第一弹：viewport详解</a>中，我们讲了<code>viewport</code>，那是一个关于<code>meta</code>的故事。这次我们会就将<code>meta</code>这个故事讲得更广阔、更有意思一些。</p>\n<p>写过<code>HTML</code>的童鞋，应该都对这个不陌生，或用它来定义页面编码，或用它来定义搜索引擎抓取方式，或用它定义页面关键字，描述等等。</p>\n<h2 id=\"meta列表\"><a href=\"#meta列表\" class=\"headerlink\" title=\"meta列表\"></a>meta列表</h2><p>好的<code>meta</code>使用，能更好地提高页面的可用性及被检索的几率。</p>\n<p>这里并不会列出所有的<code>meta</code>使用方式，只挑选一些常用及实际意义比较大的讲讲，当然也包括一些厂商私有定制的。</p>","more":"<h3 id=\"常规\"><a href=\"#常规\" class=\"headerlink\" title=\"常规\"></a>常规</h3><h4 id=\"声明文档使用的字符编码\"><a href=\"#声明文档使用的字符编码\" class=\"headerlink\" title=\"声明文档使用的字符编码\"></a>声明文档使用的字符编码</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定文档的编码，除了<code>utf-8</code>，可选值还有：ISO-8859-1、BIG5、iso-8859-2, iso-2022-jp, iso-2022-kr, gb2312等</p>\n<p>当然，你可能还见过使用另外一种方式来定义文档字符编码：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"content-type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=utf-8\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>相对于这种方式，更推荐你使用第1种，言外之意，就是推荐使用<code>HTML5</code>。</p>\n<h4 id=\"声明页面刷新或跳转\"><a href=\"#声明页面刷新或跳转\" class=\"headerlink\" title=\"声明页面刷新或跳转\"></a>声明页面刷新或跳转</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"refresh\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10; url=http://www.doyoe.com\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定页面自刷新或者跳转到其它页面，其中的时间单位是<code>s</code>。</p>\n<h4 id=\"声明页面过期时间\"><a href=\"#声明页面过期时间\" class=\"headerlink\" title=\"声明页面过期时间\"></a>声明页面过期时间</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"0\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"expires\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Wed, 26 Feb 1997 08:21:57 GMT\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>该声明用来指定页面的过期时间，一旦网页过期，从服务器上重新请求，其中时间必须使用<code>GMT</code>格式，或者直接是<code>0</code>（即不缓存）</p>\n<h4 id=\"声明页面是否缓存\"><a href=\"#声明页面是否缓存\" class=\"headerlink\" title=\"声明页面是否缓存\"></a>声明页面是否缓存</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"pragma\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"cache-control\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"no-cache\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>上述语句都可以用来指定文档不被缓存。一些仍然在使用HTTP/1.0的可以使用第1条，第2条由HTTP/1.1提供，常用值还有：public, no-cache, no-store等</p>\n<h4 id=\"声明作者信息\"><a href=\"#声明作者信息\" class=\"headerlink\" title=\"声明作者信息\"></a>声明作者信息</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"author\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"joy, dooyoe@gmail.com\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"声明文档关键字\"><a href=\"#声明文档关键字\" class=\"headerlink\" title=\"声明文档关键字\"></a>声明文档关键字</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"keywords\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"CSS, HTML, JavaScript, 前端\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>多关键字之间以半角逗号分隔</p>\n<h4 id=\"声明文档描述\"><a href=\"#声明文档描述\" class=\"headerlink\" title=\"声明文档描述\"></a>声明文档描述</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"description\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"这是一份meta列表\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>文档描述内容最好是完整的一句话，以不超过50个字符为宜</p>\n<h4 id=\"声明使用的浏览器及版本\"><a href=\"#声明使用的浏览器及版本\" class=\"headerlink\" title=\"声明使用的浏览器及版本\"></a>声明使用的浏览器及版本</h4><p><code>x-ua-compatible</code>设置是从<code>IE8</code>开始增加的（很明显，只适用于IE），对于过往的版本无法识别。<br>开发者可以通过设置<code>x-ua-compatible</code>来指定渲染引擎的类型和版本，并且因为需求不同可以有多种不同的设置：</p>\n<h5 id=\"Case1\"><a href=\"#Case1\" class=\"headerlink\" title=\"Case1:\"></a>Case1:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=7\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=4\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=xx\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=50\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当直接指定<code>content</code>为<code>IE的某个具体版本</code>，如上述代码第1条，客户端的IE将会使用IE7.0标准模式对页面进行渲染，并忽略Doctype定义。<br><strong>当指定的IE版本在客户端IE中不存在时，IE将会尝试将该值转换为最为接近的版本。</strong><br>例如指定一个错误的或者低于5.0的IE版本，如上述代码第2，3条，客户端的IE将会使用IE5.0对页面进行渲染，由于IE5.0并没有标准模式，所以将会直接使用<code>quirks mode</code>来渲染；<br>如果指定一个大于客户端IE的版本，如上述代码第4条，假定客户端IE的最高版本为9.0，那么IE会将该值转换为<code>IE=9</code>，即使用IE9.0标准模式对页面进行渲染。</p>\n<h5 id=\"Case2\"><a href=\"#Case2\" class=\"headerlink\" title=\"Case2:\"></a>Case2:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=EmulateIE7\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值加了<code>Emulate</code>前缀时，如上述代码，客户端IE将会根据Doctype定义来决定如何来对页面进行渲染。假设页面使用了标准的Doctype，那么此定义效果等同<code>Case1</code>；假设页面并没有使用标准的Doctype，那么将使用<code>quirks mode</code>来渲染。</p>\n<h5 id=\"Case3\"><a href=\"#Case3\" class=\"headerlink\" title=\"Case3:\"></a>Case3:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值为<code>IE=Edge</code>时，如上述代码，客户端的IE将会使用最高的标准模式对页面进行渲染。</p>\n<h5 id=\"Case4\"><a href=\"#Case4\" class=\"headerlink\" title=\"Case4:\"></a>Case4:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=7, 10, 11\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值有多个版本时，如上述代码，假定客户端IE版本为8.0或者9.0，则使用IE7.0标准模式对页面进行渲染；假定客户端IE版本为10.0或者11.0，则直接使用对应版本的标准模式对页面进行渲染。</p>\n<h5 id=\"Case5\"><a href=\"#Case5\" class=\"headerlink\" title=\"Case5:\"></a>Case5:</h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"x-ua-compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=Edge, chrome=1\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>当指定的<code>content</code>值为<code>IE=Edge, chrome=1</code>时，如上述代码，假定客户端安装了<code>Google Chrome Frame</code>，则在IE中使用chrome的渲染引擎来渲染页面，否则，将会使用客户端IE最高的标准模式对页面进行渲染。</p>\n<h4 id=\"声明搜索引擎抓取方式\"><a href=\"#声明搜索引擎抓取方式\" class=\"headerlink\" title=\"声明搜索引擎抓取方式\"></a>声明搜索引擎抓取方式</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>通知搜索引擎文档是否需要被索引。可选值有：</p>\n<ul>\n<li>all（默认值，索引当前页并跟踪链接，相当于：index, follow）</li>\n<li>none（忽略当前页，相当于：noindex, nofollow）</li>\n<li>index（索引当前页）</li>\n<li>noindex（不索引当前页）</li>\n<li>follow（跟踪当前页链接，不论当前页是否被索引）</li>\n<li>nofollow（不跟踪当前页链接，不论当前页是否被索引）</li>\n</ul>\n<p>如果声明冲突，某些引擎可能会做严格处理：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"noindex\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"robots\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"index\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>类似上述代码，在<code>Google</code>引擎中，会执行<code>noindex</code>这个更为严格的声明。</p>\n<p>需要注意的是并不是所有搜索引擎都支持<code>robots meta</code>，比较保守的做法是配合<code>robots.txt</code>使用。</p>\n<h4 id=\"声明搜索引擎抓取间隔\"><a href=\"#声明搜索引擎抓取间隔\" class=\"headerlink\" title=\"声明搜索引擎抓取间隔\"></a>声明搜索引擎抓取间隔</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"revisit-after\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"10 days\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<p>有时候你可能并不希望站点一直被搜索引擎抓取，而是每间隔一段时间才来访问一次，这时，可以声明<code>revisit-after meta</code>。</p>\n<h3 id=\"移动\"><a href=\"#移动\" class=\"headerlink\" title=\"移动\"></a>移动</h3><h4 id=\"声明viewport视口\"><a href=\"#声明viewport视口\" class=\"headerlink\" title=\"声明viewport视口\"></a>声明viewport视口</h4><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta <span class=\"attr\">name=\"viewport\"</span> <span class=\"attr\">content=\"initial-scale=1,</span> <span class=\"attr\">maximum-scale=1,</span> <span class=\"attr\">minimum-scale=1,</span> <span class=\"attr\">user-scalable=no\"</span> /&gt;</div></pre></td></tr></table></figure>\n<p>该声明用于指定在移动设备上页面的布局视口如何设置。对于<code>viewport meta</code>的详细设置，请参考：<a href=\"/2015/10/13/mobile/移动前端第一弹：viewport详解/\">移动前端第一弹：viewport详解</a></p>\n<h4 id=\"声明添加到主屏幕的Web-App标题\"><a href=\"#声明添加到主屏幕的Web-App标题\" class=\"headerlink\" title=\"声明添加到主屏幕的Web App标题\"></a>声明添加到主屏幕的Web App标题</h4><p><code>iOS Safari</code>允许用户将一个网页添加到主屏幕然后像<code>App</code>一样来操作它。我们知道每个<code>App</code>下方都会有一个名字，<code>iOS Safari</code>提供了一个私有的<code>meta</code>来定义这个名字，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-title\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"Web App名称\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p><code>Android Chrome31.0</code>，<code>Android Browser5.0</code>也开始支持添加到主屏幕了，但并没有提供相应的定义标题的方式，所以如果你想统一<code>iOS</code>和<code>Android</code>平台定义<code>Web app</code>名称的方式，可以使用<code>title</code>标签来定义，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Web App名称<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>但如果你想要网页标题和App名字不一样的话，那就只有iOS才行。</p>\n<h4 id=\"声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\"><a href=\"#声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\" class=\"headerlink\" title=\"声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）\"></a>声明添加到主屏幕时隐藏地址栏和状态栏（即全屏）</h4><p>当我们将一个网页添加到主屏幕时，会更希望它能有像<code>App</code>一样的表现，没有地址栏和状态栏全屏显示，代码如下：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>该方案在 <code>iOS</code> 和 <code>Android5.0+</code> 上都通用。</p>\n<h4 id=\"声明添加到主屏幕时设置系统顶栏颜色\"><a href=\"#声明添加到主屏幕时设置系统顶栏颜色\" class=\"headerlink\" title=\"声明添加到主屏幕时设置系统顶栏颜色\"></a>声明添加到主屏幕时设置系统顶栏颜色</h4><p>当我们将一个网页添加到主屏幕时，还可以对 <code>系统显示手机信号、时间、电池的顶部状态栏</code> 颜色进行设置，前提是开启了：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>有了这个前提，你可以通过下面的方式来进行定义：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span> /&gt;</span></div></pre></td></tr></table></figure></p>\n<p>content只有3个固定值可选：default | black | black-translucent</p>\n<ul>\n<li>如果设置为 <code>default</code>，状态栏将为正常的，即白色，网页从状态栏以下开始显示；</li>\n<li>如果设置为 <code>black</code>，状态栏将为黑色，网页从状态栏以下开始显示；</li>\n<li>如果设置为 <code>black-translucent</code>，状态栏将为灰色半透明，网页将充满整个屏幕，状态栏会盖在网页之上；</li>\n</ul>\n<p>该设置只在 <code>iOS</code> 上有效。</p>\n<h4 id=\"电话号码识别\"><a href=\"#电话号码识别\" class=\"headerlink\" title=\"电话号码识别\"></a>电话号码识别</h4><p>在 <code>iOS Safari</code> （其他浏览器和Android均不会）上会对那些看起来像是电话号码的数字处理为电话链接，比如：</p>\n<ul>\n<li>7位数字，形如：1234567</li>\n<li>带括号及加号的数字，形如：(+86)123456789</li>\n<li>双连接线的数字，形如：00-00-00111</li>\n<li>11位数字，形如：13800138000</li>\n</ul>\n<p>可能还有其他类型的数字也会被识别，但在具体的业务场景中，有些时候这是不必须的，所以你可以关闭电话自动识别，然后在需要拨号的地方，开启电话呼出和短信功能。</p>\n<ol>\n<li><p>关闭电话号码识别：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启拨打电话功能：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"tel:123456\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启发送短信功能：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"sms:123456\"</span>&gt;</span>123456<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"邮箱地址识别\"><a href=\"#邮箱地址识别\" class=\"headerlink\" title=\"邮箱地址识别\"></a>邮箱地址识别</h4><p>在 <code>Android</code> （iOS不会）上，浏览器会自动识别看起来像邮箱地址的字符串，不论有你没有加上邮箱链接，当你在这个字符串上长按，会弹出发邮件的提示。</p>\n<ol>\n<li><p>关闭邮箱地址识别：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"email=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>开启邮件发送：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"mailto:dooyoe@gmail.com\"</span>&gt;</span>dooyoe@gmail.com<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想同时关闭电话和邮箱识别，可以把它们写到一条 meta 内，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no,email=no\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"附注\"><a href=\"#附注\" class=\"headerlink\" title=\"附注\"></a>附注</h2><p>部分<code>meta</code>定义来自于<a href=\"https://github.com/doyoe/trip\">trip</a></p>"},{"title":"这样简单的理解屏幕适配","date":"2016-09-06T16:00:00.000Z","author":"xiupi酱","_content":"\n## 前言\n\n我一直在想办法让大家可以轻松的知道如何去做一个屏幕适配，不过众多的概念，却是让人越看越晕，越细究越迷糊。\n\n或许我可以从一个实际的现状去做解释，然后将一些概念透明，可能会有助于理解。\n\n## Why 640px\n\n如果你开始了`Web App`的开发，我相信，你总能从设计师那里拿到宽度为`640px`的设计稿。\n\n我猜很多人都已经知道这个值是怎么来的，但这并不妨碍我们再来做一次重复的解释。\n\n`640px`的来由是设计师以`iPhone`作为参照标的①，请看下图：`Figure 1`\n\n> ①当然，对于为什么设计师会选择`iPhone`作为参照，我没有寻根问源过，可能大部分设计师也说不清，只是因为其他人都这么干，慢慢都这样了。所以你可以去找到第一个这么做的人\n\n![Figure 1: iPhone4 screen width](http://od3jhy35s.bkt.clouddn.com/iPhone.png)\n\n从图中能看到`iPhone4`纵向时的`Screen width`（这里说的并不是Screen size②）屏幕宽度为`320px`，似乎设计稿的宽度也应该是`320px`才对？\n\n> ②Screen size\n> 通常来讲，我们说的`Screen size`（屏幕尺寸）都是指设备屏幕对角线测量的实际长度，比如：iPhone4是3.5″，iphone5是4″，iphone6是4.7″，iPhone6 Plus是5.5″\n","source":"_posts/移动端/这样简单的理解屏幕适配.md","raw":"title: 这样简单的理解屏幕适配\ndate: 2016-09-07 \nauthor: xiupi酱\ncategories: 移动端\ntags: [HTML5, 设备像素比, devicePixelRatio, DIP, 设备独立像素, physical pixel, 物理像素, PPI, 每英寸像素量]\n---\n\n## 前言\n\n我一直在想办法让大家可以轻松的知道如何去做一个屏幕适配，不过众多的概念，却是让人越看越晕，越细究越迷糊。\n\n或许我可以从一个实际的现状去做解释，然后将一些概念透明，可能会有助于理解。\n\n## Why 640px\n\n如果你开始了`Web App`的开发，我相信，你总能从设计师那里拿到宽度为`640px`的设计稿。\n\n我猜很多人都已经知道这个值是怎么来的，但这并不妨碍我们再来做一次重复的解释。\n\n`640px`的来由是设计师以`iPhone`作为参照标的①，请看下图：`Figure 1`\n\n> ①当然，对于为什么设计师会选择`iPhone`作为参照，我没有寻根问源过，可能大部分设计师也说不清，只是因为其他人都这么干，慢慢都这样了。所以你可以去找到第一个这么做的人\n\n![Figure 1: iPhone4 screen width](http://od3jhy35s.bkt.clouddn.com/iPhone.png)\n\n从图中能看到`iPhone4`纵向时的`Screen width`（这里说的并不是Screen size②）屏幕宽度为`320px`，似乎设计稿的宽度也应该是`320px`才对？\n\n> ②Screen size\n> 通常来讲，我们说的`Screen size`（屏幕尺寸）都是指设备屏幕对角线测量的实际长度，比如：iPhone4是3.5″，iphone5是4″，iphone6是4.7″，iPhone6 Plus是5.5″\n","slug":"移动端/这样简单的理解屏幕适配","published":1,"updated":"2016-09-06T18:59:53.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisry9vq7000tlsvfl8cm8kzr","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我一直在想办法让大家可以轻松的知道如何去做一个屏幕适配，不过众多的概念，却是让人越看越晕，越细究越迷糊。</p>\n<p>或许我可以从一个实际的现状去做解释，然后将一些概念透明，可能会有助于理解。</p>\n<h2 id=\"Why-640px\"><a href=\"#Why-640px\" class=\"headerlink\" title=\"Why 640px\"></a>Why 640px</h2><p>如果你开始了<code>Web App</code>的开发，我相信，你总能从设计师那里拿到宽度为<code>640px</code>的设计稿。</p>\n<p>我猜很多人都已经知道这个值是怎么来的，但这并不妨碍我们再来做一次重复的解释。</p>\n<p><code>640px</code>的来由是设计师以<code>iPhone</code>作为参照标的①，请看下图：<code>Figure 1</code></p>\n<blockquote>\n<p>①当然，对于为什么设计师会选择<code>iPhone</code>作为参照，我没有寻根问源过，可能大部分设计师也说不清，只是因为其他人都这么干，慢慢都这样了。所以你可以去找到第一个这么做的人</p>\n</blockquote>\n<p><img src=\"http://od3jhy35s.bkt.clouddn.com/iPhone.png\" alt=\"Figure 1: iPhone4 screen width\"></p>\n<p>从图中能看到<code>iPhone4</code>纵向时的<code>Screen width</code>（这里说的并不是Screen size②）屏幕宽度为<code>320px</code>，似乎设计稿的宽度也应该是<code>320px</code>才对？</p>\n<blockquote>\n<p>②Screen size<br>通常来讲，我们说的<code>Screen size</code>（屏幕尺寸）都是指设备屏幕对角线测量的实际长度，比如：iPhone4是3.5″，iphone5是4″，iphone6是4.7″，iPhone6 Plus是5.5″</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我一直在想办法让大家可以轻松的知道如何去做一个屏幕适配，不过众多的概念，却是让人越看越晕，越细究越迷糊。</p>\n<p>或许我可以从一个实际的现状去做解释，然后将一些概念透明，可能会有助于理解。</p>\n<h2 id=\"Why-640px\"><a href=\"#Why-640px\" class=\"headerlink\" title=\"Why 640px\"></a>Why 640px</h2><p>如果你开始了<code>Web App</code>的开发，我相信，你总能从设计师那里拿到宽度为<code>640px</code>的设计稿。</p>\n<p>我猜很多人都已经知道这个值是怎么来的，但这并不妨碍我们再来做一次重复的解释。</p>\n<p><code>640px</code>的来由是设计师以<code>iPhone</code>作为参照标的①，请看下图：<code>Figure 1</code></p>\n<blockquote>\n<p>①当然，对于为什么设计师会选择<code>iPhone</code>作为参照，我没有寻根问源过，可能大部分设计师也说不清，只是因为其他人都这么干，慢慢都这样了。所以你可以去找到第一个这么做的人</p>\n</blockquote>\n<p><img src=\"http://od3jhy35s.bkt.clouddn.com/iPhone.png\" alt=\"Figure 1: iPhone4 screen width\"></p>\n<p>从图中能看到<code>iPhone4</code>纵向时的<code>Screen width</code>（这里说的并不是Screen size②）屏幕宽度为<code>320px</code>，似乎设计稿的宽度也应该是<code>320px</code>才对？</p>\n<blockquote>\n<p>②Screen size<br>通常来讲，我们说的<code>Screen size</code>（屏幕尺寸）都是指设备屏幕对角线测量的实际长度，比如：iPhone4是3.5″，iphone5是4″，iphone6是4.7″，iPhone6 Plus是5.5″</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cisry9vp60003lsvfsloksm3z","category_id":"cisry9vp60006lsvf81etbkae","_id":"cisry9vpm000dlsvfif76m2zz"},{"post_id":"cisry9vp60004lsvfn8h1lwh8","category_id":"cisry9vp60006lsvf81etbkae","_id":"cisry9vq7000ilsvfguvh4gjl"},{"post_id":"cisry9vp60007lsvf4mehbg1j","category_id":"cisry9vq4000flsvf5v58lp5g","_id":"cisry9vq7000plsvfyq77c5x5"},{"post_id":"cisry9vpm0008lsvfmnk8tw1m","category_id":"cisry9vq4000flsvf5v58lp5g","_id":"cisry9vq7000vlsvfl0l2h0uv"},{"post_id":"cisry9vpm000alsvf0c82uys0","category_id":"cisry9vq4000flsvf5v58lp5g","_id":"cisry9vq7000zlsvffzvcork3"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","category_id":"cisry9vq4000flsvf5v58lp5g","_id":"cisry9vq70013lsvfntqpr1fx"},{"post_id":"cisry9vpm000elsvf8x3j2vp6","category_id":"cisry9vq4000flsvf5v58lp5g","_id":"cisry9vqn0016lsvf8k5bxw0r"},{"post_id":"cisry9vq5000hlsvf0br7b3af","category_id":"cisry9vq70014lsvfx0vawlc1","_id":"cisry9vqn0019lsvfxc7pjzo3"},{"post_id":"cisry9vq7000jlsvfx3a4se9j","category_id":"cisry9vqn0017lsvf4rg4hr48","_id":"cisry9vqn001flsvfpsjfy9o7"},{"post_id":"cisry9vq7000mlsvffkera9sr","category_id":"cisry9vqn001blsvffuz00uea","_id":"cisry9vqn001ilsvf8mqq3rgb"},{"post_id":"cisry9vq7000olsvfq5avjjqm","category_id":"cisry9vqn001blsvffuz00uea","_id":"cisry9vqn001llsvfgl3f0xiz"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","category_id":"cisry9vqn001blsvffuz00uea","_id":"cisry9vr3001nlsvfzqwhujkc"}],"PostTag":[{"post_id":"cisry9vp60003lsvfsloksm3z","tag_id":"cisry9vp60005lsvfq9ywevs9","_id":"cisry9vq7000nlsvfigrrjmq0"},{"post_id":"cisry9vp60003lsvfsloksm3z","tag_id":"cisry9vpm0009lsvf5tdwea6c","_id":"cisry9vq7000qlsvf4szmoc55"},{"post_id":"cisry9vp60003lsvfsloksm3z","tag_id":"cisry9vq4000glsvf0uqkyq2u","_id":"cisry9vq7000ulsvfa1wv8fpo"},{"post_id":"cisry9vp60004lsvfn8h1lwh8","tag_id":"cisry9vq7000llsvfg0kvmh0q","_id":"cisry9vq7000ylsvfff4cwip4"},{"post_id":"cisry9vp60004lsvfn8h1lwh8","tag_id":"cisry9vq7000slsvffbahwrf1","_id":"cisry9vq70011lsvf4gb65rwb"},{"post_id":"cisry9vp60007lsvf4mehbg1j","tag_id":"cisry9vq7000xlsvfr7zly6qg","_id":"cisry9vqn001alsvfmdzkmn9r"},{"post_id":"cisry9vp60007lsvf4mehbg1j","tag_id":"cisry9vq70012lsvfov4x26m9","_id":"cisry9vqn001clsvfzhb09xzg"},{"post_id":"cisry9vp60007lsvf4mehbg1j","tag_id":"cisry9vq70015lsvfvbxqsfal","_id":"cisry9vqn001elsvfysft2zux"},{"post_id":"cisry9vpm0008lsvfmnk8tw1m","tag_id":"cisry9vqn0018lsvf2juipf1o","_id":"cisry9vr3001olsvftix2v8j5"},{"post_id":"cisry9vpm0008lsvfmnk8tw1m","tag_id":"cisry9vq7000xlsvfr7zly6qg","_id":"cisry9vr3001plsvfdcksmi2a"},{"post_id":"cisry9vpm0008lsvfmnk8tw1m","tag_id":"cisry9vq70015lsvfvbxqsfal","_id":"cisry9vr3001rlsvfhe3h64o7"},{"post_id":"cisry9vpm0008lsvfmnk8tw1m","tag_id":"cisry9vqn001klsvfjb45eq3z","_id":"cisry9vr3001slsvfgjmjo4i5"},{"post_id":"cisry9vpm000alsvf0c82uys0","tag_id":"cisry9vqn001mlsvf48lj6993","_id":"cisry9vr3001wlsvf8la4hjbr"},{"post_id":"cisry9vpm000alsvf0c82uys0","tag_id":"cisry9vq7000xlsvfr7zly6qg","_id":"cisry9vr3001xlsvfv95coxah"},{"post_id":"cisry9vpm000alsvf0c82uys0","tag_id":"cisry9vq70015lsvfvbxqsfal","_id":"cisry9vr3001zlsvfwhvl66mf"},{"post_id":"cisry9vpm000alsvf0c82uys0","tag_id":"cisry9vr3001ulsvf9abradmx","_id":"cisry9vr30020lsvfn3ypcsot"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","tag_id":"cisry9vq7000xlsvfr7zly6qg","_id":"cisry9vri0025lsvf2my4erxm"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","tag_id":"cisry9vq70015lsvfvbxqsfal","_id":"cisry9vri0026lsvfc3tbdd0m"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","tag_id":"cisry9vr30021lsvf1fnq4u7q","_id":"cisry9vri0028lsvfc55mdliq"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","tag_id":"cisry9vr30022lsvf4ykhoben","_id":"cisry9vri0029lsvfy4mzyna7"},{"post_id":"cisry9vpm000clsvf0bsyn5ma","tag_id":"cisry9vr30023lsvfzh77rp4i","_id":"cisry9vri002blsvfcbu7drp7"},{"post_id":"cisry9vpm000elsvf8x3j2vp6","tag_id":"cisry9vq7000xlsvfr7zly6qg","_id":"cisry9vri002elsvfj7kqmomk"},{"post_id":"cisry9vpm000elsvf8x3j2vp6","tag_id":"cisry9vq70015lsvfvbxqsfal","_id":"cisry9vri002flsvfjrtw9e2w"},{"post_id":"cisry9vpm000elsvf8x3j2vp6","tag_id":"cisry9vr30021lsvf1fnq4u7q","_id":"cisry9vri002hlsvf3btnrwoh"},{"post_id":"cisry9vpm000elsvf8x3j2vp6","tag_id":"cisry9vri002clsvftxa8hjtt","_id":"cisry9vri002ilsvffktscx62"},{"post_id":"cisry9vq5000hlsvf0br7b3af","tag_id":"cisry9vri002dlsvfda8hygqe","_id":"cisry9vry002klsvf5u1q1q2w"},{"post_id":"cisry9vq5000hlsvf0br7b3af","tag_id":"cisry9vri002glsvfyj0zlxfq","_id":"cisry9vry002llsvfe5srn2mo"},{"post_id":"cisry9vq7000jlsvfx3a4se9j","tag_id":"cisry9vri002jlsvfl6l6ae88","_id":"cisry9vry002olsvftembyd70"},{"post_id":"cisry9vq7000jlsvfx3a4se9j","tag_id":"cisry9vry002mlsvfr9rtw6g4","_id":"cisry9vry002plsvfrpm6rpy3"},{"post_id":"cisry9vq7000mlsvffkera9sr","tag_id":"cisry9vry002nlsvfzd7wq9ts","_id":"cisry9vry002slsvfbbruj1jo"},{"post_id":"cisry9vq7000mlsvffkera9sr","tag_id":"cisry9vry002qlsvfe4ksnie3","_id":"cisry9vry002tlsvfoq0lpisj"},{"post_id":"cisry9vq7000olsvfq5avjjqm","tag_id":"cisry9vry002nlsvfzd7wq9ts","_id":"cisry9vry002ylsvfjloho6n8"},{"post_id":"cisry9vq7000olsvfq5avjjqm","tag_id":"cisry9vry002ulsvf9wge88ic","_id":"cisry9vry002zlsvf5vf59req"},{"post_id":"cisry9vq7000olsvfq5avjjqm","tag_id":"cisry9vry002vlsvfja7e8e3b","_id":"cisry9vry0031lsvfbxh9dnm1"},{"post_id":"cisry9vq7000olsvfq5avjjqm","tag_id":"cisry9vry002wlsvfibe66dfo","_id":"cisry9vry0032lsvfvtbezy2w"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry002nlsvfzd7wq9ts","_id":"cisry9vry003alsvf600pc6ku"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0030lsvfv5u73n20","_id":"cisry9vry003blsvf6n4byj0l"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0033lsvf3095pu8c","_id":"cisry9vry003clsvfd2s5km55"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0034lsvf0kcdklh2","_id":"cisry9vry003dlsvfxt02f13d"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0035lsvfnr8obg1v","_id":"cisry9vry003elsvf3jkri74q"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0036lsvf3z5dx7is","_id":"cisry9vry003flsvfeji653lp"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0037lsvfz7nyzaso","_id":"cisry9vry003glsvfqyxj22oh"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0038lsvf8lqy82uh","_id":"cisry9vry003hlsvfx42kr6hm"},{"post_id":"cisry9vq7000tlsvfl8cm8kzr","tag_id":"cisry9vry0039lsvfaff4577p","_id":"cisry9vry003ilsvfk45bqwl6"}],"Tag":[{"name":"创业","_id":"cisry9vp60005lsvfq9ywevs9"},{"name":"个人","_id":"cisry9vpm0009lsvf5tdwea6c"},{"name":"商业模式","_id":"cisry9vq4000glsvf0uqkyq2u"},{"name":"链家","_id":"cisry9vq7000llsvfg0kvmh0q"},{"name":"玻璃投影","_id":"cisry9vq7000slsvffbahwrf1"},{"name":"w3c","_id":"cisry9vq7000xlsvfr7zly6qg"},{"name":"BFC","_id":"cisry9vq70012lsvfov4x26m9"},{"name":"css","_id":"cisry9vq70015lsvfvbxqsfal"},{"name":"margin","_id":"cisry9vqn0018lsvf2juipf1o"},{"name":"margin偏移","_id":"cisry9vqn001klsvfjb45eq3z"},{"name":"z-index","_id":"cisry9vqn001mlsvf48lj6993"},{"name":"层叠上下文","_id":"cisry9vr3001ulsvf9abradmx"},{"name":"视觉格式化模型","_id":"cisry9vr30021lsvf1fnq4u7q"},{"name":"非置换元素","_id":"cisry9vr30022lsvf4ykhoben"},{"name":"置换元素","_id":"cisry9vr30023lsvfzh77rp4i"},{"name":"包含块","_id":"cisry9vri002clsvftxa8hjtt"},{"name":"随笔","_id":"cisry9vri002dlsvfda8hygqe"},{"name":"生活","_id":"cisry9vri002glsvfyj0zlxfq"},{"name":"MySQL","_id":"cisry9vri002jlsvfl6l6ae88"},{"name":"mysql","_id":"cisry9vry002mlsvfr9rtw6g4"},{"name":"HTML5","_id":"cisry9vry002nlsvfzd7wq9ts"},{"name":"viewport","_id":"cisry9vry002qlsvfe4ksnie3"},{"name":"meta","_id":"cisry9vry002ulsvf9wge88ic"},{"name":"meta大全","_id":"cisry9vry002vlsvfja7e8e3b"},{"name":"meta列表","_id":"cisry9vry002wlsvfibe66dfo"},{"name":"设备像素比","_id":"cisry9vry0030lsvfv5u73n20"},{"name":"devicePixelRatio","_id":"cisry9vry0033lsvf3095pu8c"},{"name":"DIP","_id":"cisry9vry0034lsvf0kcdklh2"},{"name":"设备独立像素","_id":"cisry9vry0035lsvfnr8obg1v"},{"name":"physical pixel","_id":"cisry9vry0036lsvf3z5dx7is"},{"name":"物理像素","_id":"cisry9vry0037lsvfz7nyzaso"},{"name":"PPI","_id":"cisry9vry0038lsvf8lqy82uh"},{"name":"每英寸像素量","_id":"cisry9vry0039lsvfaff4577p"}]}}